(seed :portal.demo1
      :portal-contacts (:demo.sheet) ;; :demo-image)
      :bindings (:package package :system portal :portal-name portal-name)
      :branches (:view
                 (lambda (input)
                   (print (list :pa package portal))
                   (authorize
                       (:user)
                       (symbol-value (intern "*STATE-API*" (string-upcase package)))
                    (-<> (uic ((:type :group :linear :main :split :left-sidebar)
                               (:members :sidebar :main))
                              (uic ((:type :group :stack)
                                    (:members :heading :main :menu))
                                   (uic ((:type :heading))
                                        (string-downcase portal-name))
                                   (uic ((:type :form) (:app :set-endpoint))
                                        (portal-contacts portal))
                                   (if (not (portal-endpoint portal))
                                       nil (uic ((:type :form :branch-navigation) (:app :set-nav-point))
                                                (render-nav-menu
                                                 (interface-interact (portal-endpoint portal)
                                                                     :view)))))
                              (if (not (portal-endpoint portal))
                                  nil (interface-interact (portal-endpoint portal)
                                                          :view)))
                      (print <>)
                      (in-system-context <> package)
                      (interface-format-form input)
                      (render-html-interface (encode <>)))
                     "<div>Not logged in.</div>")
                    )
                 :systems
                 (lambda (input)
                   (if input (let ((epsym (intern input "KEYWORD")))
                               (setf (of-system portal :props :endpoint)
                                     (intern input "KEYWORD"))
                               ;; (instantiate-priority-macro-reader (asdf:load-system epsym))
                               (load-seed-system epsym)
                               )
                       (-<> (with-meta (of-system portal :props :portal-contacts)
                              :type (:form))
                         (encode <>))))
                 ))
