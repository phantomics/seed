(sprout :demo-market :system (:description "This is demoMarket, a package demonstrating market data visualization with Seed."
					    :author "Andrew Sengul"
					    :license "GPL-3.0") 
	:package ((:use :common-lisp)(:export))
        :branches ((stage (in (set-time))
                          (out (set-type :stage)
			       (display-params (:primary (:chart) (:main))
					       (:adjunct (:clipboard :history)))
			       (codec)))
                   (chart (in (set-time) (chart-entity :main :chart-entities) (put-image))
			  (out (set-type :chart :dygraph)
			       (stage-params :primary-controls (:select :line :retrace-y :retrace-x)
					     :secondary-controls (:zoom-real-size))
			       (put-image (get-value :chart-data))
			       (json-to-display)))
		   ;; (main (in (set-time)
		   ;; 	     (if-condition (is-display-format) (:then (codec)))
		   ;; 	     (form) (fork-to :history))
		   ;; 	 (out (set-type :form)
		   ;; 	      (if-condition (is-image :not)
		   ;; 			    (:then (put-image (get-file :-self)) (code-package)
                   ;;                                 (set-time) (fork-to :history) (put-image) (codec))
		   ;; 			    (:else (set-data (get-image)) (form)
		   ;; 				   (if-condition (is-param :to-display)
		   ;; 						 (:then (codec)))))))
                   (main (in (set-time)
			     (if-condition (is-display-format) (:then (codec)))
			     (form) (fork-to :history) (put-image)
			     (if-condition (is-param :save)
					   (:then (code-package) (put-image) (put-file (get-image) :-self)
                                                  (code-package :reverse) (put-image))
					   (:else (if-condition (is-param :revert)
								(:then (nullify-image)
								       (set-stable) (fork-to :history))
								(:else (set-stable :not))))))
			 (out (set-type :form)
			      (if-condition (is-image :not)
					    (:then (put-image (get-file :-self)) (code-package)
                                                   (set-time) (fork-to :history) (put-image) (codec))
					    (:else (set-data (get-image)) (form)
						   (if-condition (is-param :to-display)
								 (:then (codec)))))))
                   (clipboard (in (set-time) (put-image (clipboard (get-image))))
                              (out (set-type :form) (clipboard)
                                   (if-condition (is-image :not) (:then (put-image))
						 (codec))))
                   (history (in (put-image (history (get-image))))
                            (out (set-type :form) (history) (codec)))))
