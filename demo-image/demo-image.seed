(sprout :demo-image :system (:description "This is demoImage, a package demonstrating raster image editing with Seed."
					    :author "Andrew Sengul"
					    :license "GPL-3.0") 
	:package ((:use :common-lisp :seed.app-model.raster-layers.base)(:export))
        :branches ((stage (in (with)
			      (set-time))
                          (out (with (:type :stage))
			       (seed.generate::display-params -o (:primary (:main :image))
							      ;; (:adjunct (:clipboard :history))
							      (:adjunct (:history))
							      )
			       (codec -o)))
                   (main (in (with)
			     (set-time -i)
			     ;; (if (is-param :to-display)
			     ;; 	 (codec -i) (identity -i))
			     (codec -i)
			     (form -i) (fork-to -i :history) (put-image -i)
			     (if (is-param :save)
				 (progn (code-package -i) (put-image -i)
					;; (put-file (get-image) :-self)
					(put-file -i :-self)
					(code-package -i :reverse) (put-image -i))
				 (if (is-param :revert)
				     (progn (nullify-image -i)
					    (set-stable -i) (fork-to -i :history))
				    (set-stable -i :not))))
			 (out (with (:type :form))
			      (get-image)
			      (if (not (is-image))
				  (progn (put-image (get-file :-self))
					 (set-time -o)
					 (code-package -o)
					 (fork-to -o :history)
					 (put-image -o) (codec -o))
				  (progn (set-data (get-image)) (form -o)
					 (if (is-param :to-display)
					     (codec -o))))
			      ;; (if-condition (is-image :not)
			      ;; 		    (:then (put-image (get-file :-self)) (code-package)
			      ;;                      (set-time) (fork-to :history) (put-image) (codec))
			      ;; 		    (:else (set-data (get-image)) (form)
			      ;; 			   (if-condition (is-param :to-display)
			      ;; 					 (:then (codec)))))
			      ))
                   (image (out (with (:type :graphic :bitmap))
			       (if (print (not (is-image)))
				   (get-value :image-output-path)
				   (get-image))))
                   ;; (clipboard ;; (in (set-time) (put-image (clipboard (get-image))))
		   ;;  (out (with (:type :form))
		   ;; 	 (clipboard -o)
		   ;; 	 (if (not (is-image))
		   ;; 	     (put-image -o)
		   ;; 	     (codec -o))))
                   (history (in (with)
				(put-image (history (get-image) -i)))
		    (out (with (type :form))
		   	 (history (get-image)) (codec -o)))))


;; (in (set-time)
;;     (if-condition (is-display-format) (:then (codec)))
;;     (form) (fork-to :history) (put-image)
;;     (stage-params :contextual-menu
;; 		   (:insert-fibo-points :insert-circle :insert-rect))
;;     (if-condition (is-param :save)
;; 		   (:then (code-package) (put-image) (put-file (get-image) :-self)
;;                          (code-package :reverse) (put-image))
;; 		   (:else (if-condition (is-param :revert)
;; 					(:then (nullify-image)
;; 					       (set-stable) (fork-to :history))
;; 					(:else (set-stable :not))))))
