;;;; slate.base.lisp

(in-package #:seed.app-model.document.slate.base)

(defun render-html (form)
  (if (and (eq :document (first form))
	   (eq :nodes (caadr form))
	   (string= "document" (getf (second form) :kind)))
      (mapcar #'render-node (cadadr form))))

(defun render-node (node)
  (labels ((apply-marks (marks object)
	     (if marks
		 (let ((this-mark (first marks)))
		   (apply-marks (rest marks)
				(cond ((string= "bold" (getf this-mark :type))
				       `(:strong ,object))
				      ((string= "italic" (getf this-mark :type))
				       `(:em ,object))
				      (t object))))
		 object)))
    (flet ((wrap (object)
	     (cond ((string= "paragraph" (getf node :type))
		    `(:p ,object))))
	   (render-leaf (leaf)
	     (if (string= "leaf" (getf leaf :kind))
		 (if (getf leaf :marks)
		     (apply-marks (getf leaf :marks)
				  (getf leaf :text))
		     (getf leaf :text)))))
      (cond ((eq :nodes (first node))
	     (print (list :nno node))
	     (cons (cond ((string= "paragraph" (getf node :type))
			  :p)
			 ((string= "section" (getf node :type))
			  :p)
			 ((string= "quote" (getf node :type))
			  :blockquote)
			 ((string= "count" (getf node :type))
			  :ol)
			 ((string= "points" (getf node :type))
			  :ul)
			 ((string= "member" (getf node :type))
			  :li))
		   (if (eq :leaves (caaadr node))
		       (render-node (caadr node))
		       (mapcar #'render-node (second node)))))
	     ((eq :leaves (first node))
	      (mapcar #'render-leaf (second node)))))))


(defmacro document-as-html (form)
  (let ((stream-symbol (gensym)))
    `(let ((,stream-symbol (make-string-output-stream)))
       (cl-who:with-html-output (,stream-symbol)
	 (:div ,@(render-html form)))
       (get-output-stream-string ,stream-symbol))))
