(sprout :demo-sheet :system (:DESCRIPTION
			     "This is demoSheet, a package created to demonstrate Seed's spreadsheet module."
			     :AUTHOR "Andrew Sengul" :LICENSE "GPL-3.0")
        :package ((:use :common-lisp :seed-lib-table) (:export))
        :branches
        ((stage (in (set-time))
                (out (set-type :stage)
		     (display-params (:primary (:main :cells) (:doc) (:apl :space) (:graph :node))
				     (:adjunct (:clipboard :history)))
		     (codec)))
         (main (in (contingencies :sheet-lock)
		   (stage-params :contextual-menu
				 (:insert-add-op :insert-mult-op))
                   (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
                                 (:then (set-time)
                                        (if-condition (is-display-format) (:then (codec)))
                                        (form) (fork-to :history) (put-image)
                                        (if-condition (is-param :save)
                                                      (:then (put-file (table-specs (get-file :-self)) :-self)
                                                             (set-stable) (in-branch :cells (put-image nil)))
                                                      (:else (if-condition (is-param :revert)
						                           (:then (nullify-image)
                                                                                  (set-stable) (fork-to :history))
						                           (:else (set-stable :not))))))))
               (out (set-type :form)
	            (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
		            	  (set-meta :locked nil)
				  (set-meta :locked t))
                    (if-condition (is-image :not)
                                  (:then (put-image (table-specs (get-file :-self)))
                                         (set-time) (fork-to :history) (codec))
       	                          (:else (set-data (get-image)) (form)
                                         (if-condition (is-param :to-display)
                                                       (:then (codec)))))))
         (cells (in (contingencies :sheet-lock)
                    (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
                                  (:then (set-time)
                                         (if-condition (is-param :from-history)
                                                       (:then (put-image))
                                                       (:else (sheet) (fork-to :history) (put-image)))
                                         (if-condition (is-param :save)
                                                       (:then (put-file (dyn-assign (get-file :main)
										    :main-table)
									:main)
                                                              (put-image nil) (set-stable))
                                                       (:else (set-stable :not))))))
                (out (set-type :matrix :spreadsheet)
		     (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
		            	   (set-meta :locked nil)
				   (set-meta :locked t))
                     (if-condition (is-image :not)
                                   (:then (get-value :main-table) (put-image) (set-time) (fork-to :history)))
                     (sheet)))
	 (apl (in (set-time) (put-image)
	 	   (if-condition (is-param :save)
	 			 (:then (put-file (dyn-assign (get-file :main)
	 						      :gen-space-apl)
	 					  :main))
				 (:else (if-condition (is-param :revert)
						      (:then (nullify-image) (set-stable))
						      (:else (set-stable :not))))))
	       (out (set-type :text)
		    (put-image (get-value :gen-space-apl))))
	 (space (out (set-type :space :block)
	 	     (put-image (get-value :generated-space))))
	 (doc (in (set-time)
		  (stage-params :secondary-controls (:doc-mark-bold :doc-mark-italic
								    :doc-node-quote :doc-node-pgraph))
		  (put-image)
	 	  (if-condition (is-param :save)
	 			(:then (put-file (dyn-assign (get-file :main)
	 						     :document-content
	 						     (json-string-structure))
	 					 :main))))
	      (out (set-type :document)
	 	   (put-image (get-value :document-content))
	 	   (json-string-structure)))
	 (graph (in (set-time)
		    (stage-params :secondary-controls
				  (:add-graph-node :add-graph-link :remove-graph-object))
		    (if-condition (is-param :set-point)
				  (nullify-image :node))
		    (put-image (graph-garden-path-content)))
		(out (set-type :shape :graph)
		     (if-condition (is-image :not)
				   (:then (put-image (graph-garden-path-content (get-file :-self) :main-graph))
					  (set-time) (fork-to :history)
					  (json-to-display (graph-garden-path-display)))
				   (:else (json-to-display (graph-garden-path-display (get-image)))))))
	 (node (in (set-time)
			 (if-condition (is-display-format) (:then (codec)))
			 (put-image)
			 ;;(set-param :node-change t)
			 (fork-to :graph))
		     (out (set-type :form)
			  (if-condition (is-image :not)
					(:then (put-image (graph-garden-path-node-content (get-image :graph)
											  (get-meta :point
												    :of-branch
												    :graph)))
					       (set-time) (codec))
					(:else (set-data (get-image)) (form)
					       (codec)))))
	 (clipboard (in (set-time) (put-image (clipboard (get-image))))
                    (out (set-type :form) (clipboard)
                         (if-condition (is-image :not) (:then (put-image))
                         (codec))))
         (history (in (put-image (history (get-image))))
                  (out (set-type :form) (history) (codec)))))
