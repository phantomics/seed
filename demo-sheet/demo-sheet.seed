(sprout :demo-sheet :system (:DESCRIPTION
			     "This is demoSheet, a package created to demonstrate Seed's spreadsheet module."
			     :AUTHOR "Andrew Sengul" :LICENSE "GPL-3.0")
        :package ((:use #:common-lisp #:seed.app-model.sheet.base
			#:seed.app-model.graph.garden-path #:seed.app-model.document-slate.base)
		  (:export))
        :branches
        ((stage (in (with)
		    (set-time //))
		(out (with (:type :stage))
		     (seed.generate::display-params -o (:primary (:main :cells)); (:doc :page) (:apl :space))
						    (:adjunct (:clipboard :history))
						    ;; (:adjunct (:history))
						    )
		     (codec // -o)))
	 (main (in (with)
		   (set-time // -i)
		   (codec // -i)
		   (form // -i) (fork-to // -i :history) (put-image // -i)
		   (if (is-param // :save)
		       (progn (code-package // -i) (put-image // -i)
			      ;; (put-file (get-image) :-self)
			      (put-file // -i :-self)
			      (code-package // -i :reverse) (put-image // -i))
		       (if (is-param // :revert)
			   (progn (nullify-image // -i)
				  (set-stable // -i) (fork-to // -i :history))
			   (set-stable // -i :not))))
	       (out (with (:type :form))
		    (get-image //)
		    (if (not (is-image //))
			(progn (put-image // (table-specs // (get-file // :-self)))
			       (set-time // -o) (code-package // -o)
			       (fork-to // -o :history)
			       (put-image // -o) (codec // -o))
			(progn (set-data // (get-image //)) (form // -o)
			       (if (is-param // :to-display)
				   (codec // -o)
				   (form // (get-image //)))))
		    ))

	 ;; (main (in (contingencies :sheet-lock)
	 ;; 	   (stage-params :contextual-menu
	 ;; 			 (:insert-add-op :insert-mult-op))
         ;;           (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
         ;;                         (:then (set-time)
         ;;                                (if-condition (is-display-format) (:then (codec)))
         ;;                                (form) (fork-to :history) (put-image)
         ;;                                (if-condition (is-param :save)
         ;;                                              (:then (put-file (table-specs (get-file :-self)) :-self)
         ;;                                                     (set-stable) (in-branch :cells (put-image nil)))
         ;;                                              (:else (if-condition (is-param :revert)
	 ;; 					                           (:then (nullify-image)
         ;;                                                                          (set-stable) (fork-to :history))
	 ;; 					                           (:else (set-stable :not))))))))
         ;;       (out (set-type :form)
	 ;;            (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
	 ;; 	            	  (set-meta :locked nil)
	 ;; 			  (set-meta :locked t))
         ;;            (if-condition (is-image :not)
         ;;                          (:then (put-image (table-specs (get-file :-self)))
         ;;                                 (set-time) (fork-to :history) (codec))
       	 ;;                          (:else (set-data (get-image)) (form)
         ;;                                 (if-condition (is-param :to-display)
         ;;                                               (:then (codec)))))))
	 (cells (in (with (:type :matrix :spreadsheet))
		    (set-time // -i)
		    (if (is-param // :from-history)
			(put-image // -i)
			(progn (sheet // -i) (fork-to // -o :history)
			       (put-image // -i)))
		    (if (is-param // :save)
			(put-file // (dynamic-var // (get-file :main)
						  :main-table)
				  :main)
			(put-image // nil) (set-stable // -i)))
		(out (with (:type :matrix :spreadsheet))
		     (if (not (is-image //))
			 (progn (get-value // :main-table)
				(put-image // -o) (set-time // -o) (fork-to // -o :history)
				(sheet // -o))
			 (sheet // -o))))

	 ;; (cells (in (contingencies :sheet-lock)
         ;;            (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
         ;;                          (:then (set-time)
         ;;                                 (if-condition (is-param :from-history)
         ;;                                               (:then (put-image))
         ;;                                               (:else (sheet) (fork-to :history) (put-image)))
         ;;                                 (if-condition (is-param :save)
         ;;                                               (:then (put-file (dynamic-var (get-file :main)
	 ;; 									     :main-table)
	 ;; 								:main)
         ;;                                                      (put-image nil) (set-stable))
         ;;                                               (:else (set-stable :not))))))
         ;;        (out (set-type :matrix :spreadsheet)
	 ;; 	     (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
	 ;; 	            	   (set-meta :locked nil)
	 ;; 			   (set-meta :locked t))
         ;;             (if-condition (is-image :not)
         ;;                           (:then (get-value :main-table) (put-image) (set-time) (fork-to :history)))
         ;;             (sheet)))
	 ;; (apl (in (set-time) (put-image)
	 ;; 	  (if-condition (is-param :save)
	 ;; 			(:then (put-file (dynamic-var (get-file :main)
	 ;; 						      :gen-space-apl)
	 ;; 					 :main))
	 ;; 			(:else (if-condition (is-param :revert)
	 ;; 					     (:then (nullify-image) (set-stable))
	 ;; 					     (:else (set-stable :not))))))
	 ;;      (out (set-type :text)
	 ;; 	   (put-image (get-value :gen-space-apl))))
	 ;; (space (out (set-type :space :block)
	 ;; 	     (put-image (get-value :generated-space))))
	 ;; (doc (in (set-time)
	 ;; 	  (stage-params :primary-controls (:doc-node-pgraph :doc-node-quote :doc-node-points :doc-node-count)
	 ;; 			:secondary-controls (:doc-mark-bold :doc-mark-italic))
	 ;; 	  (document-content)
	 ;; 	  (put-image)
	 ;; 	  (if-condition (is-param :save)
	 ;; 	  		(:then (put-file (dynamic-var (get-file :main)
	 ;; 	  					      :document-content
	 ;; 	  					      (get-image))
	 ;; 	  				 :main))))
	 ;;      (out (set-type :document)
	 ;; 	   (if-condition (is-image :not)
	 ;; 			 (:then (put-image (dynamic-var (get-file :main)
	 ;; 							:document-content))))
	 ;; 	   (document-content)))
	 ;; (page (out (set-type :html-element)
	 ;; 	    (get-value :document-content)))
	 (clipboard (in (with (:type :form))
				  (set-time // -i) (put-image // (clipboard // (get-image //) -i)))
			      (out (with (:type :form))
				   (clipboard // -i)
				   (if (not (is-image //))
				       (progn (put-image // -o) (codec // -o))
				       (codec // -o))))
	 (history (in (with (:type :form))
		      (put-image // (history // (get-image //) -i)))
		  (out (with (type :form))
		       (history // (get-image //)) (codec // -o)))
	 ;; (clipboard (in (set-time) (put-image (clipboard (get-image))))
         ;;            (out (set-type :form) (clipboard)
         ;;                 (if-condition (is-image :not) (:then (put-image))
	 ;; 			       (codec))))
         ;; (history (in (put-image (history (get-image))))
         ;;          (out (set-type :form) (history) (codec)))
	 ))
