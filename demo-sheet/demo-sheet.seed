(sprout :demo-sheet :system (:DESCRIPTION
			     "This is demoSheet, a package created to demonstrate Seed's spreadsheet module."
			     :AUTHOR "Andrew Sengul" :LICENSE "GPL-3.0")
        :package ((:use #:common-lisp #:seed.app-model.sheet.base
			#:seed.app-model.graph.garden-path #:seed.app-model.document-slate.base)
		  (:export))
        :branches
        ((stage (in (set-time))
                (out (set-type :stage)
		     (display-params (:primary (:main :cells) (:doc :page) (:apl :space))
				     (:adjunct (:clipboard :history)))
		     (codec)))
         (main (in (contingencies :sheet-lock)
		   (stage-params :contextual-menu
				 (:insert-add-op :insert-mult-op))
                   (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
                                 (:then (set-time)
                                        (if-condition (is-display-format) (:then (codec)))
                                        (form) (fork-to :history) (put-image)
                                        (if-condition (is-param :save)
                                                      (:then (put-file (table-specs (get-file :-self)) :-self)
                                                             (set-stable) (in-branch :cells (put-image nil)))
                                                      (:else (if-condition (is-param :revert)
						                           (:then (nullify-image)
                                                                                  (set-stable) (fork-to :history))
						                           (:else (set-stable :not))))))))
               (out (set-type :form)
	            (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
		            	  (set-meta :locked nil)
				  (set-meta :locked t))
                    (if-condition (is-image :not)
                                  (:then (put-image (table-specs (get-file :-self)))
                                         (set-time) (fork-to :history) (codec))
       	                          (:else (set-data (get-image)) (form)
                                         (if-condition (is-param :to-display)
                                                       (:then (codec)))))))
         (cells (in (contingencies :sheet-lock)
                    (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
                                  (:then (set-time)
                                         (if-condition (is-param :from-history)
                                                       (:then (put-image))
                                                       (:else (sheet) (fork-to :history) (put-image)))
                                         (if-condition (is-param :save)
                                                       (:then (put-file (dynamic-var (get-file :main)
										     :main-table)
									:main)
                                                              (put-image nil) (set-stable))
                                                       (:else (set-stable :not))))))
                (out (set-type :matrix :spreadsheet)
		     (if-condition (is-contingent (:all-of :sheet-lock) (:do (is-stable)))
		            	   (set-meta :locked nil)
				   (set-meta :locked t))
                     (if-condition (is-image :not)
                                   (:then (get-value :main-table) (put-image) (set-time) (fork-to :history)))
                     (sheet)))
	 (apl (in (set-time) (put-image)
		  (if-condition (is-param :save)
				(:then (put-file (dynamic-var (get-file :main)
	 						      :gen-space-apl)
						 :main))
				(:else (if-condition (is-param :revert)
						     (:then (nullify-image) (set-stable))
						     (:else (set-stable :not))))))
	      (out (set-type :text)
		   (put-image (get-value :gen-space-apl))))
	 (space (out (set-type :space :block)
	 	     (put-image (get-value :generated-space))))
	 (doc (in (set-time)
	 	  (stage-params :primary-controls (:doc-node-pgraph :doc-node-quote :doc-node-points :doc-node-count)
				:secondary-controls (:doc-mark-bold :doc-mark-italic))
		  (document-content)
	 	  (put-image)
	 	  (if-condition (is-param :save)
	 	  		(:then (put-file (dynamic-var (get-file :main)
	 	  					      :document-content
	 	  					      (get-image))
	 	  				 :main))))
	      (out (set-type :document)
		   (if-condition (is-image :not)
				 (:then (put-image (dynamic-var (get-file :main)
								:document-content))))
	 	   (document-content)))
	 (page (out (set-type :html-element)
		    (get-value :document-content)))
	 (clipboard (in (set-time) (put-image (clipboard (get-image))))
                    (out (set-type :form) (clipboard)
                         (if-condition (is-image :not) (:then (put-image))
				       (codec))))
         (history (in (put-image (history (get-image))))
                  (out (set-type :form) (history) (codec)))
	 ))
