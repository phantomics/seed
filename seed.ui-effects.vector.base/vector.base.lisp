;;;; vector.base.lisp

(in-package #:seed.ui-model.react)

(defvar title-text-standard)
(setq title-text-standard
      `(lambda (interface)
	 (let ((text-xoffset-expandable (* 1.7 (@ interface params section)))
	       (text-xoffset-unexpandable (* 1.1 (@ interface params section)))
	       (text-yposition 4.8))
	   (chain interface node-enter (append "text")
		  (attr "class" "text")
		  (attr "dy" text-yposition)
		  (attr "x" (lambda (d) (if (chain interface params visualizer-logic (node-has-children d))
					    text-xoffset-expandable text-xoffset-unexpandable)))
		  (text (lambda (d) (if (@ d data meta) (@ d data meta title))))))))

(defvar circle-icon-standard)
(setq circle-icon-standard
      `(lambda (interface)
	 (let* ((section (@ interface params section))
		(main-radius (/ (* 0.8 section) 2))
		(outmost-radius (/ (* 0.95 section) 2))
		(inner-circle-radius-factor (* 0.8 section))
		(spoke-radius (/ (* 0.73 section) 2))
		(inner-spoke-width (/ section 12))
		(outer-dot-radius (/ (* 0.85 section) 2))
		(outer-band-radius (/ (* 0.82 section) 2))
		(outer-arc-point-radius (/ (* 1.025 section) 2))
		(icon-path-x-offset (* 0.65 section))
		(icon-path-y-offset (* -1.85 section))
		(text-frame-indent (/ (* 0.875 section) 2))
		(text-frame-height (* 0.75 section))
		(text-frame-border-radius (/ (* 0.75 section) 2)))
	   (flet ((manifest-inner-circle-radius (value)
		    ;; get radius of inner circle - represents fraction metadata
		    (/ inner-circle-radius-factor (+ 2.2 (* 0.2 value))))
		  (manifest-inner-spoke-points (value)
		    ;; create intruding spoke path - represents integer metadata
		    (let ((step (/ (* pi 2) value))
			  (arc-position (* pi 0.5)) ;; initial position is at right side of circle
			  (path "M0,0"))
		      (loop for x from 0 to (1- value)
			 do (setq path (+ path " M" (* (* spoke-radius 0.815)
						       (sin arc-position))
					  "," (* (* spoke-radius 0.815)
						 (cos arc-position))
					  " L" (* spoke-radius (sin arc-position))
					  "," (* spoke-radius (cos arc-position)) " ")
				  arc-position (+ step arc-position)))
		      path))
		  (manifest-outer-spoke-points (value)
		    ;; create extruding spoke path - represents integer metadata
		    (let* ((step (/ (* pi -2) 32))
			   (arc-position (- (* pi 1.75) ;; initial position is at lower left side of circle
					    (* step (/ (1- value) 2))))
			   (path ""))
		      (loop for x from 0 to (1- value)
			 do (setq path (+ path "M0,0 L" (* outer-dot-radius (sin arc-position))
					  "," (* outer-dot-radius (cos arc-position)) " ")
				  arc-position (+ step arc-position)))
		      path))
		  (manifest-outer-band (value)
		    ;; create extruding band path - represents fraction metadata
		    (let* ((start-arc-position (- (* pi 0.75)
						  (* pi (/ value 2))))
			   (end-arc-position (+ start-arc-position (* pi (/ value 2))))
			   (startx (* outer-band-radius (sin start-arc-position)))
			   (starty (* outer-band-radius (cos start-arc-position))))
		      (+ "M" startx " " starty " a " outer-band-radius " " outer-band-radius
			 " 0 0 0 " (- (- startx (* outer-band-radius (sin end-arc-position))))
			 " " (- (- starty (* outer-band-radius (cos end-arc-position))))))))
	     (let ((node-icon (chain interface node-enter
				     (append "svg:g")
				     ;; TODO: complete class function
				     ;;(attr "class" (lambda (d) "object-data-fetch glyph"))
				     (attr "class" "glyph"))))
	       (chain node-icon (append "svg:path")
		      ;; TODO: complete class function
		      (attr "class" "outer-meta-spokes")
		      (attr "d" (lambda (d) (manifest-outer-spoke-points 3)))
		      (attr "transform" (+ "translate(" main-radius ",0)")))

	       (chain node-icon (append "svg:path")
		      ;; TODO: complete class function
		      (attr "class" "outer-meta-band")
		      (attr "d" (lambda (d) (manifest-outer-band 0.6)))
		      (attr "transform" (+ "translate(" main-radius ",0)")))

	       ;; outer chromatic circle
	       (chain node-icon (append "svg:circle")
		      (attr "class" "outer-circle")
		      (attr "cy" 0)
		      (attr "cx" main-radius)
		      (attr "r" main-radius))

	       ;; inner white circle with radius according to a metadata fraction
	       (chain node-icon (append "svg:circle")
		      (attr "class" "inner-circle")
		      (attr "cy" 0)
		      (attr "cx" main-radius)
		      (attr "r" (manifest-inner-circle-radius 0.5)))

	       ;; .call(d3.drag()
	       ;; 		    .on("start", dragstarted)
	       ;; 		    .on("drag", dragged)
	       ;; 		    .on("end", dragended))
	       )))))

(defvar expand-button-standard)
(setq expand-button-standard
      `(lambda (interface)
	 (let* ((section (@ interface params section))
		(main-radius (* 0.25 section))
		(outer-radius (* 0.28 section))
		(arc-point-radius (* 0.32 section))
		(crossbar-length (* 0.3 section))
		(crossbar-breadth (* 0.1 section))
		(indentation (* 0.955 section)))
	   (flet ((manifest-arc-points (value)
		    ;; create encircling dot path - represents integer metadata
		    (let* ((extra-spoke-length-factor 0.35)
			   (step (/ (* pi -2) 24))
			   (arc-position (- (* pi 0.5)
					    (* step (/ (1- value) 2)))))
		      "M0,0")))
	     (let ((button (chain interface node-enter
				  (append "svg:g")
				  (attr "class" "expand-control")
				  (attr "cursor" "pointer")
				  (attr "transform" (+ "translate(" indentation ",0)"))
				  (attr "style" (lambda (d)
						  (if (not (chain interface params visualizer-logic
								  (node-has-children d)))
						      "display: none" ""))))))
	       (chain button (append "svg:circle")
		      (attr "class" "button-backing")
		      (attr "cy" 0)
		      (attr "cx" main-radius)
		      (attr "r" outer-radius))

	       (chain button (append "svg:circle")
		      (attr "class" "button-circle")
		      (attr "cy" 0)
		      (attr "cx" main-radius)
		      (attr "r" main-radius))

	       (chain button (append "svg:rect")
		      (attr "x" (- main-radius (/ crossbar-length 2)))
		      (attr "y" (/ crossbar-breadth -2))
		      (attr "height" crossbar-breadth)
		      (attr "width" crossbar-length))

	       (chain button (append "svg:rect")
		      (attr "x" (- main-radius (/ crossbar-breadth 2)))
		      (attr "y" (* -1.5 crossbar-breadth))
		      (attr "id" (lambda (d) (+ "plusCrossbar" (@ d id))))
		      (attr "class" "plus-crossbar")
		      (attr "width" crossbar-breadth)
		      (attr "height" (lambda (d) (if (chain interface params visualizer-logic (node-expanded d))
		       				     0 crossbar-length))))

	        ;; (chain node (select-all ".plus-crossbar")
		;;       (transition) (duration (@ interface params duration))
		;;       (attr "y" (lambda (d) (if (chain interface params visualizer-logic (node-expanded d))
		;; 				(* -1.5 crossbar-breadth) (/ crossbar-breadth -2))))
		;;       (attr "height" (lambda (d) (if (chain interface params visualizer-logic (node-expanded d))
		;; 				     0 crossbar-length))))
	       
	       (chain button (append "svg:circle")
		      (on "click" (@ interface params interface-actions expand-toggle-object))
		      (attr "opacity" 0)
		      (attr "cy" 0)
		      (attr "cx" main-radius)
		      (attr "r" outer-radius))
	       ;; TODO: complete this
	       )))))

(defvar icon-title-frame-standard)
(setq icon-title-frame-standard
      `(lambda (interface)
	 (let* ((section (@ interface params section))
		(main-radius (/ (* 0.8 section) 2))
		(outmost-radius (/ (* 0.95 section) 2))
		(text-frame-indent (* 0.85 section))
		(text-frame-joiner-width (* 2 section))
		(text-frame-joiner-indent (* 0.4375 section))
		(text-frame-height (* 0.75 section))
		(text-outer-frame-height section)
		(text-frame-border-radius (/ (* 0.75 section) 2))
		(text-frame-outer-border-radius (/ (* 0.95 section) 2)))
	   (flet ((get-node-bar-width (node)
		    (- (@ interface params width) (+ (@ node y) (* 1.75 section)))))
	     (let ((icon-title-frame (chain interface node-enter
					    (append "svg:g")
					    (attr "class" "icon-title-frame")
					    (attr "height" text-frame-height)
					    (attr "width" get-node-bar-width))))
	       (chain icon-title-frame (append "svg:rect")
		      (attr "class" "text-frame-joiner")
		      (attr "y" (- text-frame-border-radius))
		      (attr "x" text-frame-joiner-indent)
		      (attr "height" text-frame-height)
		      (attr "width" text-frame-joiner-width))

	       (chain icon-title-frame (append "svg:rect")
		      (attr "class" "text-frame")
		      (attr "y" (- text-frame-border-radius))
		      (attr "x" text-frame-indent)
		      (attr "height" text-frame-height)
		      (attr "width" get-node-bar-width)
		      (attr "rx" text-frame-border-radius)
		      (attr "ry" text-frame-border-radius))

	       (chain icon-title-frame (append "svg:rect")
		      (attr "class" "interactor")
		      (attr "y" (- text-frame-border-radius))
		      (attr "x" text-frame-indent)
		      (attr "height" text-outer-frame-height)
		      (attr "width" get-node-bar-width)
		      (attr "opacity" 0)
		      (on "click" (@ interface params interface-actions set-point-object)))

	       (chain icon-title-frame (append "svg:circle")
		      (attr "class" "circle-frame")
		      (attr "cy" 0)
		      (attr "cx" main-radius)
		      (attr "r" outmost-radius)))))))

(defvar standard-effect-set)
(setq standard-effect-set
      `(list ,title-text-standard ,icon-title-frame-standard ,circle-icon-standard ,expand-button-standard))

(defmacro standard-vector-effects ()
  `(lambda (interface)
     (chain ,standard-effect-set (map (lambda (effect) (funcall effect interface))))))
