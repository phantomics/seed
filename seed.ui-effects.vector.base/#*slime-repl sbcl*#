; SLIME 2.20
CL-USER> (asdf:load-system 'seed)
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl-ppcre-20171227-git/cl-ppcre.asd" contains definition for system "cl-ppcre-test". Please only define "cl-ppcre" and secondary systems with a name starting with "cl-ppcre/" (e.g. "cl-ppcre/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/symbol-munger-20150407-git/symbol-munger.asd" contains definition for system "symbol-munger-test". Please only define "symbol-munger" and secondary systems with a name starting with "symbol-munger/" (e.g. "symbol-munger/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/hunchentoot.asd" contains definition for system "hunchentoot-test". Please only define "hunchentoot" and secondary systems with a name starting with "hunchentoot/" (e.g. "hunchentoot/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/hunchentoot.asd" contains definition for system "hunchentoot-dev". Please only define "hunchentoot" and secondary systems with a name starting with "hunchentoot/" (e.g. "hunchentoot/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl-base64-20150923-git/cl-base64.asd" contains definition for system "cl-base64-tests". Please only define "cl-base64" and secondary systems with a name starting with "cl-base64/" (e.g. "cl-base64/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl-fad-20180430-git/cl-fad.asd" contains definition for system "cl-fad-test". Please only define "cl-fad" and secondary systems with a name starting with "cl-fad/" (e.g. "cl-fad/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/flexi-streams-20180328-git/flexi-streams.asd" contains definition for system "flexi-streams-test". Please only define "flexi-streams" and secondary systems with a name starting with "flexi-streams/" (e.g. "flexi-streams/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl+ssl-20180328-git/cl+ssl.asd" contains definition for system "openssl-1.1.0". Please only define "cl+ssl" and secondary systems with a name starting with "cl+ssl/" (e.g. "cl+ssl/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/trivial-garbage-20150113-git/trivial-garbage.asd" contains definition for system "trivial-garbage-tests". Please only define "trivial-garbage" and secondary systems with a name starting with "trivial-garbage/" (e.g. "trivial-garbage/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl-colors-20180328-git/cl-colors.asd" contains definition for system "cl-colors-tests". Please only define "cl-colors" and secondary systems with a name starting with "cl-colors/" (e.g. "cl-colors/test") in that file.
WARNING: SWANK-LOADER also exports the following symbols:
  (SWANK-LOADER:*FASL-DIRECTORY* SWANK-LOADER:LIST-FASLS SWANK-LOADER:DUMP-IMAGE SWANK-LOADER:INIT SWANK-LOADER:*SOURCE-DIRECTORY*)
See also:
  The ANSI Standard, Macro DEFPACKAGE
  The SBCL Manual, Variable SB-EXT:*ON-PACKAGE-VARIANCE*
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/puri-20180228-git/puri.asd" contains definition for system "puri-tests". Please only define "puri" and secondary systems with a name starting with "puri/" (e.g. "puri/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl-who-20171130-git/cl-who.asd" contains definition for system "cl-who-test". Please only define "cl-who" and secondary systems with a name starting with "cl-who/" (e.g. "cl-who/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/trivial-utf-8-20111001-darcs/trivial-utf-8.asd" contains definition for system "trivial-utf-8-tests". Please only define "trivial-utf-8" and secondary systems with a name starting with "trivial-utf-8/" (e.g. "trivial-utf-8/test") in that file.
STYLE-WARNING: Undefined alien: "TLSv1_1_client_method"
STYLE-WARNING: Undefined alien: "TLSv1_1_server_method"
STYLE-WARNING: Undefined alien: "TLSv1_1_method"
STYLE-WARNING: Undefined alien: "TLSv1_2_client_method"
STYLE-WARNING: Undefined alien: "TLSv1_2_server_method"
STYLE-WARNING: Undefined alien: "TLSv1_2_method"

Tests for seed.sublimate:

  Collapse of meta forms in read phase:
  [32m✓ [90m3 is expected to be 3[0m 
[0m
WARNING: SWANK/BACKEND also exports the following symbols:
  (SWANK/BACKEND:PRINT-CONDITION SWANK/BACKEND:CALLS-WHO
                                 SWANK/BACKEND:FIND-SOURCE-LOCATION
                                 SWANK/BACKEND:SOCKET-FD
                                 SWANK/BACKEND:SET-DEFAULT-INITIAL-BINDING
                                 SWANK/BACKEND:WHO-SETS
                                 SWANK/BACKEND:ACCEPT-CONNECTION
                                 SWANK/BACKEND:INTERRUPT-THREAD
                                 SWANK/BACKEND:MAKE-WEAK-KEY-HASH-TABLE
                                 SWANK/BACKEND:FRAME-VAR-VALUE
                                 SWANK/BACKEND:SLDB-BREAK-AT-START
                                 SWANK/BACKEND:HASH-TABLE-WEAKNESS
                                 SWANK/BACKEND:GETPID
                                 SWANK/BACKEND:THREAD-ATTRIBUTES
                                 SWANK/BACKEND:FRAME-LOCALS
                                 SWANK/BACKEND:FIND-THREAD
                                 SWANK/BACKEND:ARGLIST SWANK/BACKEND:PROFILE
                                 SWANK/BACKEND:THREAD-NAME
                                 SWANK/BACKEND:RECEIVE-IF
                                 SWANK/BACKEND:LOCAL-PORT
                                 SWANK/BACKEND:CALL-WITH-COMPILATION-HOOKS
                                 SWANK/BACKEND:WAKE-THREAD SWANK/BACKEND:DUP
                                 SWANK/BACKEND:FIND-LOCALLY-NICKNAMED-PACKAGE
                                 SWANK/BACKEND:FLOAT-INFINITY-P
                                 SWANK/BACKEND:EMACS-CONNECTED
                                 SWANK/BACKEND:SEND
                                 SWANK/BACKEND:REMOVE-SIGIO-HANDLERS
                                 SWANK/BACKEND:COMPUTE-BACKTRACE
                                 SWANK/BACKEND:SAVE-IMAGE
                                 SWANK/BACKEND:CALL-WITH-SYNTAX-HOOKS
                                 SWANK/BACKEND:ADD-FD-HANDLER
                                 SWANK/BACKEND:ADD-SIGIO-HANDLER
                                 SWANK/BACKEND:SWANK-COMPILE-STRING
                                 SWANK/BACKEND:MAKE-WEAK-VALUE-HASH-TABLE
                                 SWANK/BACKEND:THREAD-STATUS
                                 SWANK/BACKEND:SLDB-STEP-OUT
                                 SWANK/BACKEND:COMPILER-MACROEXPAND
                                 SWANK/BACKEND:PRINT-FRAME
                                 SWANK/BACKEND:SET-STREAM-TIMEOUT
                                 SWANK/BACKEND:TYPE-SPECIFIER-P
                                 SWANK/BACKEND:CURRENT-THREAD
                                 SWANK/BACKEND:CALL-WITH-USER-BREAK-HANDLER
                                 SWANK/BACKEND:FLOAT-NAN-P
                                 SWANK/BACKEND:DESCRIBE-SYMBOL-FOR-EMACS
                                 SWANK/BACKEND:MACROEXPAND-ALL
                                 SWANK/BACKEND:PREFERRED-COMMUNICATION-STYLE
                                 SWANK/BACKEND:FIND-EXTERNAL-FORMAT
                                 SWANK/BACKEND:SPAWN SWANK/BACKEND:ALL-THREADS
                                 SWANK/BACKEND:VALID-FUNCTION-NAME-P
                                 SWANK/BACKEND:REGISTER-THREAD
                                 SWANK/BACKEND:LISP-IMPLEMENTATION-TYPE-NAME
                                 SWANK/BACKEND:CHARACTER-COMPLETION-SET
                                 SWANK/BACKEND:COMMAND-LINE-ARGS
                                 SWANK/BACKEND:INSTALL-DEBUGGER-GLOBALLY
                                 SWANK/BACKEND:PATHNAME-TO-FILENAME
                                 SWANK/BACKEND:SWANK-COMPILE-FILE
                                 SWANK/BACKEND:WHO-SPECIALIZES
                                 SWANK/BACKEND:FIND-REGISTERED
                                 SWANK/BACKEND:CREATE-SOCKET
                                 SWANK/BACKEND:WHO-MACROEXPANDS
                                 SWANK/BACKEND:REMOVE-FD-HANDLERS
                                 SWANK/BACKEND:ACTIVATE-STEPPING
                                 SWANK/BACKEND:FRAME-CATCH-TAGS
                                 SWANK/BACKEND:FORMAT-STRING-EXPAND
                                 SWANK/BACKEND:MAKE-FD-STREAM
                                 SWANK/BACKEND:MAKE-INPUT-STREAM
                                 SWANK/BACKEND:KILL-THREAD
                                 SWANK/BACKEND:CALL-WITH-LOCK-HELD
                                 SWANK/BACKEND:WAIT-FOR-INPUT
                                 SWANK/BACKEND:INITIALIZE-MULTIPROCESSING
                                 SWANK/BACKEND:DESCRIBE-DEFINITION
                                 SWANK/BACKEND:EXEC-IMAGE
                                 SWANK/BACKEND:DISASSEMBLE-FRAME
                                 SWANK/BACKEND:FRAME-PACKAGE
                                 SWANK/BACKEND:GUESS-EXTERNAL-FORMAT
                                 SWANK/BACKEND:WRAP SWANK/BACKEND:WRAPPED-P
                                 SWANK/BACKEND:UTF8-TO-STRING
                                 SWANK/BACKEND:STRING-TO-UTF8
                                 SWANK/BACKEND:FUNCTION-NAME
                                 SWANK/BACKEND:EVAL-IN-FRAME
                                 SWANK/BACKEND:LIST-CALLEES
                                 SWANK/BACKEND:LISP-IMPLEMENTATION-PROGRAM
                                 SWANK/BACKEND:FRAME-CALL
                                 SWANK/BACKEND:COMPILER-MACROEXPAND-1
                                 SWANK/BACKEND:FRAME-RESTARTABLE-P
                                 SWANK/BACKEND:DESCRIBE-PRIMITIVE-TYPE
                                 SWANK/BACKEND:WHO-BINDS
                                 SWANK/BACKEND:SLDB-STEPPER-CONDITION-P
                                 SWANK/BACKEND:SLDB-STEP-NEXT
                                 SWANK/BACKEND:RETURN-FROM-FRAME
                                 SWANK/BACKEND:COLLECT-MACRO-FORMS
                                 SWANK/BACKEND:PACKAGE-LOCAL-NICKNAMES
                                 SWANK/BACKEND:WHO-REFERENCES
                                 SWANK/BACKEND:EVAL-CONTEXT
                                 SWANK/BACKEND:WHO-CALLS
                                 SWANK/BACKEND:DEFAULT-READTABLE-ALIST
                                 SWANK/BACKEND:LIST-CALLERS
                                 SWANK/BACKEND:MAKE-OUTPUT-STREAM
                                 SWANK/BACKEND:SLDB-STEP-INTO
                                 SWANK/BACKEND:MAKE-LOCK
                                 SWANK/BACKEND:TOGGLE-TRACE
                                 SWANK/BACKEND:FIND-DEFINITIONS
                                 SWANK/BACKEND:FILENAME-TO-PATHNAME
                                 SWANK/BACKEND:CALL-WITH-DEBUGGING-ENVIRONMENT
                                 SWANK/BACKEND:UNWRAP SWANK/BACKEND:THREAD-ID
                                 SWANK/BACKEND:CALL-WITH-DEBUGGER-HOOK
                                 SWANK/BACKEND:RECEIVE SWANK/BACKEND:UNPROFILE
                                 SWANK/BACKEND:GRAY-PACKAGE-NAME
                                 SWANK/BACKEND:INSTALL-SIGINT-HANDLER
                                 SWANK/BACKEND:CONDITION-EXTRAS
                                 SWANK/BACKEND:CLOSE-SOCKET
                                 SWANK/BACKEND:BACKGROUND-SAVE-IMAGE
                                 SWANK/BACKEND:THREAD-ALIVE-P)
See also:
  The ANSI Standard, Macro DEFPACKAGE
  The SBCL Manual, Variable *ON-PACKAGE-VARIANCE*
WARNING: SWANK also exports the following symbols:
  (SWANK:COMPILE-STRING-FOR-EMACS SWANK:DOCUMENTATION-SYMBOL SWANK:LOAD-FILE
                                  SWANK:LOOKUP-PRESENTED-OBJECT
                                  SWANK:INSPECTOR-POP
                                  SWANK:COMPILE-FILE-IF-NEEDED
                                  SWANK:LIST-ASDF-SYSTEMS
                                  SWANK:INTERACTIVE-EVAL-REGION
CL-USER> (asdf:load-system 'seed)
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl-ppcre-20171227-git/cl-ppcre.asd" contains definition for system "cl-ppcre-test". Please only define "cl-ppcre" and secondary systems with a name starting with "cl-ppcre/" (e.g. "cl-ppcre/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/symbol-munger-20150407-git/symbol-munger.asd" contains definition for system "symbol-munger-test". Please only define "symbol-munger" and secondary systems with a name starting with "symbol-munger/" (e.g. "symbol-munger/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/hunchentoot.asd" contains definition for system "hunchentoot-test". Please only define "hunchentoot" and secondary systems with a name starting with "hunchentoot/" (e.g. "hunchentoot/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/hunchentoot-v1.2.38/hunchentoot.asd" contains definition for system "hunchentoot-dev". Please only define "hunchentoot" and secondary systems with a name starting with "hunchentoot/" (e.g. "hunchentoot/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl-base64-20150923-git/cl-base64.asd" contains definition for system "cl-base64-tests". Please only define "cl-base64" and secondary systems with a name starting with "cl-base64/" (e.g. "cl-base64/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl-fad-20180430-git/cl-fad.asd" contains definition for system "cl-fad-test". Please only define "cl-fad" and secondary systems with a name starting with "cl-fad/" (e.g. "cl-fad/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/flexi-streams-20180328-git/flexi-streams.asd" contains definition for system "flexi-streams-test". Please only define "flexi-streams" and secondary systems with a name starting with "flexi-streams/" (e.g. "flexi-streams/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl+ssl-20180328-git/cl+ssl.asd" contains definition for system "openssl-1.1.0". Please only define "cl+ssl" and secondary systems with a name starting with "cl+ssl/" (e.g. "cl+ssl/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/trivial-garbage-20150113-git/trivial-garbage.asd" contains definition for system "trivial-garbage-tests". Please only define "trivial-garbage" and secondary systems with a name starting with "trivial-garbage/" (e.g. "trivial-garbage/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl-colors-20180328-git/cl-colors.asd" contains definition for system "cl-colors-tests". Please only define "cl-colors" and secondary systems with a name starting with "cl-colors/" (e.g. "cl-colors/test") in that file.
WARNING: SWANK-LOADER also exports the following symbols:
  (SWANK-LOADER:*FASL-DIRECTORY* SWANK-LOADER:LIST-FASLS SWANK-LOADER:DUMP-IMAGE SWANK-LOADER:INIT SWANK-LOADER:*SOURCE-DIRECTORY*)
See also:
  The ANSI Standard, Macro DEFPACKAGE
  The SBCL Manual, Variable SB-EXT:*ON-PACKAGE-VARIANCE*
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/puri-20180228-git/puri.asd" contains definition for system "puri-tests". Please only define "puri" and secondary systems with a name starting with "puri/" (e.g. "puri/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/cl-who-20171130-git/cl-who.asd" contains definition for system "cl-who-test". Please only define "cl-who" and secondary systems with a name starting with "cl-who/" (e.g. "cl-who/test") in that file.
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/trivial-utf-8-20111001-darcs/trivial-utf-8.asd" contains definition for system "trivial-utf-8-tests". Please only define "trivial-utf-8" and secondary systems with a name starting with "trivial-utf-8/" (e.g. "trivial-utf-8/test") in that file.
STYLE-WARNING: Undefined alien: "TLSv1_1_client_method"
STYLE-WARNING: Undefined alien: "TLSv1_1_server_method"
STYLE-WARNING: Undefined alien: "TLSv1_1_method"
STYLE-WARNING: Undefined alien: "TLSv1_2_client_method"
STYLE-WARNING: Undefined alien: "TLSv1_2_server_method"
STYLE-WARNING: Undefined alien: "TLSv1_2_method"

Tests for seed.sublimate:

  Collapse of meta forms in read phase:
  [32m✓ [90m3 is expected to be 3[0m 
[0m
WARNING: SWANK/BACKEND also exports the following symbols:
  (SWANK/BACKEND:PRINT-CONDITION SWANK/BACKEND:CALLS-WHO
                                 SWANK/BACKEND:FIND-SOURCE-LOCATION
                                 SWANK/BACKEND:SOCKET-FD
                                 SWANK/BACKEND:SET-DEFAULT-INITIAL-BINDING
                                 SWANK/BACKEND:WHO-SETS
                                 SWANK/BACKEND:ACCEPT-CONNECTION
                                 SWANK/BACKEND:INTERRUPT-THREAD
                                 SWANK/BACKEND:MAKE-WEAK-KEY-HASH-TABLE
                                 SWANK/BACKEND:FRAME-VAR-VALUE
                                 SWANK/BACKEND:SLDB-BREAK-AT-START
                                 SWANK/BACKEND:HASH-TABLE-WEAKNESS
                                 SWANK/BACKEND:GETPID
                                 SWANK/BACKEND:THREAD-ATTRIBUTES
                                 SWANK/BACKEND:FRAME-LOCALS
                                 SWANK/BACKEND:FIND-THREAD
                                 SWANK/BACKEND:ARGLIST SWANK/BACKEND:PROFILE
                                 SWANK/BACKEND:THREAD-NAME
                                 SWANK/BACKEND:RECEIVE-IF
                                 SWANK/BACKEND:LOCAL-PORT
                                 SWANK/BACKEND:CALL-WITH-COMPILATION-HOOKS
                                 SWANK/BACKEND:WAKE-THREAD SWANK/BACKEND:DUP
                                 SWANK/BACKEND:FIND-LOCALLY-NICKNAMED-PACKAGE
                                 SWANK/BACKEND:FLOAT-INFINITY-P
                                 SWANK/BACKEND:EMACS-CONNECTED
                                 SWANK/BACKEND:SEND
                                 SWANK/BACKEND:REMOVE-SIGIO-HANDLERS
                                 SWANK/BACKEND:COMPUTE-BACKTRACE
                                 SWANK/BACKEND:SAVE-IMAGE
                                 SWANK/BACKEND:CALL-WITH-SYNTAX-HOOKS
                                 SWANK/BACKEND:ADD-FD-HANDLER
                                 SWANK/BACKEND:ADD-SIGIO-HANDLER
                                 SWANK/BACKEND:SWANK-COMPILE-STRING
                                 SWANK/BACKEND:MAKE-WEAK-VALUE-HASH-TABLE
                                 SWANK/BACKEND:THREAD-STATUS
                                 SWANK/BACKEND:SLDB-STEP-OUT
                                 SWANK/BACKEND:COMPILER-MACROEXPAND
                                 SWANK/BACKEND:PRINT-FRAME
                                 SWANK/BACKEND:SET-STREAM-TIMEOUT
                                 SWANK/BACKEND:TYPE-SPECIFIER-P
                                 SWANK/BACKEND:CURRENT-THREAD
                                 SWANK/BACKEND:CALL-WITH-USER-BREAK-HANDLER
                                 SWANK/BACKEND:FLOAT-NAN-P
                                 SWANK/BACKEND:DESCRIBE-SYMBOL-FOR-EMACS
                                 SWANK/BACKEND:MACROEXPAND-ALL
                                 SWANK/BACKEND:PREFERRED-COMMUNICATION-STYLE
                                 SWANK/BACKEND:FIND-EXTERNAL-FORMAT
                                 SWANK/BACKEND:SPAWN SWANK/BACKEND:ALL-THREADS
                                 SWANK/BACKEND:VALID-FUNCTION-NAME-P
                                 SWANK/BACKEND:REGISTER-THREAD
                                 SWANK/BACKEND:LISP-IMPLEMENTATION-TYPE-NAME
                                 SWANK/BACKEND:CHARACTER-COMPLETION-SET
                                 SWANK/BACKEND:COMMAND-LINE-ARGS
                                 SWANK/BACKEND:INSTALL-DEBUGGER-GLOBALLY
                                 SWANK/BACKEND:PATHNAME-TO-FILENAME
                                 SWANK/BACKEND:SWANK-COMPILE-FILE
                                 SWANK/BACKEND:WHO-SPECIALIZES
                                 SWANK/BACKEND:FIND-REGISTERED
                                 SWANK/BACKEND:CREATE-SOCKET
                                 SWANK/BACKEND:WHO-MACROEXPANDS
                                 SWANK/BACKEND:REMOVE-FD-HANDLERS
                                 SWANK/BACKEND:ACTIVATE-STEPPING
                                 SWANK/BACKEND:FRAME-CATCH-TAGS
                                 SWANK/BACKEND:FORMAT-STRING-EXPAND
                                 SWANK/BACKEND:MAKE-FD-STREAM
                                 SWANK/BACKEND:MAKE-INPUT-STREAM
                                 SWANK/BACKEND:KILL-THREAD
                                 SWANK/BACKEND:CALL-WITH-LOCK-HELD
                                 SWANK/BACKEND:WAIT-FOR-INPUT
                                 SWANK/BACKEND:INITIALIZE-MULTIPROCESSING
                                 SWANK/BACKEND:DESCRIBE-DEFINITION
                                 SWANK/BACKEND:EXEC-IMAGE
                                 SWANK/BACKEND:DISASSEMBLE-FRAME
                                 SWANK/BACKEND:FRAME-PACKAGE
                                 SWANK/BACKEND:GUESS-EXTERNAL-FORMAT
                                 SWANK/BACKEND:WRAP SWANK/BACKEND:WRAPPED-P
                                 SWANK/BACKEND:UTF8-TO-STRING
                                 SWANK/BACKEND:STRING-TO-UTF8
                                 SWANK/BACKEND:FUNCTION-NAME
                                 SWANK/BACKEND:EVAL-IN-FRAME
                                 SWANK/BACKEND:LIST-CALLEES
                                 SWANK/BACKEND:LISP-IMPLEMENTATION-PROGRAM
                                 SWANK/BACKEND:FRAME-CALL
                                 SWANK/BACKEND:COMPILER-MACROEXPAND-1
                                 SWANK/BACKEND:FRAME-RESTARTABLE-P
                                 SWANK/BACKEND:DESCRIBE-PRIMITIVE-TYPE
                                 SWANK/BACKEND:WHO-BINDS
                                 SWANK/BACKEND:SLDB-STEPPER-CONDITION-P
                                 SWANK/BACKEND:SLDB-STEP-NEXT
                                 SWANK/BACKEND:RETURN-FROM-FRAME
                                 SWANK/BACKEND:COLLECT-MACRO-FORMS
                                 SWANK/BACKEND:PACKAGE-LOCAL-NICKNAMES
                                 SWANK/BACKEND:WHO-REFERENCES
                                 SWANK/BACKEND:EVAL-CONTEXT
                                 SWANK/BACKEND:WHO-CALLS
                                 SWANK/BACKEND:DEFAULT-READTABLE-ALIST
                                 SWANK/BACKEND:LIST-CALLERS
                                 SWANK/BACKEND:MAKE-OUTPUT-STREAM
                                 SWANK/BACKEND:SLDB-STEP-INTO
                                 SWANK/BACKEND:MAKE-LOCK
                                 SWANK/BACKEND:TOGGLE-TRACE
                                 SWANK/BACKEND:FIND-DEFINITIONS
                                 SWANK/BACKEND:FILENAME-TO-PATHNAME
                                 SWANK/BACKEND:CALL-WITH-DEBUGGING-ENVIRONMENT
                                 SWANK/BACKEND:UNWRAP SWANK/BACKEND:THREAD-ID
                                 SWANK/BACKEND:CALL-WITH-DEBUGGER-HOOK
                                 SWANK/BACKEND:RECEIVE SWANK/BACKEND:UNPROFILE
                                 SWANK/BACKEND:GRAY-PACKAGE-NAME
                                 SWANK/BACKEND:INSTALL-SIGINT-HANDLER
                                 SWANK/BACKEND:CONDITION-EXTRAS
                                 SWANK/BACKEND:CLOSE-SOCKET
                                 SWANK/BACKEND:BACKGROUND-SAVE-IMAGE
                                 SWANK/BACKEND:THREAD-ALIVE-P)
See also:
  The ANSI Standard, Macro DEFPACKAGE
  The SBCL Manual, Variable *ON-PACKAGE-VARIANCE*
WARNING: SWANK also exports the following symbols:
  (SWANK:COMPILE-STRING-FOR-EMACS SWANK:DOCUMENTATION-SYMBOL SWANK:LOAD-FILE
                                  SWANK:LOOKUP-PRESENTED-OBJECT
                                  SWANK:INSPECTOR-POP
                                  SWANK:COMPILE-FILE-IF-NEEDED
                                  SWANK:LIST-ASDF-SYSTEMS
                                  SWANK:INTERACTIVE-EVAL-REGION
                                  SWANK:INVOKE-NTH-RESTART-FOR-EMACS
                                  SWANK:CLEAR-REPL-RESULTS SWANK:AUTODOC
                                  SWANK:INSPECTOR-NEXT SWANK:SWANK-EXPAND-1
                                  SWANK:ASDF-SYSTEM-DIRECTORY
                                  SWANK:LIST-THREADS
                                  SWANK:PPRINT-INSPECTOR-PART
                                  SWANK:KILL-NTH-THREAD SWANK:COMPLETIONS
                                  SWANK:MOP SWANK:APROPOS-LIST-FOR-EMACS
                                  SWANK:DESCRIBE-DEFINITION-FOR-EMACS
                                  SWANK:FUZZY-COMPLETIONS
                                  SWANK:COMPLETIONS-FOR-CHARACTER
                                  SWANK:BACKTRACE SWANK:QUIT-INSPECTOR
                                  SWANK:FLOW-CONTROL-TEST
                                  SWANK:LIST-ALL-SYSTEMS-KNOWN-TO-ASDF
                                  SWANK:COMPILE-MULTIPLE-STRINGS-FOR-EMACS
                                  SWANK:VALUE-FOR-EDITING
                                  SWANK:INSPECTOR-HISTORY SWANK:INSPECTOR-RANGE
                                  SWANK:IO-SPEED-TEST SWANK:COMMIT-EDITED-VALUE
                                  SWANK:LIST-ALL-PACKAGE-NAMES
                                  SWANK:EXPORT-STRUCTURE
                                  SWANK:LOOKUP-PRESENTED-OBJECT-OR-LOSE
                                  SWANK:SLDB-ABORT SWANK:INSPECTOR-NTH-PART
                                  SWANK:SET-PACKAGE
                                  SWANK:SWANK-FORMAT-STRING-EXPAND
                                  SWANK:SLDB-BREAK-WITH-DEFAULT-DEBUGGER
                                  SWANK:RELOAD-SYSTEM SWANK:UNINTERN-SYMBOL
                                  SWANK:FIND-SOURCE-LOCATION-FOR-EMACS
                                  SWANK:TOGGLE-PROFILE-FDEFINITION
                                  SWANK:DESCRIBE-SYMBOL SWANK:ASDF-SYSTEM-FILES
                                  SWANK:UNEXPORT-SYMBOL-FOR-EMACS
                                  SWANK:THROW-TO-TOPLEVEL
                                  SWANK:FIND-DEFINITION-FOR-THING
                                  SWANK:SLDB-DISASSEMBLE
                                  SWANK:INSPECTOR-TOGGLE-VERBOSE SWANK:PACKAGE=
                                  SWANK:SWANK-EXPAND SWANK:SLDB-CONTINUE
                                  SWANK:PPRINT-EVAL-STRING-IN-FRAME
                                  SWANK:COMPILE-FILE-FOR-EMACS
                                  SWANK:SWANK-REQUIRE SWANK:SLDB-NEXT
                                  SWANK:SLDB-OUT SWANK:DELETE-SYSTEM-FASLS
                                  SWANK:COMPLETIONS-FOR-KEYWORD
                                  SWANK:QUIT-THREAD-BROWSER
                                  SWANK:INSPECTOR-REINSPECT
                                  SWANK:SWANK-TOGGLE-TRACE SWANK:WHO-DEPENDS-ON
                                  SWANK:TOGGLE-DEBUG-ON-SWANK-ERROR
                                  SWANK:INTERACTIVE-EVAL SWANK:UNTRACE-ALL
                                  SWANK:INSPECTOR-CALL-NTH-ACTION
                                  SWANK:*FUZZY-DUPLICATE-SYMBOL-FILTER*
                                  SWANK:INIT-PRESENTATIONS
                                  SWANK:DISASSEMBLE-FORM
                                  SWANK:FIND-DEFINITIONS-FOR-EMACS
                                  SWANK:EVAL-STRING-IN-FRAME
                                  SWANK:INSPECT-FRAME-VAR
                                  SWANK:SLDB-RETURN-FROM-FRAME
                                  SWANK:PROFILE-BY-SUBSTRING
                                  SWANK:SWANK-PROFILE-PACKAGE
                                  SWANK:ARGLIST-DISPATCH SWANK:COMPLETE-FORM
                                  SWANK:RE-EVALUATE-DEFVAR
                                  SWANK:INSPECT-PRESENTATION
                                  SWANK:SWANK-COMPILER-MACROEXPAND
                                  SWANK:INIT-INSPECTOR SWANK:FRAME-PACKAGE-NAME
                                  SWANK:ASDF-SYSTEM-LOADED-P
                                  SWANK:SWANK-DELETE-PACKAGE
                                  SWANK:DESCRIBE-FUNCTION
                                  SWANK:UNDEFINE-FUNCTION
                                  SWANK:SIMPLE-COMPLETIONS SWANK:SIMPLE-BREAK
                                  SWANK:SDLB-PRINT-CONDITION
                                  SWANK:CONNECTION-INFO
                                  SWANK:SWANK-COMPILER-MACROEXPAND-1
                                  SWANK:INSPECT-NTH-PART
                                  SWANK:START-SWANK-SERVER-IN-THREAD
                                  SWANK:XREFS SWANK:INSPECTOR-EVAL SWANK:XREF
                                  SWANK:TOGGLE-BREAK-ON-SIGNALS
                                  SWANK:EXPORT-SYMBOL-FOR-EMACS
                                  SWANK:UPDATE-INDENTATION-INFORMATION
                                  SWANK:OPERATOR-ARGLIST SWANK:INSPECT-IN-FRAME
                                  SWANK:ASDF-DETERMINE-SYSTEM
                                  SWANK:OPERATE-ON-SYSTEM-FOR-EMACS
                                  SWANK:SWANK-MACROEXPAND-ALL
                                  SWANK:SWANK-MACROEXPAND-1
                                  SWANK:DEBUG-NTH-THREAD
                                  SWANK:INSPECT-CURRENT-CONDITION
                                  SWANK:PPRINT-EVAL
                                  SWANK:FUZZY-COMPLETION-SELECTED
                                  SWANK:DEBUGGER-INFO-FOR-EMACS SWANK:PING
                                  SWANK:DESCRIBE-INSPECTEE
                                  SWANK:EVAL-AND-GRAB-OUTPUT
                                  SWANK:LOOKUP-AND-SAVE-PRESENTED-OBJECT-OR-LOSE
                                  SWANK:FRAME-LOCALS-AND-CATCH-TAGS
                                  SWANK:INVOKE-NTH-RESTART
                                  SWANK:SWANK-MACROEXPAND
                                  SWANK:LIST-ALL-SYSTEMS-IN-CENTRAL-REGISTRY)
See also:
  The ANSI Standard, Macro DEFPACKAGE
  The SBCL Manual, Variable *ON-PACKAGE-VARIANCE*
WARNING:
   redefining EMACS-INSPECT (#<SB-PCL:SYSTEM-CLASS COMMON-LISP:T>) in DEFMETHOD
WARNING:
   redefining EMACS-INSPECT (#<SB-PCL:SYSTEM-CLASS COMMON-LISP:T>) in DEFMETHOD
WARNING:
   redefining THREAD-FOR-EVALUATION (#<STRUCTURE-CLASS SWANK::MULTITHREADED-CONNECTION>
                                     #<SB-MOP:EQL-SPECIALIZER :FIND-EXISTING>) in DEFMETHOD
WARNING:
   redefining CONSUME-ITEM (#<BUILT-IN-CLASS COMMON-LISP:SYMBOL>
                            #<SB-PCL:SYSTEM-CLASS COMMON-LISP:T>) in DEFMETHOD

Tests for seed.generate:

  Fetching basic system data:
  [32m✓ [90m:TEST-SYSTEM is expected to be :TEST-SYSTEM[0m 
[0m
  [32m✓ [90m(:DESCRIPTION "This is a test system." :AUTHOR "Somebody" :LICENSE "GPL-3.0") is expected to be (:DESCRIPTION "This is a test system." :AUTHOR "Somebody" :LICENSE "GPL-3.0")[0m 
[0m
  Describing systems:
  [32m✓ [90m"(DEFPACKAGE #:TEST-SYSTEM
      (:USE :COMMON-LISP)
      (:EXPORT))" is expected to be "(DEFPACKAGE #:TEST-SYSTEM
      (:USE :COMMON-LISP)
      (:EXPORT))"[0m 
[0m
  [32m✓ [90m"(ASDF/PARSE-DEFSYSTEM:DEFSYSTEM #:TEST-SYSTEM
      (:DESCRIPTION \"This is a test system.\" :AUTHOR \"Somebody\" :LICENSE \"GPL-3.0\"
       :COMPONENTS NIL))" is expected to be "(ASDF/PARSE-DEFSYSTEM:DEFSYSTEM #:TEST-SYSTEM
      (:DESCRIPTION \"This is a test system.\" :AUTHOR \"Somebody\" :LICENSE \"GPL-3.0\"
       :COMPONENTS NIL))"[0m 
[0m
  System branch data:
  [32m✓ [90m:BRANCH1 is expected to be :BRANCH1[0m 
[0m
  [32m✓ [90m:BRANCH2 is expected to be :BRANCH2[0m 
[0m
  [32m✓ [90mT is expected to be T[0m 
[0m
  [32m✓ [90m(BRANCH2
     (OUT (SET-TYPE :HTML-ELEMENT :SVG)
      (IF-CONDITION (IS-IMAGE :NOT) (:THEN (GET-VALUE :SVG-CONTENT))))) is expected to be (BRANCH2
     (OUT (SET-TYPE :HTML-ELEMENT :SVG)
      (IF-CONDITION (IS-IMAGE :NOT) (:THEN (GET-VALUE :SVG-CONTENT)))))[0m 
[0m
Tests for seed.modulate:

  Encode and decode:
  [32m✓ [90m((+ 1 2) (* 3 4)) is expected to be ((+ 1 2) (* 3 4))[0m 
[0m
  [32m✓ [90m(:VL "a" :TI (("a")) :TY ("symbol") :IX 1) is expected to be (:VL "a" :TI (("a")) :TY ("symbol") :IX 1)[0m 
[0m
  Format predicate:
  [32m✓ [90mT is expected to be T[0m 
[0m
  Structural transformation:
  [32m✓ [90m(:|ix| 1 :|ty| ("symbol") :|ti| (("a")) :|vl| "a") is expected to be (:|ix| 1 :|ty| ("symbol") :|ti| (("a")) :|vl| "a")[0m 
[0m
  [32m✓ [90m(:|k| "_l" :|gh| "__ij" :|ef| "test" :|abCd| 1) is expected to be (:|k| "_l" :|gh| "__ij" :|ef| "test" :|abCd| 1)[0m 
[0m


Foundation provisioning failed. 

The browser interface cannot be built because necessary tools are missing. Correct the following problems and try again: 
  Command "npm" is not available. Please install Node.js and NPM. Note that a system-level installation of Node.js is needed; an nvm-installed Node.js system is not compatible with Seed's build process.
  Command "node" is not available. Please install the legacy Node.js package.
  Command "gulp" is not available. Please install Gulp. You should be able to do this by entering "npm install -g gulp" with root/administrator privileges.

T
CL-USER> (seed:contact-open)

[ _ ] Opened Seed contact.
Port: 8055

NIL
CL-USER> (asdf:load-system 'april)
WARNING: System definition file #P"/Users/owner/quicklisp/dists/quicklisp/software/array-operations-20180328-git/array-operations.asd" contains definition for system "array-operations-tests". Please only define "array-operations" and secondary systems with a name starting with "array-operations/" (e.g. "array-operations/test") in that file.
; compiling file "/Users/owner/Documents/src/april/aplesque/aplesque.lisp" (written 05 AUG 2018 01:15:53 AM):
; compiling (IN-PACKAGE #:APLESQUE)
; compiling (DEFUN IS-SINGLETON ...)
; compiling (DEFUN SCALE-ARRAY ...)
; compiling (DEFUN ARRAY-PROMOTE ...)
; compiling (DEFUN ARRAY-TO-LIST ...)
; compiling (DEFUN ARRAY-COMPARE ...)
; compiling (DEFUN ARRAY-DEPTH ...)
; compiling (DEFUN SWAP! ...)
; compiling (DEFUN REVERSE! ...)
; compiling (DEFUN ROTATE! ...)
; compiling (DEFUN MAKE-ROTATOR ...)
; compiling (DEFUN ROTATE-LEFT ...)
; compiling (DEFUN ROTATE-RIGHT ...)
; compiling (DEFUN MULTIDIM-SLICE ...)
; compiling (DEFUN SCAN-BACK ...)
; compiling (DEFUN MAKE-BACK-SCANNER ...)
; compiling (DEFUN APPLY-MARGINAL ...)
; compiling (DEFUN EXPAND-ARRAY ...)
; compiling (DEFUN PARTITIONED-ENCLOSE ...)
; compiling (DEFUN ENLIST ...)
; compiling (DEFUN RESHAPE-ARRAY-FITTING ...)
; compiling (DEFUN SPRFACT ...)
; compiling (DEFUN BINOMIAL ...)
; compiling (DEFUN ARRAY-INNER-PRODUCT ...)
; compiling (DEFUN INDEX-OF ...)
; compiling (DEFUN ALPHA-COMPARE ...)
; compiling (DEFUN VECTOR-GRADE ...)
; compiling (DEFUN GRADE ...)
; compiling (DEFUN ARRAY-GRADE ...)
; compiling (DEFUN FIND-ARRAY ...)
; compiling (DEFUN RUN-DIM ...)
; compiling (DEFUN AREF-ELIDING ...)
; compiling (DEFUN MIX-ARRAYS ...)
; compiling (DEFUN RAVEL ...)
; compiling (DEFUN RE-ENCLOSE ...)
; compiling (DEFUN INVERT-MATRIX ...)

; /Users/owner/.cache/common-lisp/sbcl-1.4.2-macosx-x64/Users/owner/Documents/src/april/aplesque/aplesque-tmpGHU3ALSV.fasl written
; compilation finished in 0:00:00.500
; compiling file "/Users/owner/Documents/src/april/package.lisp" (written 09 MAR 2018 09:34:08 AM):
; compiling (DEFPACKAGE #:APRIL ...)

; /Users/owner/.cache/common-lisp/sbcl-1.4.2-macosx-x64/Users/owner/Documents/src/april/package-tmpAAURSO1.fasl written
; compilation finished in 0:00:00.008
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 01:16:32 AM):
; compiling (IN-PACKAGE #:APRIL)
; compiling (DEFUN ARRAY-TO-NESTED-VECTOR ...)
; compiling (DEFUN IS-SINGLETON ...)
; compiling (DEFUN APPLY-SCALAR-MONADIC ...)
; compiling (DEFUN APPLY-SCALAR-DYADIC ...)
; compiling (DEFMACRO MEDIATE-OPERATION ...)
; compiling (DEFUN NUMERIC-STRING-P ...)
; compiling (DEFUN PARSE-APL-NUMBER-STRING ...)
; compiling (DEFUN FORMAT-VALUE ...)
; compiling (DEFUN FORMAT-ARRAY ...)
; compiling (DEFUN FORMAT-FUNCTION ...)
; compiling (DEFUN ENCLOSE ...)
; compiling (DEFUN DISCLOSE ...)
; compiling (DEFUN PROCESS-OUTPUT-VECTOR ...)
; compiling (DEFUN ASSEMBLE-VALUE ...)
; compiling (DEFUN ASSEMBLE-OPERATION ...)
; compiling (DEFUN LEFT-INVERT-MATRIX ...)
; compiling (DEFUN COMPOSE-STAGE ...)
; compiling (DEFUN OVER-OPERATOR-TEMPLATE ...)
; compiling (VEX-SPEC APRIL ...)

; /Users/owner/.cache/common-lisp/sbcl-1.4.2-macosx-x64/Users/owner/Documents/src/april/april-tmp5GEXGEG5.fasl written
; compilation finished in 0:00:00.327
T
CL-USER> 
APRIL> (negative 5)
; in: NEGATIVE 5
;     (APRIL::NEGATIVE 5)
; 
; caught STYLE-WARNING:
;   undefined function: NEGATIVE
; 
; compilation unit finished
;   Undefined function:
;     NEGATIVE
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNDEFINED-FUNCTION NEGATIVE {100656DDF3}>.
APRIL> (neg 5)
; in: NEG 5
;     (APRIL::NEG 5)
; 
; caught STYLE-WARNING:
;   undefined function: NEG
; 
; compilation unit finished
;   Undefined function:
;     NEG
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNDEFINED-FUNCTION NEG {10067B87D3}>.
APRIL> (vex::parse "1+1" (vex::=vex-string *april-idiom* nil))
((1 (:FN #\+) 1))
T
T
APRIL> (april (set (:space *workspace1*)) "e←{3+⍵}")
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {10029C0F9B}>
APRIL> (vex::parse "w 1" (vex::=vex-string *april-idiom* *workspace1*))
((1 #:G1019))
T
T
APRIL> (april (set (:space *workspace1*) (:compile-only)) "e 1"))
; Evaluation aborted on #<SB-INT:SIMPLE-READER-ERROR "unmatched close parenthesis" {10072B7B93}>.
APRIL> (april (set (:space *workspace1*) (:compile-only)) "e 1")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL))
  (DISCLOSE (FUNCALL #:G1018 (VECTOR 1))))
APRIL> (april (set (:space *workspace1*)) "g←{5+⍵}")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL) (#:G1020 :UNDEFINED))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020 :UNDEFINED))
;       (APRIL::DISCLOSE (SETQ #:G1020 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {10029C11AB}>
APRIL> (april (set (:space *workspace1*) (:compile-only)) "e g 1")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL)
      (#:G1020
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 5)))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
  (DISCLOSE (FUNCALL #:G1018 (FUNCALL #:G1020 (VECTOR 1)))))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "e g 1")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1018 (FUNCALL #:G1020 (VECTOR 1)))))
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
9
APRIL> (april (set (:space *workspace1*) (:compile-only)) "e g 1")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL)
      (#:G1020
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 5)))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
  (DISCLOSE (FUNCALL #:G1018 (FUNCALL #:G1020 (VECTOR 1)))))
APRIL> *workspace1*
#<HASH-TABLE :TEST EQ :COUNT 3 {1006561B53}>
APRIL> (april (set (:space *workspace1*)) "e←{⍺+3+⍵}")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (SETQ #:G1018 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {10029C20FB}>
APRIL> (april (set (:space *workspace1*) (:compile-only)) "5 e g 1")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL)
      (#:G1020
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 5)))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
  (DISCLOSE (FUNCALL #:G1018 (FUNCALL #:G1020 (VECTOR 1)) (VECTOR 5))))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "5 e g 1")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1018 (FUNCALL #:G1020 (VECTOR 1)) (VECTOR 5))))
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
14
APRIL> (april (set (:space *workspace1*) (:compile-only)) "g 5 e 1")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL)
      (#:G1020
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 5)))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
  (DISCLOSE (FUNCALL #:G1020 (FUNCALL #:G1018 (VECTOR 1) (VECTOR 5)))))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "g 5 e 1")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1020 (FUNCALL #:G1018 (VECTOR 1) (VECTOR 5)))))
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
14
127.0.0.1 - [2018-08-05 10:51:19] "GET /portal.demo1/index.html HTTP/1.1" 200 428 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:61.0) Gecko/20100101 Firefox/61.0"
127.0.0.1 - [2018-08-05 10:51:19] "GET /portal.demo1/portal.css HTTP/1.1" 200 188474 "http://localhost:8055/portal.demo1/index.html" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:61.0) Gecko/20100101 Firefox/61.0"
127.0.0.1 - [2018-08-05 10:51:19] "GET /portal.demo1/main.css HTTP/1.1" 200 145537 "http://localhost:8055/portal.demo1/index.html" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:61.0) Gecko/20100101 Firefox/61.0"
127.0.0.1 - [2018-08-05 10:51:19] "GET /portal.demo1/main.js HTTP/1.1" 200 6030116 "http://localhost:8055/portal.demo1/index.html" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:61.0) Gecko/20100101 Firefox/61.0"
127.0.0.1 - [2018-08-05 10:51:19] "GET /portal.demo1/portal.js HTTP/1.1" 200 370367 "http://localhost:8055/portal.demo1/index.html" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:61.0) Gecko/20100101 Firefox/61.0"
127.0.0.1 - [2018-08-05 10:51:20] "GET /favicon.ico HTTP/1.1" 404 302 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:61.0) Gecko/20100101 Firefox/61.0"
127.0.0.1 - [2018-08-05 10:51:20] "GET /favicon.ico HTTP/1.1" 404 302 "-" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:61.0) Gecko/20100101 Firefox/61.0"
127.0.0.1 - [2018-08-05 10:51:21] "POST /portal HTTP/1.1" 200 1422 "http://localhost:8055/portal.demo1/index.html" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:61.0) Gecko/20100101 Firefox/61.0"
127.0.0.1 - [2018-08-05 10:51:24] "POST /portal HTTP/1.1" 200 10547 "http://localhost:8055/portal.demo1/index.html" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:61.0) Gecko/20100101 Firefox/61.0"
[2018-08-05 10:51:26 [WARNING]] Warning while processing connection: The variable SEED.APP-MODEL.GRAPH.GARDEN-PATH::INPUT is defined but never used.
[2018-08-05 10:51:26 [WARNING]] Warning while processing connection: The variable SEED.APP-MODEL.GRAPH.GARDEN-PATH::INPUT is defined but never used.
[2018-08-05 10:51:26 [WARNING]] Warning while processing connection: The variable SEED.APP-MODEL.GRAPH.GARDEN-PATH::CONTENT is defined but never used.
[2018-08-05 10:51:26 [WARNING]] Warning while processing connection: Lisp compilation had style-warnings
                                                                     while
                                                                     compiling #<CL-SOURCE-FILE "demo-sheet" "graph">
[2018-08-05 10:51:26 [WARNING]] Warning while processing connection: redefining DEMO-SHEET::MAIN-GRAPH in DEFUN
[2018-08-05 10:51:26 [WARNING]] Warning while processing connection: undefined variable: SEED.APP-MODEL.SHEET.BASE:COL
[2018-08-05 10:51:26 [WARNING]] Warning while processing connection: undefined variable: SEED.APP-MODEL.GRAPH.GARDEN-PATH::NODES
[2018-08-05 10:51:26 [WARNING]] Warning while processing connection: undefined variable: SEED.APP-MODEL.GRAPH.GARDEN-PATH::NODES
[2018-08-05 10:51:26 [WARNING]] Warning while processing connection: undefined function: DEMO-SHEET::PERMISSIONS
[2018-08-05 10:51:26 [WARNING]] Warning while processing connection: undefined variable: SEED.APP-MODEL.SHEET.BASE:ROW
[2018-08-05 10:51:26 [WARNING]] Warning while processing connection: undefined function: :WEIGHT
127.0.0.1 - [2018-08-05 10:51:26] "POST /portal HTTP/1.1" 200 38839 "http://localhost:8055/portal.demo1/index.html" "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:61.0) Gecko/20100101 Firefox/61.0"
APRIL> (april (set (:space *workspace1*)) "g←{⍺+7+⍵}")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (SETQ #:G1020 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {1001EA311B}>
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "g 5 e 1")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1020 (FUNCALL #:G1018 (VECTOR 1) (VECTOR 5)))))
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: NIL>.
APRIL> (april (set (:space *workspace1*) (:compile-only)) "g 5 e 1")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL)
      (#:G1020
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 7)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
  (DISCLOSE (FUNCALL #:G1020 (FUNCALL #:G1018 (VECTOR 1) (VECTOR 5)))))
APRIL> (april (set (:space *workspace1*) (:compile-only)) "2 g 5 e 1")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL)
      (#:G1020
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 7)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
  (DISCLOSE
   (FUNCALL #:G1020 (FUNCALL #:G1018 (VECTOR 1) (VECTOR 5)) (VECTOR 2))))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "2 g 5 e 1")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE
;        (FUNCALL #:G1020 (FUNCALL #:G1018 (VECTOR 1) (VECTOR 5)) (VECTOR 2))))
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
18
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "addWalls←{⍺,(⍵[;;1+⍳(3⌷⍴⍵)-2]),⍺}")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110 :UNDEFINED))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1110 :UNDEFINED))
;       (APRIL::DISCLOSE (SETQ #:G1110 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {1001EA423B}>
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "addFloor←{⍵[;⍳(2⌷⍴⍵)-1;],[2]⍺}")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111 :UNDEFINED))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1110
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1111 :UNDEFINED))
;       (APRIL::DISCLOSE (SETQ #:G1111 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1110 is defined but never used.
; 
; compilation unit finished
;   caught 4 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {1002471F6B}>
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "field←16 16 16⍴0")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112 :UNDEFINED))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1110
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1111
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1112 :UNDEFINED))
;       (APRIL::DISCLOSE
;        (SETQ #:G1112
;                (IF #
;                    #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1110 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1111 is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
#3A(((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "field")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16)))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1110
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1111
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1112
;            (IF (AND)
;                (FUNCALL #'# # #))))
;       (APRIL::DISCLOSE #:G1112))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1110 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1111 is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
#3A(((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "2 addFloor field")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16)))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1110
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1111
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1112
;            (IF (AND)
;                (FUNCALL #'# # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1111 #:G1112 (VECTOR 2))))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1110 is defined but never used.
; 
; compilation unit finished
;   caught 4 STYLE-WARNING conditions
#3A(((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2))
    ((0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
     (2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "1 addWalls 2 addFloor field")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16)))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1110
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1111
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1112
;            (IF (AND)
;                (FUNCALL #'# # #))))
;       (APRIL::DISCLOSE
;        (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
#3A(((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1)))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "bla←1 addWalls 2 addFloor field")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16))))
;       (#:G1113 :UNDEFINED))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1110
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1111
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1112
;            (IF (AND)
;                (FUNCALL #'# # #)))
;           (#:G1113 :UNDEFINED))
;       (APRIL::DISCLOSE (SETQ #:G1113 (FUNCALL #:G1110 # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
#3A(((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1)))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "bla")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16))))
;       (#:G1113
;        (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1110
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1111
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1112
;            (IF (AND)
;                (FUNCALL #'# # #)))
;           (#:G1113 (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 #) (VECTOR 1))))
;       (APRIL::DISCLOSE #:G1113))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1110 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1111 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1112 is defined but never used.
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16))))
;       (#:G1113
;        (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
;     (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1110)
; 
; caught WARNING:
;   undefined variable: #:G1110

;     (FUNCALL #:G1111 #:G1112 (VECTOR 2))
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1111)
; 
; caught WARNING:
;   undefined variable: #:G1111

; ==>
;   (SB-C::%FUNCALL (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1111) #:G1112
;                   (VECTOR 2))
; 
; caught WARNING:
;   undefined variable: #:G1112
; 
; compilation unit finished
;   Undefined variables:
;     #:G1110 #:G1111 #:G1112
;   caught 3 WARNING conditions
;   caught 6 STYLE-WARNING conditions
; Evaluation aborted on #<UNBOUND-VARIABLE G1110 {1009431393}>.
APRIL> (april (set (:space *workspace1*) (:compile-only)) "bla")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL)
      (#:G1020
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 7)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1110
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                       (IF (AND
                            (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                            (VECTORP ALPHA) (VECTORP OMEGA))
                           (IF (AND AXES
                                    (< 0
                                       (- (AREF (FIRST AXES) 0)
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM))))
                               (ERROR
                                (CONCATENATE 'STRING
                                             "Specified axis is greater than 1, vectors"
                                             " have only one axis along which to catenate."))
                               (IF (AND AXES
                                        (> 0
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                                   (ERROR
                                    (FORMAT NIL
                                            "Specified axis is less than ~a."
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                   (CONCATENATE 'VECTOR ALPHA OMEGA)))
                           (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                               (LET* ((AXIS
                                       (IF AXES
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))
                                           (1-
                                            (MAX (ARRAY-RANK ALPHA)
                                                 (ARRAY-RANK OMEGA)))))
                                      (SCALE-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           ALPHA
                                           (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                      (SCALE-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           OMEGA
                                           (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                 (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                               (LET* ((AXIS
                                       (CEILING
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                      (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                      (P-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE ALPHA))))
                                      (P-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE OMEGA)))))
                                 (STACK AXIS
                                        (IF (IS-SINGLETON ALPHA)
                                            (SCALE-ARRAY ALPHA P-OMEGA)
                                            P-ALPHA)
                                        (IF (IS-SINGLETON OMEGA)
                                            (SCALE-ARRAY OMEGA P-ALPHA)
                                            P-OMEGA))))))
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                            (IF (AND
                                 (OR (NOT AXES)
                                     (INTEGERP (AREF (FIRST AXES) 0)))
                                 (VECTORP ALPHA) (VECTORP OMEGA))
                                (IF (AND AXES
                                         (< 0
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                                    (ERROR
                                     (CONCATENATE 'STRING
                                                  "Specified axis is greater than 1, vectors"
                                                  " have only one axis along which to catenate."))
                                    (IF (AND AXES
                                             (> 0
                                                (- (AREF (FIRST AXES) 0)
                                                   (OF-STATE *APRIL-IDIOM*
                                                             :COUNT-FROM))))
                                        (ERROR
                                         (FORMAT NIL
                                                 "Specified axis is less than ~a."
                                                 (OF-STATE *APRIL-IDIOM*
                                                           :COUNT-FROM)))
                                        (CONCATENATE 'VECTOR ALPHA OMEGA)))
                                (IF (OR (NOT AXES)
                                        (INTEGERP (AREF (FIRST AXES) 0)))
                                    (LET* ((AXIS
                                            (IF AXES
                                                (- (AREF (FIRST AXES) 0)
                                                   (OF-STATE *APRIL-IDIOM*
                                                             :COUNT-FROM))
                                                (1-
                                                 (MAX (ARRAY-RANK ALPHA)
                                                      (ARRAY-RANK OMEGA)))))
                                           (SCALE-ALPHA
                                            (IF (NOT (IS-SINGLETON ALPHA))
                                                ALPHA
                                                (SCALE-ARRAY ALPHA OMEGA
                                                             AXIS)))
                                           (SCALE-OMEGA
                                            (IF (NOT (IS-SINGLETON OMEGA))
                                                OMEGA
                                                (SCALE-ARRAY OMEGA ALPHA
                                                             AXIS))))
                                      (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                    (LET* ((AXIS
                                            (CEILING
                                             (- (AREF (FIRST AXES) 0)
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                                           (PERMUTE-DIMS
                                            (IOTA (1+ (RANK ALPHA))))
                                           (P-ALPHA
                                            (IF (NOT (IS-SINGLETON ALPHA))
                                                (PERMUTE
                                                 (ROTATE-RIGHT AXIS
                                                               PERMUTE-DIMS)
                                                 (ARRAY-PROMOTE ALPHA))))
                                           (P-OMEGA
                                            (IF (NOT (IS-SINGLETON OMEGA))
                                                (PERMUTE
                                                 (ROTATE-RIGHT AXIS
                                                               PERMUTE-DIMS)
                                                 (ARRAY-PROMOTE OMEGA)))))
                                      (STACK AXIS
                                             (IF (IS-SINGLETON ALPHA)
                                                 (SCALE-ARRAY ALPHA P-OMEGA)
                                                 P-ALPHA)
                                             (IF (IS-SINGLETON OMEGA)
                                                 (SCALE-ARRAY OMEGA P-ALPHA)
                                                 P-OMEGA))))))
                        ⍺
                        (PROGN
                         (AREF-ELIDING ⍵
                                       (MAPCAR
                                        (LAMBDA (VECTOR)
                                          (IF VECTOR
                                              (IF (= 1 (LENGTH VECTOR))
                                                  (- (AREF VECTOR 0)
                                                     (OF-STATE *APRIL-IDIOM*
                                                               :COUNT-FROM))
                                                  (MAPCAR
                                                   (LAMBDA (ELEM)
                                                     (- ELEM
                                                        (OF-STATE *APRIL-IDIOM*
                                                                  :COUNT-FROM)))
                                                   (ARRAY-TO-LIST VECTOR)))))
                                        (LIST NIL NIL
                                              (FUNCALL #'APPLY-SCALAR-DYADIC
                                                       #'+
                                                       (IF (AND)
                                                           (FUNCALL
                                                            #'(LAMBDA (OMEGA)
                                                                (MAKE-ARRAY
                                                                 (LIST OMEGA)
                                                                 :INITIAL-CONTENTS
                                                                 (IOTA OMEGA
                                                                       :START
                                                                       (OF-STATE
                                                                        *APRIL-IDIOM*
                                                                        :COUNT-FROM))))
                                                            (IF (ARRAYP
                                                                 (FUNCALL
                                                                  #'APPLY-SCALAR-DYADIC
                                                                  #'(LAMBDA
                                                                        (
                                                                         VEX::OMEGA
                                                                         VEX::ALPHA)
                                                                      (FUNCALL
                                                                       #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                                  (VECTOR 2)
                                                                  (PROGN
                                                                   (IF (AND)
                                                                       (FUNCALL
                                                                        #'(LAMBDA
                                                                              (
                                                                               OMEGA
                                                                               ALPHA
                                                                               &OPTIONAL
                                                                               AXES)
                                                                            (IF AXES
                                                                                (LET ((ELIDED-COORDS
                                                                                       (LOOP FOR I FROM 0 TO (1-
                                                                                                              (RANK
                                                                                                               OMEGA))
                                                                                             COLLECT NIL)))
                                                                                  (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                             (LENGTH
                                                                                                              (FIRST
                                                                                                               AXES)))
                                                                                        DO (SETF (NTH
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    (FIRST
                                                                                                     AXES)
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))
                                                                                                  ELIDED-COORDS)
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     ALPHA
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))))
                                                                                  (AREF-ELIDING
                                                                                   OMEGA
                                                                                   ELIDED-COORDS))
                                                                                (LET* ((COORDS
                                                                                        (MAPCAR
                                                                                         (LAMBDA
                                                                                             (
                                                                                              COORD)
                                                                                           (-
                                                                                            COORD
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             `:COUNT-FROM)))
                                                                                         (ARRAY-TO-LIST
                                                                                          ALPHA)))
                                                                                       (FOUND
                                                                                        (APPLY
                                                                                         #'AREF
                                                                                         (CONS
                                                                                          OMEGA
                                                                                          COORDS))))
                                                                                  (IF (NOT
                                                                                       (ARRAYP
                                                                                        FOUND))
                                                                                      (VECTOR
                                                                                       FOUND)
                                                                                      FOUND))))
                                                                        (IF (AND)
                                                                            (FUNCALL
                                                                             #'(LAMBDA
                                                                                   (
                                                                                    OMEGA)
                                                                                 (LET ((OMEGA-DIMS
                                                                                        (DIMS
                                                                                         OMEGA)))
                                                                                   (MAKE-ARRAY
                                                                                    (LIST
                                                                                     (LENGTH
                                                                                      OMEGA-DIMS))
                                                                                    :INITIAL-CONTENTS
                                                                                    OMEGA-DIMS)))
                                                                             ⍵))
                                                                        (VECTOR
                                                                         3)
                                                                        (LIST))))))
                                                                (DISCLOSE
                                                                 (FUNCALL
                                                                  #'APPLY-SCALAR-DYADIC
                                                                  #'(LAMBDA
                                                                        (
                                                                         VEX::OMEGA
                                                                         VEX::ALPHA)
                                                                      (FUNCALL
                                                                       #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                                  (VECTOR 2)
                                                                  (PROGN
                                                                   (IF (AND)
                                                                       (FUNCALL
                                                                        #'(LAMBDA
                                                                              (
                                                                               OMEGA
                                                                               ALPHA
                                                                               &OPTIONAL
                                                                               AXES)
                                                                            (IF AXES
                                                                                (LET ((ELIDED-COORDS
                                                                                       (LOOP FOR I FROM 0 TO (1-
                                                                                                              (RANK
                                                                                                               OMEGA))
                                                                                             COLLECT NIL)))
                                                                                  (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                             (LENGTH
                                                                                                              (FIRST
                                                                                                               AXES)))
                                                                                        DO (SETF (NTH
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    (FIRST
                                                                                                     AXES)
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))
                                                                                                  ELIDED-COORDS)
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     ALPHA
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))))
                                                                                  (AREF-ELIDING
                                                                                   OMEGA
                                                                                   ELIDED-COORDS))
                                                                                (LET* ((COORDS
                                                                                        (MAPCAR
                                                                                         (LAMBDA
                                                                                             (
                                                                                              COORD)
                                                                                           (-
                                                                                            COORD
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             `:COUNT-FROM)))
                                                                                         (ARRAY-TO-LIST
                                                                                          ALPHA)))
                                                                                       (FOUND
                                                                                        (APPLY
                                                                                         #'AREF
                                                                                         (CONS
                                                                                          OMEGA
                                                                                          COORDS))))
                                                                                  (IF (NOT
                                                                                       (ARRAYP
                                                                                        FOUND))
                                                                                      (VECTOR
                                                                                       FOUND)
                                                                                      FOUND))))
                                                                        (IF (AND)
                                                                            (FUNCALL
                                                                             #'(LAMBDA
                                                                                   (
                                                                                    OMEGA)
                                                                                 (LET ((OMEGA-DIMS
                                                                                        (DIMS
                                                                                         OMEGA)))
                                                                                   (MAKE-ARRAY
                                                                                    (LIST
                                                                                     (LENGTH
                                                                                      OMEGA-DIMS))
                                                                                    :INITIAL-CONTENTS
                                                                                    OMEGA-DIMS)))
                                                                             ⍵))
                                                                        (VECTOR
                                                                         3)
                                                                        (LIST))))))
                                                                (FUNCALL
                                                                 #'APPLY-SCALAR-DYADIC
                                                                 #'(LAMBDA
                                                                       (
                                                                        VEX::OMEGA
                                                                        VEX::ALPHA)
                                                                     (FUNCALL
                                                                      #'-
                                                                      VEX::ALPHA
                                                                      VEX::OMEGA))
                                                                 (VECTOR 2)
                                                                 (PROGN
                                                                  (IF (AND)
                                                                      (FUNCALL
                                                                       #'(LAMBDA
                                                                             (
                                                                              OMEGA
                                                                              ALPHA
                                                                              &OPTIONAL
                                                                              AXES)
                                                                           (IF AXES
                                                                               (LET ((ELIDED-COORDS
                                                                                      (LOOP FOR I FROM 0 TO (1-
                                                                                                             (RANK
                                                                                                              OMEGA))
                                                                                            COLLECT NIL)))
                                                                                 (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                            (LENGTH
                                                                                                             (FIRST
                                                                                                              AXES)))
                                                                                       DO (SETF (NTH
                                                                                                 (-
                                                                                                  (AREF
                                                                                                   (FIRST
                                                                                                    AXES)
                                                                                                   INDEX)
                                                                                                  (OF-STATE
                                                                                                   *APRIL-IDIOM*
                                                                                                   :COUNT-FROM))
                                                                                                 ELIDED-COORDS)
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    ALPHA
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))))
                                                                                 (AREF-ELIDING
                                                                                  OMEGA
                                                                                  ELIDED-COORDS))
                                                                               (LET* ((COORDS
                                                                                       (MAPCAR
                                                                                        (LAMBDA
                                                                                            (
                                                                                             COORD)
                                                                                          (-
                                                                                           COORD
                                                                                           (OF-STATE
                                                                                            *APRIL-IDIOM*
                                                                                            `:COUNT-FROM)))
                                                                                        (ARRAY-TO-LIST
                                                                                         ALPHA)))
                                                                                      (FOUND
                                                                                       (APPLY
                                                                                        #'AREF
                                                                                        (CONS
                                                                                         OMEGA
                                                                                         COORDS))))
                                                                                 (IF (NOT
                                                                                      (ARRAYP
                                                                                       FOUND))
                                                                                     (VECTOR
                                                                                      FOUND)
                                                                                     FOUND))))
                                                                       (IF (AND)
                                                                           (FUNCALL
                                                                            #'(LAMBDA
                                                                                  (
                                                                                   OMEGA)
                                                                                (LET ((OMEGA-DIMS
                                                                                       (DIMS
                                                                                        OMEGA)))
                                                                                  (MAKE-ARRAY
                                                                                   (LIST
                                                                                    (LENGTH
                                                                                     OMEGA-DIMS))
                                                                                   :INITIAL-CONTENTS
                                                                                   OMEGA-DIMS)))
                                                                            ⍵))
                                                                       (VECTOR
                                                                        3)
                                                                       (LIST))))))))
                                                       (VECTOR 1))))))
                        (LIST)))
                   ⍺ (LIST))))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1111
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                       (IF (AND
                            (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                            (VECTORP ALPHA) (VECTORP OMEGA))
                           (IF (AND AXES
                                    (< 0
                                       (- (AREF (FIRST AXES) 0)
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM))))
                               (ERROR
                                (CONCATENATE 'STRING
                                             "Specified axis is greater than 1, vectors"
                                             " have only one axis along which to catenate."))
                               (IF (AND AXES
                                        (> 0
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                                   (ERROR
                                    (FORMAT NIL
                                            "Specified axis is less than ~a."
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                   (CONCATENATE 'VECTOR ALPHA OMEGA)))
                           (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                               (LET* ((AXIS
                                       (IF AXES
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))
                                           (1-
                                            (MAX (ARRAY-RANK ALPHA)
                                                 (ARRAY-RANK OMEGA)))))
                                      (SCALE-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           ALPHA
                                           (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                      (SCALE-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           OMEGA
                                           (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                 (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                               (LET* ((AXIS
                                       (CEILING
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                      (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                      (P-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE ALPHA))))
                                      (P-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE OMEGA)))))
                                 (STACK AXIS
                                        (IF (IS-SINGLETON ALPHA)
                                            (SCALE-ARRAY ALPHA P-OMEGA)
                                            P-ALPHA)
                                        (IF (IS-SINGLETON OMEGA)
                                            (SCALE-ARRAY OMEGA P-ALPHA)
                                            P-OMEGA))))))
                   ⍺
                   (AREF-ELIDING ⍵
                                 (MAPCAR
                                  (LAMBDA (VECTOR)
                                    (IF VECTOR
                                        (IF (= 1 (LENGTH VECTOR))
                                            (- (AREF VECTOR 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))
                                            (MAPCAR
                                             (LAMBDA (ELEM)
                                               (- ELEM
                                                  (OF-STATE *APRIL-IDIOM*
                                                            :COUNT-FROM)))
                                             (ARRAY-TO-LIST VECTOR)))))
                                  (LIST NIL
                                        (IF (AND)
                                            (FUNCALL
                                             #'(LAMBDA (OMEGA)
                                                 (MAKE-ARRAY (LIST OMEGA)
                                                             :INITIAL-CONTENTS
                                                             (IOTA OMEGA :START
                                                                   (OF-STATE
                                                                    *APRIL-IDIOM*
                                                                    :COUNT-FROM))))
                                             (IF (ARRAYP
                                                  (FUNCALL
                                                   #'APPLY-SCALAR-DYADIC
                                                   #'(LAMBDA
                                                         (VEX::OMEGA
                                                          VEX::ALPHA)
                                                       (FUNCALL #'- VEX::ALPHA
                                                                VEX::OMEGA))
                                                   (VECTOR 1)
                                                   (PROGN
                                                    (IF (AND)
                                                        (FUNCALL
                                                         #'(LAMBDA
                                                               (OMEGA ALPHA
                                                                &OPTIONAL AXES)
                                                             (IF AXES
                                                                 (LET ((ELIDED-COORDS
                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                               (RANK
                                                                                                OMEGA))
                                                                              COLLECT NIL)))
                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                              (LENGTH
                                                                                               (FIRST
                                                                                                AXES)))
                                                                         DO (SETF (NTH
                                                                                   (-
                                                                                    (AREF
                                                                                     (FIRST
                                                                                      AXES)
                                                                                     INDEX)
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     :COUNT-FROM))
                                                                                   ELIDED-COORDS)
                                                                                    (-
                                                                                     (AREF
                                                                                      ALPHA
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))))
                                                                   (AREF-ELIDING
                                                                    OMEGA
                                                                    ELIDED-COORDS))
                                                                 (LET* ((COORDS
                                                                         (MAPCAR
                                                                          (LAMBDA
                                                                              (
                                                                               COORD)
                                                                            (-
                                                                             COORD
                                                                             (OF-STATE
                                                                              *APRIL-IDIOM*
                                                                              `:COUNT-FROM)))
                                                                          (ARRAY-TO-LIST
                                                                           ALPHA)))
                                                                        (FOUND
                                                                         (APPLY
                                                                          #'AREF
                                                                          (CONS
                                                                           OMEGA
                                                                           COORDS))))
                                                                   (IF (NOT
                                                                        (ARRAYP
                                                                         FOUND))
                                                                       (VECTOR
                                                                        FOUND)
                                                                       FOUND))))
                                                         (IF (AND)
                                                             (FUNCALL
                                                              #'(LAMBDA (OMEGA)
                                                                  (LET ((OMEGA-DIMS
                                                                         (DIMS
                                                                          OMEGA)))
                                                                    (MAKE-ARRAY
                                                                     (LIST
                                                                      (LENGTH
                                                                       OMEGA-DIMS))
                                                                     :INITIAL-CONTENTS
                                                                     OMEGA-DIMS)))
                                                              ⍵))
                                                         (VECTOR 2) (LIST))))))
                                                 (DISCLOSE
                                                  (FUNCALL
                                                   #'APPLY-SCALAR-DYADIC
                                                   #'(LAMBDA
                                                         (VEX::OMEGA
                                                          VEX::ALPHA)
                                                       (FUNCALL #'- VEX::ALPHA
                                                                VEX::OMEGA))
                                                   (VECTOR 1)
                                                   (PROGN
                                                    (IF (AND)
                                                        (FUNCALL
                                                         #'(LAMBDA
                                                               (OMEGA ALPHA
                                                                &OPTIONAL AXES)
                                                             (IF AXES
                                                                 (LET ((ELIDED-COORDS
                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                               (RANK
                                                                                                OMEGA))
                                                                              COLLECT NIL)))
                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                              (LENGTH
                                                                                               (FIRST
                                                                                                AXES)))
                                                                         DO (SETF (NTH
                                                                                   (-
                                                                                    (AREF
                                                                                     (FIRST
                                                                                      AXES)
                                                                                     INDEX)
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     :COUNT-FROM))
                                                                                   ELIDED-COORDS)
                                                                                    (-
                                                                                     (AREF
                                                                                      ALPHA
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))))
                                                                   (AREF-ELIDING
                                                                    OMEGA
                                                                    ELIDED-COORDS))
                                                                 (LET* ((COORDS
                                                                         (MAPCAR
                                                                          (LAMBDA
                                                                              (
                                                                               COORD)
                                                                            (-
                                                                             COORD
                                                                             (OF-STATE
                                                                              *APRIL-IDIOM*
                                                                              `:COUNT-FROM)))
                                                                          (ARRAY-TO-LIST
                                                                           ALPHA)))
                                                                        (FOUND
                                                                         (APPLY
                                                                          #'AREF
                                                                          (CONS
                                                                           OMEGA
                                                                           COORDS))))
                                                                   (IF (NOT
                                                                        (ARRAYP
                                                                         FOUND))
                                                                       (VECTOR
                                                                        FOUND)
                                                                       FOUND))))
                                                         (IF (AND)
                                                             (FUNCALL
                                                              #'(LAMBDA (OMEGA)
                                                                  (LET ((OMEGA-DIMS
                                                                         (DIMS
                                                                          OMEGA)))
                                                                    (MAKE-ARRAY
                                                                     (LIST
                                                                      (LENGTH
                                                                       OMEGA-DIMS))
                                                                     :INITIAL-CONTENTS
                                                                     OMEGA-DIMS)))
                                                              ⍵))
                                                         (VECTOR 2) (LIST))))))
                                                 (FUNCALL #'APPLY-SCALAR-DYADIC
                                                          #'(LAMBDA
                                                                (VEX::OMEGA
                                                                 VEX::ALPHA)
                                                              (FUNCALL #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                          (VECTOR 1)
                                                          (PROGN
                                                           (IF (AND)
                                                               (FUNCALL
                                                                #'(LAMBDA
                                                                      (OMEGA
                                                                       ALPHA
                                                                       &OPTIONAL
                                                                       AXES)
                                                                    (IF AXES
                                                                        (LET ((ELIDED-COORDS
                                                                               (LOOP FOR I FROM 0 TO (1-
                                                                                                      (RANK
                                                                                                       OMEGA))
                                                                                     COLLECT NIL)))
                                                                          (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                     (LENGTH
                                                                                                      (FIRST
                                                                                                       AXES)))
                                                                                DO (SETF (NTH
                                                                                          (-
                                                                                           (AREF
                                                                                            (FIRST
                                                                                             AXES)
                                                                                            INDEX)
                                                                                           (OF-STATE
                                                                                            *APRIL-IDIOM*
                                                                                            :COUNT-FROM))
                                                                                          ELIDED-COORDS)
                                                                                           (-
                                                                                            (AREF
                                                                                             ALPHA
                                                                                             INDEX)
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             :COUNT-FROM))))
                                                                          (AREF-ELIDING
                                                                           OMEGA
                                                                           ELIDED-COORDS))
                                                                        (LET* ((COORDS
                                                                                (MAPCAR
                                                                                 (LAMBDA
                                                                                     (
                                                                                      COORD)
                                                                                   (-
                                                                                    COORD
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     `:COUNT-FROM)))
                                                                                 (ARRAY-TO-LIST
                                                                                  ALPHA)))
                                                                               (FOUND
                                                                                (APPLY
                                                                                 #'AREF
                                                                                 (CONS
                                                                                  OMEGA
                                                                                  COORDS))))
                                                                          (IF (NOT
                                                                               (ARRAYP
                                                                                FOUND))
                                                                              (VECTOR
                                                                               FOUND)
                                                                              FOUND))))
                                                                (IF (AND)
                                                                    (FUNCALL
                                                                     #'(LAMBDA
                                                                           (
                                                                            OMEGA)
                                                                         (LET ((OMEGA-DIMS
                                                                                (DIMS
                                                                                 OMEGA)))
                                                                           (MAKE-ARRAY
                                                                            (LIST
                                                                             (LENGTH
                                                                              OMEGA-DIMS))
                                                                            :INITIAL-CONTENTS
                                                                            OMEGA-DIMS)))
                                                                     ⍵))
                                                                (VECTOR 2)
                                                                (LIST)))))))))))
                   (LIST (VECTOR 2)))))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1112
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (VECTOR 0) (VECTOR 16 16 16))))
      (#:G1113
       (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
  (DISCLOSE #:G1113))
APRIL> (april (set (:space *workspace1*) (:compile-only)) "bla")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL)
      (#:G1020
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 7)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1110
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                       (IF (AND
                            (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                            (VECTORP ALPHA) (VECTORP OMEGA))
                           (IF (AND AXES
                                    (< 0
                                       (- (AREF (FIRST AXES) 0)
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM))))
                               (ERROR
                                (CONCATENATE 'STRING
                                             "Specified axis is greater than 1, vectors"
                                             " have only one axis along which to catenate."))
                               (IF (AND AXES
                                        (> 0
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                                   (ERROR
                                    (FORMAT NIL
                                            "Specified axis is less than ~a."
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                   (CONCATENATE 'VECTOR ALPHA OMEGA)))
                           (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                               (LET* ((AXIS
                                       (IF AXES
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))
                                           (1-
                                            (MAX (ARRAY-RANK ALPHA)
                                                 (ARRAY-RANK OMEGA)))))
                                      (SCALE-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           ALPHA
                                           (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                      (SCALE-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           OMEGA
                                           (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                 (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                               (LET* ((AXIS
                                       (CEILING
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                      (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                      (P-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE ALPHA))))
                                      (P-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE OMEGA)))))
                                 (STACK AXIS
                                        (IF (IS-SINGLETON ALPHA)
                                            (SCALE-ARRAY ALPHA P-OMEGA)
                                            P-ALPHA)
                                        (IF (IS-SINGLETON OMEGA)
                                            (SCALE-ARRAY OMEGA P-ALPHA)
                                            P-OMEGA))))))
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                            (IF (AND
                                 (OR (NOT AXES)
                                     (INTEGERP (AREF (FIRST AXES) 0)))
                                 (VECTORP ALPHA) (VECTORP OMEGA))
                                (IF (AND AXES
                                         (< 0
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                                    (ERROR
                                     (CONCATENATE 'STRING
                                                  "Specified axis is greater than 1, vectors"
                                                  " have only one axis along which to catenate."))
                                    (IF (AND AXES
                                             (> 0
                                                (- (AREF (FIRST AXES) 0)
                                                   (OF-STATE *APRIL-IDIOM*
                                                             :COUNT-FROM))))
                                        (ERROR
                                         (FORMAT NIL
                                                 "Specified axis is less than ~a."
                                                 (OF-STATE *APRIL-IDIOM*
                                                           :COUNT-FROM)))
                                        (CONCATENATE 'VECTOR ALPHA OMEGA)))
                                (IF (OR (NOT AXES)
                                        (INTEGERP (AREF (FIRST AXES) 0)))
                                    (LET* ((AXIS
                                            (IF AXES
                                                (- (AREF (FIRST AXES) 0)
                                                   (OF-STATE *APRIL-IDIOM*
                                                             :COUNT-FROM))
                                                (1-
                                                 (MAX (ARRAY-RANK ALPHA)
                                                      (ARRAY-RANK OMEGA)))))
                                           (SCALE-ALPHA
                                            (IF (NOT (IS-SINGLETON ALPHA))
                                                ALPHA
                                                (SCALE-ARRAY ALPHA OMEGA
                                                             AXIS)))
                                           (SCALE-OMEGA
                                            (IF (NOT (IS-SINGLETON OMEGA))
                                                OMEGA
                                                (SCALE-ARRAY OMEGA ALPHA
                                                             AXIS))))
                                      (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                    (LET* ((AXIS
                                            (CEILING
                                             (- (AREF (FIRST AXES) 0)
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                                           (PERMUTE-DIMS
                                            (IOTA (1+ (RANK ALPHA))))
                                           (P-ALPHA
                                            (IF (NOT (IS-SINGLETON ALPHA))
                                                (PERMUTE
                                                 (ROTATE-RIGHT AXIS
                                                               PERMUTE-DIMS)
                                                 (ARRAY-PROMOTE ALPHA))))
                                           (P-OMEGA
                                            (IF (NOT (IS-SINGLETON OMEGA))
                                                (PERMUTE
                                                 (ROTATE-RIGHT AXIS
                                                               PERMUTE-DIMS)
                                                 (ARRAY-PROMOTE OMEGA)))))
                                      (STACK AXIS
                                             (IF (IS-SINGLETON ALPHA)
                                                 (SCALE-ARRAY ALPHA P-OMEGA)
                                                 P-ALPHA)
                                             (IF (IS-SINGLETON OMEGA)
                                                 (SCALE-ARRAY OMEGA P-ALPHA)
                                                 P-OMEGA))))))
                        ⍺
                        (PROGN
                         (AREF-ELIDING ⍵
                                       (MAPCAR
                                        (LAMBDA (VECTOR)
                                          (IF VECTOR
                                              (IF (= 1 (LENGTH VECTOR))
                                                  (- (AREF VECTOR 0)
                                                     (OF-STATE *APRIL-IDIOM*
                                                               :COUNT-FROM))
                                                  (MAPCAR
                                                   (LAMBDA (ELEM)
                                                     (- ELEM
                                                        (OF-STATE *APRIL-IDIOM*
                                                                  :COUNT-FROM)))
                                                   (ARRAY-TO-LIST VECTOR)))))
                                        (LIST NIL NIL
                                              (FUNCALL #'APPLY-SCALAR-DYADIC
                                                       #'+
                                                       (IF (AND)
                                                           (FUNCALL
                                                            #'(LAMBDA (OMEGA)
                                                                (MAKE-ARRAY
                                                                 (LIST OMEGA)
                                                                 :INITIAL-CONTENTS
                                                                 (IOTA OMEGA
                                                                       :START
                                                                       (OF-STATE
                                                                        *APRIL-IDIOM*
                                                                        :COUNT-FROM))))
                                                            (IF (ARRAYP
                                                                 (FUNCALL
                                                                  #'APPLY-SCALAR-DYADIC
                                                                  #'(LAMBDA
                                                                        (
                                                                         VEX::OMEGA
                                                                         VEX::ALPHA)
                                                                      (FUNCALL
                                                                       #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                                  (VECTOR 2)
                                                                  (PROGN
                                                                   (IF (AND)
                                                                       (FUNCALL
                                                                        #'(LAMBDA
                                                                              (
                                                                               OMEGA
                                                                               ALPHA
                                                                               &OPTIONAL
                                                                               AXES)
                                                                            (IF AXES
                                                                                (LET ((ELIDED-COORDS
                                                                                       (LOOP FOR I FROM 0 TO (1-
                                                                                                              (RANK
                                                                                                               OMEGA))
                                                                                             COLLECT NIL)))
                                                                                  (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                             (LENGTH
                                                                                                              (FIRST
                                                                                                               AXES)))
                                                                                        DO (SETF (NTH
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    (FIRST
                                                                                                     AXES)
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))
                                                                                                  ELIDED-COORDS)
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     ALPHA
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))))
                                                                                  (AREF-ELIDING
                                                                                   OMEGA
                                                                                   ELIDED-COORDS))
                                                                                (LET* ((COORDS
                                                                                        (MAPCAR
                                                                                         (LAMBDA
                                                                                             (
                                                                                              COORD)
                                                                                           (-
                                                                                            COORD
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             `:COUNT-FROM)))
                                                                                         (ARRAY-TO-LIST
                                                                                          ALPHA)))
                                                                                       (FOUND
                                                                                        (APPLY
                                                                                         #'AREF
                                                                                         (CONS
                                                                                          OMEGA
                                                                                          COORDS))))
                                                                                  (IF (NOT
                                                                                       (ARRAYP
                                                                                        FOUND))
                                                                                      (VECTOR
                                                                                       FOUND)
                                                                                      FOUND))))
                                                                        (IF (AND)
                                                                            (FUNCALL
                                                                             #'(LAMBDA
                                                                                   (
                                                                                    OMEGA)
                                                                                 (LET ((OMEGA-DIMS
                                                                                        (DIMS
                                                                                         OMEGA)))
                                                                                   (MAKE-ARRAY
                                                                                    (LIST
                                                                                     (LENGTH
                                                                                      OMEGA-DIMS))
                                                                                    :INITIAL-CONTENTS
                                                                                    OMEGA-DIMS)))
                                                                             ⍵))
                                                                        (VECTOR
                                                                         3)
                                                                        (LIST))))))
                                                                (DISCLOSE
                                                                 (FUNCALL
                                                                  #'APPLY-SCALAR-DYADIC
                                                                  #'(LAMBDA
                                                                        (
                                                                         VEX::OMEGA
                                                                         VEX::ALPHA)
                                                                      (FUNCALL
                                                                       #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                                  (VECTOR 2)
                                                                  (PROGN
                                                                   (IF (AND)
                                                                       (FUNCALL
                                                                        #'(LAMBDA
                                                                              (
                                                                               OMEGA
                                                                               ALPHA
                                                                               &OPTIONAL
                                                                               AXES)
                                                                            (IF AXES
                                                                                (LET ((ELIDED-COORDS
                                                                                       (LOOP FOR I FROM 0 TO (1-
                                                                                                              (RANK
                                                                                                               OMEGA))
                                                                                             COLLECT NIL)))
                                                                                  (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                             (LENGTH
                                                                                                              (FIRST
                                                                                                               AXES)))
                                                                                        DO (SETF (NTH
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    (FIRST
                                                                                                     AXES)
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))
                                                                                                  ELIDED-COORDS)
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     ALPHA
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))))
                                                                                  (AREF-ELIDING
                                                                                   OMEGA
                                                                                   ELIDED-COORDS))
                                                                                (LET* ((COORDS
                                                                                        (MAPCAR
                                                                                         (LAMBDA
                                                                                             (
                                                                                              COORD)
                                                                                           (-
                                                                                            COORD
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             `:COUNT-FROM)))
                                                                                         (ARRAY-TO-LIST
                                                                                          ALPHA)))
                                                                                       (FOUND
                                                                                        (APPLY
                                                                                         #'AREF
                                                                                         (CONS
                                                                                          OMEGA
                                                                                          COORDS))))
                                                                                  (IF (NOT
                                                                                       (ARRAYP
                                                                                        FOUND))
                                                                                      (VECTOR
                                                                                       FOUND)
                                                                                      FOUND))))
                                                                        (IF (AND)
                                                                            (FUNCALL
                                                                             #'(LAMBDA
                                                                                   (
                                                                                    OMEGA)
                                                                                 (LET ((OMEGA-DIMS
                                                                                        (DIMS
                                                                                         OMEGA)))
                                                                                   (MAKE-ARRAY
                                                                                    (LIST
                                                                                     (LENGTH
                                                                                      OMEGA-DIMS))
                                                                                    :INITIAL-CONTENTS
                                                                                    OMEGA-DIMS)))
                                                                             ⍵))
                                                                        (VECTOR
                                                                         3)
                                                                        (LIST))))))
                                                                (FUNCALL
                                                                 #'APPLY-SCALAR-DYADIC
                                                                 #'(LAMBDA
                                                                       (
                                                                        VEX::OMEGA
                                                                        VEX::ALPHA)
                                                                     (FUNCALL
                                                                      #'-
                                                                      VEX::ALPHA
                                                                      VEX::OMEGA))
                                                                 (VECTOR 2)
                                                                 (PROGN
                                                                  (IF (AND)
                                                                      (FUNCALL
                                                                       #'(LAMBDA
                                                                             (
                                                                              OMEGA
                                                                              ALPHA
                                                                              &OPTIONAL
                                                                              AXES)
                                                                           (IF AXES
                                                                               (LET ((ELIDED-COORDS
                                                                                      (LOOP FOR I FROM 0 TO (1-
                                                                                                             (RANK
                                                                                                              OMEGA))
                                                                                            COLLECT NIL)))
                                                                                 (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                            (LENGTH
                                                                                                             (FIRST
                                                                                                              AXES)))
                                                                                       DO (SETF (NTH
                                                                                                 (-
                                                                                                  (AREF
                                                                                                   (FIRST
                                                                                                    AXES)
                                                                                                   INDEX)
                                                                                                  (OF-STATE
                                                                                                   *APRIL-IDIOM*
                                                                                                   :COUNT-FROM))
                                                                                                 ELIDED-COORDS)
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    ALPHA
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))))
                                                                                 (AREF-ELIDING
                                                                                  OMEGA
                                                                                  ELIDED-COORDS))
                                                                               (LET* ((COORDS
                                                                                       (MAPCAR
                                                                                        (LAMBDA
                                                                                            (
                                                                                             COORD)
                                                                                          (-
                                                                                           COORD
                                                                                           (OF-STATE
                                                                                            *APRIL-IDIOM*
                                                                                            `:COUNT-FROM)))
                                                                                        (ARRAY-TO-LIST
                                                                                         ALPHA)))
                                                                                      (FOUND
                                                                                       (APPLY
                                                                                        #'AREF
                                                                                        (CONS
                                                                                         OMEGA
                                                                                         COORDS))))
                                                                                 (IF (NOT
                                                                                      (ARRAYP
                                                                                       FOUND))
                                                                                     (VECTOR
                                                                                      FOUND)
                                                                                     FOUND))))
                                                                       (IF (AND)
                                                                           (FUNCALL
                                                                            #'(LAMBDA
                                                                                  (
                                                                                   OMEGA)
                                                                                (LET ((OMEGA-DIMS
                                                                                       (DIMS
                                                                                        OMEGA)))
                                                                                  (MAKE-ARRAY
                                                                                   (LIST
                                                                                    (LENGTH
                                                                                     OMEGA-DIMS))
                                                                                   :INITIAL-CONTENTS
                                                                                   OMEGA-DIMS)))
                                                                            ⍵))
                                                                       (VECTOR
                                                                        3)
                                                                       (LIST))))))))
                                                       (VECTOR 1))))))
                        (LIST)))
                   ⍺ (LIST))))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1111
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                       (IF (AND
                            (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                            (VECTORP ALPHA) (VECTORP OMEGA))
                           (IF (AND AXES
                                    (< 0
                                       (- (AREF (FIRST AXES) 0)
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM))))
                               (ERROR
                                (CONCATENATE 'STRING
                                             "Specified axis is greater than 1, vectors"
                                             " have only one axis along which to catenate."))
                               (IF (AND AXES
                                        (> 0
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                                   (ERROR
                                    (FORMAT NIL
                                            "Specified axis is less than ~a."
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                   (CONCATENATE 'VECTOR ALPHA OMEGA)))
                           (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                               (LET* ((AXIS
                                       (IF AXES
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))
                                           (1-
                                            (MAX (ARRAY-RANK ALPHA)
                                                 (ARRAY-RANK OMEGA)))))
                                      (SCALE-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           ALPHA
                                           (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                      (SCALE-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           OMEGA
                                           (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                 (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                               (LET* ((AXIS
                                       (CEILING
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                      (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                      (P-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE ALPHA))))
                                      (P-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE OMEGA)))))
                                 (STACK AXIS
                                        (IF (IS-SINGLETON ALPHA)
                                            (SCALE-ARRAY ALPHA P-OMEGA)
                                            P-ALPHA)
                                        (IF (IS-SINGLETON OMEGA)
                                            (SCALE-ARRAY OMEGA P-ALPHA)
                                            P-OMEGA))))))
                   ⍺
                   (AREF-ELIDING ⍵
                                 (MAPCAR
                                  (LAMBDA (VECTOR)
                                    (IF VECTOR
                                        (IF (= 1 (LENGTH VECTOR))
                                            (- (AREF VECTOR 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))
                                            (MAPCAR
                                             (LAMBDA (ELEM)
                                               (- ELEM
                                                  (OF-STATE *APRIL-IDIOM*
                                                            :COUNT-FROM)))
                                             (ARRAY-TO-LIST VECTOR)))))
                                  (LIST NIL
                                        (IF (AND)
                                            (FUNCALL
                                             #'(LAMBDA (OMEGA)
                                                 (MAKE-ARRAY (LIST OMEGA)
                                                             :INITIAL-CONTENTS
                                                             (IOTA OMEGA :START
                                                                   (OF-STATE
                                                                    *APRIL-IDIOM*
                                                                    :COUNT-FROM))))
                                             (IF (ARRAYP
                                                  (FUNCALL
                                                   #'APPLY-SCALAR-DYADIC
                                                   #'(LAMBDA
                                                         (VEX::OMEGA
                                                          VEX::ALPHA)
                                                       (FUNCALL #'- VEX::ALPHA
                                                                VEX::OMEGA))
                                                   (VECTOR 1)
                                                   (PROGN
                                                    (IF (AND)
                                                        (FUNCALL
                                                         #'(LAMBDA
                                                               (OMEGA ALPHA
                                                                &OPTIONAL AXES)
                                                             (IF AXES
                                                                 (LET ((ELIDED-COORDS
                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                               (RANK
                                                                                                OMEGA))
                                                                              COLLECT NIL)))
                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                              (LENGTH
                                                                                               (FIRST
                                                                                                AXES)))
                                                                         DO (SETF (NTH
                                                                                   (-
                                                                                    (AREF
                                                                                     (FIRST
                                                                                      AXES)
                                                                                     INDEX)
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     :COUNT-FROM))
                                                                                   ELIDED-COORDS)
                                                                                    (-
                                                                                     (AREF
                                                                                      ALPHA
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))))
                                                                   (AREF-ELIDING
                                                                    OMEGA
                                                                    ELIDED-COORDS))
                                                                 (LET* ((COORDS
                                                                         (MAPCAR
                                                                          (LAMBDA
                                                                              (
                                                                               COORD)
                                                                            (-
                                                                             COORD
                                                                             (OF-STATE
                                                                              *APRIL-IDIOM*
                                                                              `:COUNT-FROM)))
                                                                          (ARRAY-TO-LIST
                                                                           ALPHA)))
                                                                        (FOUND
                                                                         (APPLY
                                                                          #'AREF
                                                                          (CONS
                                                                           OMEGA
                                                                           COORDS))))
                                                                   (IF (NOT
                                                                        (ARRAYP
                                                                         FOUND))
                                                                       (VECTOR
                                                                        FOUND)
                                                                       FOUND))))
                                                         (IF (AND)
                                                             (FUNCALL
                                                              #'(LAMBDA (OMEGA)
                                                                  (LET ((OMEGA-DIMS
                                                                         (DIMS
                                                                          OMEGA)))
                                                                    (MAKE-ARRAY
                                                                     (LIST
                                                                      (LENGTH
                                                                       OMEGA-DIMS))
                                                                     :INITIAL-CONTENTS
                                                                     OMEGA-DIMS)))
                                                              ⍵))
                                                         (VECTOR 2) (LIST))))))
                                                 (DISCLOSE
                                                  (FUNCALL
                                                   #'APPLY-SCALAR-DYADIC
                                                   #'(LAMBDA
                                                         (VEX::OMEGA
                                                          VEX::ALPHA)
                                                       (FUNCALL #'- VEX::ALPHA
                                                                VEX::OMEGA))
                                                   (VECTOR 1)
                                                   (PROGN
                                                    (IF (AND)
                                                        (FUNCALL
                                                         #'(LAMBDA
                                                               (OMEGA ALPHA
                                                                &OPTIONAL AXES)
                                                             (IF AXES
                                                                 (LET ((ELIDED-COORDS
                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                               (RANK
                                                                                                OMEGA))
                                                                              COLLECT NIL)))
                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                              (LENGTH
                                                                                               (FIRST
                                                                                                AXES)))
                                                                         DO (SETF (NTH
                                                                                   (-
                                                                                    (AREF
                                                                                     (FIRST
                                                                                      AXES)
                                                                                     INDEX)
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     :COUNT-FROM))
                                                                                   ELIDED-COORDS)
                                                                                    (-
                                                                                     (AREF
                                                                                      ALPHA
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))))
                                                                   (AREF-ELIDING
                                                                    OMEGA
                                                                    ELIDED-COORDS))
                                                                 (LET* ((COORDS
                                                                         (MAPCAR
                                                                          (LAMBDA
                                                                              (
                                                                               COORD)
                                                                            (-
                                                                             COORD
                                                                             (OF-STATE
                                                                              *APRIL-IDIOM*
                                                                              `:COUNT-FROM)))
                                                                          (ARRAY-TO-LIST
                                                                           ALPHA)))
                                                                        (FOUND
                                                                         (APPLY
                                                                          #'AREF
                                                                          (CONS
                                                                           OMEGA
                                                                           COORDS))))
                                                                   (IF (NOT
                                                                        (ARRAYP
                                                                         FOUND))
                                                                       (VECTOR
                                                                        FOUND)
                                                                       FOUND))))
                                                         (IF (AND)
                                                             (FUNCALL
                                                              #'(LAMBDA (OMEGA)
                                                                  (LET ((OMEGA-DIMS
                                                                         (DIMS
                                                                          OMEGA)))
                                                                    (MAKE-ARRAY
                                                                     (LIST
                                                                      (LENGTH
                                                                       OMEGA-DIMS))
                                                                     :INITIAL-CONTENTS
                                                                     OMEGA-DIMS)))
                                                              ⍵))
                                                         (VECTOR 2) (LIST))))))
                                                 (FUNCALL #'APPLY-SCALAR-DYADIC
                                                          #'(LAMBDA
                                                                (VEX::OMEGA
                                                                 VEX::ALPHA)
                                                              (FUNCALL #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                          (VECTOR 1)
                                                          (PROGN
                                                           (IF (AND)
                                                               (FUNCALL
                                                                #'(LAMBDA
                                                                      (OMEGA
                                                                       ALPHA
                                                                       &OPTIONAL
                                                                       AXES)
                                                                    (IF AXES
                                                                        (LET ((ELIDED-COORDS
                                                                               (LOOP FOR I FROM 0 TO (1-
                                                                                                      (RANK
                                                                                                       OMEGA))
                                                                                     COLLECT NIL)))
                                                                          (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                     (LENGTH
                                                                                                      (FIRST
                                                                                                       AXES)))
                                                                                DO (SETF (NTH
                                                                                          (-
                                                                                           (AREF
                                                                                            (FIRST
                                                                                             AXES)
                                                                                            INDEX)
                                                                                           (OF-STATE
                                                                                            *APRIL-IDIOM*
                                                                                            :COUNT-FROM))
                                                                                          ELIDED-COORDS)
                                                                                           (-
                                                                                            (AREF
                                                                                             ALPHA
                                                                                             INDEX)
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             :COUNT-FROM))))
                                                                          (AREF-ELIDING
                                                                           OMEGA
                                                                           ELIDED-COORDS))
                                                                        (LET* ((COORDS
                                                                                (MAPCAR
                                                                                 (LAMBDA
                                                                                     (
                                                                                      COORD)
                                                                                   (-
                                                                                    COORD
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     `:COUNT-FROM)))
                                                                                 (ARRAY-TO-LIST
                                                                                  ALPHA)))
                                                                               (FOUND
                                                                                (APPLY
                                                                                 #'AREF
                                                                                 (CONS
                                                                                  OMEGA
                                                                                  COORDS))))
                                                                          (IF (NOT
                                                                               (ARRAYP
                                                                                FOUND))
                                                                              (VECTOR
                                                                               FOUND)
                                                                              FOUND))))
                                                                (IF (AND)
                                                                    (FUNCALL
                                                                     #'(LAMBDA
                                                                           (
                                                                            OMEGA)
                                                                         (LET ((OMEGA-DIMS
                                                                                (DIMS
                                                                                 OMEGA)))
                                                                           (MAKE-ARRAY
                                                                            (LIST
                                                                             (LENGTH
                                                                              OMEGA-DIMS))
                                                                            :INITIAL-CONTENTS
                                                                            OMEGA-DIMS)))
                                                                     ⍵))
                                                                (VECTOR 2)
                                                                (LIST)))))))))))
                   (LIST (VECTOR 2)))))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1112
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (VECTOR 0) (VECTOR 16 16 16))))
      (#:G1113
       (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
  (DISCLOSE #:G1113))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "bla")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16))))
;       (#:G1113
;        (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1110
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1111
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1112
;            (IF (AND)
;                (FUNCALL #'# # #)))
;           (#:G1113 (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 #) (VECTOR 1))))
;       (APRIL::DISCLOSE #:G1113))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1110 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1111 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1112 is defined but never used.
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16))))
;       (#:G1113
;        (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
;     (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1110)
; 
; caught WARNING:
;   undefined variable: #:G1110

;     (FUNCALL #:G1111 #:G1112 (VECTOR 2))
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1111)
; 
; caught WARNING:
;   undefined variable: #:G1111

; ==>
;   (SB-C::%FUNCALL (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1111) #:G1112
;                   (VECTOR 2))
; 
; caught WARNING:
;   undefined variable: #:G1112
; 
; compilation unit finished
;   Undefined variables:
;     #:G1110 #:G1111 #:G1112
;   caught 3 WARNING conditions
;   caught 6 STYLE-WARNING conditions
; Evaluation aborted on #<UNBOUND-VARIABLE G1110 {1007449393}>.
APRIL> (april (set (:space *workspace1*) (:compile-only)) "bla")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL)
      (#:G1020
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 7)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1110
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                       (IF (AND
                            (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                            (VECTORP ALPHA) (VECTORP OMEGA))
                           (IF (AND AXES
                                    (< 0
                                       (- (AREF (FIRST AXES) 0)
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM))))
                               (ERROR
                                (CONCATENATE 'STRING
                                             "Specified axis is greater than 1, vectors"
                                             " have only one axis along which to catenate."))
                               (IF (AND AXES
                                        (> 0
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                                   (ERROR
                                    (FORMAT NIL
                                            "Specified axis is less than ~a."
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                   (CONCATENATE 'VECTOR ALPHA OMEGA)))
                           (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                               (LET* ((AXIS
                                       (IF AXES
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))
                                           (1-
                                            (MAX (ARRAY-RANK ALPHA)
                                                 (ARRAY-RANK OMEGA)))))
                                      (SCALE-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           ALPHA
                                           (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                      (SCALE-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           OMEGA
                                           (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                 (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                               (LET* ((AXIS
                                       (CEILING
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                      (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                      (P-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE ALPHA))))
                                      (P-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE OMEGA)))))
                                 (STACK AXIS
                                        (IF (IS-SINGLETON ALPHA)
                                            (SCALE-ARRAY ALPHA P-OMEGA)
                                            P-ALPHA)
                                        (IF (IS-SINGLETON OMEGA)
                                            (SCALE-ARRAY OMEGA P-ALPHA)
                                            P-OMEGA))))))
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                            (IF (AND
                                 (OR (NOT AXES)
                                     (INTEGERP (AREF (FIRST AXES) 0)))
                                 (VECTORP ALPHA) (VECTORP OMEGA))
                                (IF (AND AXES
                                         (< 0
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                                    (ERROR
                                     (CONCATENATE 'STRING
                                                  "Specified axis is greater than 1, vectors"
                                                  " have only one axis along which to catenate."))
                                    (IF (AND AXES
                                             (> 0
                                                (- (AREF (FIRST AXES) 0)
                                                   (OF-STATE *APRIL-IDIOM*
                                                             :COUNT-FROM))))
                                        (ERROR
                                         (FORMAT NIL
                                                 "Specified axis is less than ~a."
                                                 (OF-STATE *APRIL-IDIOM*
                                                           :COUNT-FROM)))
                                        (CONCATENATE 'VECTOR ALPHA OMEGA)))
                                (IF (OR (NOT AXES)
                                        (INTEGERP (AREF (FIRST AXES) 0)))
                                    (LET* ((AXIS
                                            (IF AXES
                                                (- (AREF (FIRST AXES) 0)
                                                   (OF-STATE *APRIL-IDIOM*
                                                             :COUNT-FROM))
                                                (1-
                                                 (MAX (ARRAY-RANK ALPHA)
                                                      (ARRAY-RANK OMEGA)))))
                                           (SCALE-ALPHA
                                            (IF (NOT (IS-SINGLETON ALPHA))
                                                ALPHA
                                                (SCALE-ARRAY ALPHA OMEGA
                                                             AXIS)))
                                           (SCALE-OMEGA
                                            (IF (NOT (IS-SINGLETON OMEGA))
                                                OMEGA
                                                (SCALE-ARRAY OMEGA ALPHA
                                                             AXIS))))
                                      (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                    (LET* ((AXIS
                                            (CEILING
                                             (- (AREF (FIRST AXES) 0)
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                                           (PERMUTE-DIMS
                                            (IOTA (1+ (RANK ALPHA))))
                                           (P-ALPHA
                                            (IF (NOT (IS-SINGLETON ALPHA))
                                                (PERMUTE
                                                 (ROTATE-RIGHT AXIS
                                                               PERMUTE-DIMS)
                                                 (ARRAY-PROMOTE ALPHA))))
                                           (P-OMEGA
                                            (IF (NOT (IS-SINGLETON OMEGA))
                                                (PERMUTE
                                                 (ROTATE-RIGHT AXIS
                                                               PERMUTE-DIMS)
                                                 (ARRAY-PROMOTE OMEGA)))))
                                      (STACK AXIS
                                             (IF (IS-SINGLETON ALPHA)
                                                 (SCALE-ARRAY ALPHA P-OMEGA)
                                                 P-ALPHA)
                                             (IF (IS-SINGLETON OMEGA)
                                                 (SCALE-ARRAY OMEGA P-ALPHA)
                                                 P-OMEGA))))))
                        ⍺
                        (PROGN
                         (AREF-ELIDING ⍵
                                       (MAPCAR
                                        (LAMBDA (VECTOR)
                                          (IF VECTOR
                                              (IF (= 1 (LENGTH VECTOR))
                                                  (- (AREF VECTOR 0)
                                                     (OF-STATE *APRIL-IDIOM*
                                                               :COUNT-FROM))
                                                  (MAPCAR
                                                   (LAMBDA (ELEM)
                                                     (- ELEM
                                                        (OF-STATE *APRIL-IDIOM*
                                                                  :COUNT-FROM)))
                                                   (ARRAY-TO-LIST VECTOR)))))
                                        (LIST NIL NIL
                                              (FUNCALL #'APPLY-SCALAR-DYADIC
                                                       #'+
                                                       (IF (AND)
                                                           (FUNCALL
                                                            #'(LAMBDA (OMEGA)
                                                                (MAKE-ARRAY
                                                                 (LIST OMEGA)
                                                                 :INITIAL-CONTENTS
                                                                 (IOTA OMEGA
                                                                       :START
                                                                       (OF-STATE
                                                                        *APRIL-IDIOM*
                                                                        :COUNT-FROM))))
                                                            (IF (ARRAYP
                                                                 (FUNCALL
                                                                  #'APPLY-SCALAR-DYADIC
                                                                  #'(LAMBDA
                                                                        (
                                                                         VEX::OMEGA
                                                                         VEX::ALPHA)
                                                                      (FUNCALL
                                                                       #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                                  (VECTOR 2)
                                                                  (PROGN
                                                                   (IF (AND)
                                                                       (FUNCALL
                                                                        #'(LAMBDA
                                                                              (
                                                                               OMEGA
                                                                               ALPHA
                                                                               &OPTIONAL
                                                                               AXES)
                                                                            (IF AXES
                                                                                (LET ((ELIDED-COORDS
                                                                                       (LOOP FOR I FROM 0 TO (1-
                                                                                                              (RANK
                                                                                                               OMEGA))
                                                                                             COLLECT NIL)))
                                                                                  (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                             (LENGTH
                                                                                                              (FIRST
                                                                                                               AXES)))
                                                                                        DO (SETF (NTH
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    (FIRST
                                                                                                     AXES)
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))
                                                                                                  ELIDED-COORDS)
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     ALPHA
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))))
                                                                                  (AREF-ELIDING
                                                                                   OMEGA
                                                                                   ELIDED-COORDS))
                                                                                (LET* ((COORDS
                                                                                        (MAPCAR
                                                                                         (LAMBDA
                                                                                             (
                                                                                              COORD)
                                                                                           (-
                                                                                            COORD
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             `:COUNT-FROM)))
                                                                                         (ARRAY-TO-LIST
                                                                                          ALPHA)))
                                                                                       (FOUND
                                                                                        (APPLY
                                                                                         #'AREF
                                                                                         (CONS
                                                                                          OMEGA
                                                                                          COORDS))))
                                                                                  (IF (NOT
                                                                                       (ARRAYP
                                                                                        FOUND))
                                                                                      (VECTOR
                                                                                       FOUND)
                                                                                      FOUND))))
                                                                        (IF (AND)
                                                                            (FUNCALL
                                                                             #'(LAMBDA
                                                                                   (
                                                                                    OMEGA)
                                                                                 (LET ((OMEGA-DIMS
                                                                                        (DIMS
                                                                                         OMEGA)))
                                                                                   (MAKE-ARRAY
                                                                                    (LIST
                                                                                     (LENGTH
                                                                                      OMEGA-DIMS))
                                                                                    :INITIAL-CONTENTS
                                                                                    OMEGA-DIMS)))
                                                                             ⍵))
                                                                        (VECTOR
                                                                         3)
                                                                        (LIST))))))
                                                                (DISCLOSE
                                                                 (FUNCALL
                                                                  #'APPLY-SCALAR-DYADIC
                                                                  #'(LAMBDA
                                                                        (
                                                                         VEX::OMEGA
                                                                         VEX::ALPHA)
                                                                      (FUNCALL
                                                                       #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                                  (VECTOR 2)
                                                                  (PROGN
                                                                   (IF (AND)
                                                                       (FUNCALL
                                                                        #'(LAMBDA
                                                                              (
                                                                               OMEGA
                                                                               ALPHA
                                                                               &OPTIONAL
                                                                               AXES)
                                                                            (IF AXES
                                                                                (LET ((ELIDED-COORDS
                                                                                       (LOOP FOR I FROM 0 TO (1-
                                                                                                              (RANK
                                                                                                               OMEGA))
                                                                                             COLLECT NIL)))
                                                                                  (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                             (LENGTH
                                                                                                              (FIRST
                                                                                                               AXES)))
                                                                                        DO (SETF (NTH
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    (FIRST
                                                                                                     AXES)
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))
                                                                                                  ELIDED-COORDS)
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     ALPHA
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))))
                                                                                  (AREF-ELIDING
                                                                                   OMEGA
                                                                                   ELIDED-COORDS))
                                                                                (LET* ((COORDS
                                                                                        (MAPCAR
                                                                                         (LAMBDA
                                                                                             (
                                                                                              COORD)
                                                                                           (-
                                                                                            COORD
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             `:COUNT-FROM)))
                                                                                         (ARRAY-TO-LIST
                                                                                          ALPHA)))
                                                                                       (FOUND
                                                                                        (APPLY
                                                                                         #'AREF
                                                                                         (CONS
                                                                                          OMEGA
                                                                                          COORDS))))
                                                                                  (IF (NOT
                                                                                       (ARRAYP
                                                                                        FOUND))
                                                                                      (VECTOR
                                                                                       FOUND)
                                                                                      FOUND))))
                                                                        (IF (AND)
                                                                            (FUNCALL
                                                                             #'(LAMBDA
                                                                                   (
                                                                                    OMEGA)
                                                                                 (LET ((OMEGA-DIMS
                                                                                        (DIMS
                                                                                         OMEGA)))
                                                                                   (MAKE-ARRAY
                                                                                    (LIST
                                                                                     (LENGTH
                                                                                      OMEGA-DIMS))
                                                                                    :INITIAL-CONTENTS
                                                                                    OMEGA-DIMS)))
                                                                             ⍵))
                                                                        (VECTOR
                                                                         3)
                                                                        (LIST))))))
                                                                (FUNCALL
                                                                 #'APPLY-SCALAR-DYADIC
                                                                 #'(LAMBDA
                                                                       (
                                                                        VEX::OMEGA
                                                                        VEX::ALPHA)
                                                                     (FUNCALL
                                                                      #'-
                                                                      VEX::ALPHA
                                                                      VEX::OMEGA))
                                                                 (VECTOR 2)
                                                                 (PROGN
                                                                  (IF (AND)
                                                                      (FUNCALL
                                                                       #'(LAMBDA
                                                                             (
                                                                              OMEGA
                                                                              ALPHA
                                                                              &OPTIONAL
                                                                              AXES)
                                                                           (IF AXES
                                                                               (LET ((ELIDED-COORDS
                                                                                      (LOOP FOR I FROM 0 TO (1-
                                                                                                             (RANK
                                                                                                              OMEGA))
                                                                                            COLLECT NIL)))
                                                                                 (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                            (LENGTH
                                                                                                             (FIRST
                                                                                                              AXES)))
                                                                                       DO (SETF (NTH
                                                                                                 (-
                                                                                                  (AREF
                                                                                                   (FIRST
                                                                                                    AXES)
                                                                                                   INDEX)
                                                                                                  (OF-STATE
                                                                                                   *APRIL-IDIOM*
                                                                                                   :COUNT-FROM))
                                                                                                 ELIDED-COORDS)
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    ALPHA
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))))
                                                                                 (AREF-ELIDING
                                                                                  OMEGA
                                                                                  ELIDED-COORDS))
                                                                               (LET* ((COORDS
                                                                                       (MAPCAR
                                                                                        (LAMBDA
                                                                                            (
                                                                                             COORD)
                                                                                          (-
                                                                                           COORD
                                                                                           (OF-STATE
                                                                                            *APRIL-IDIOM*
                                                                                            `:COUNT-FROM)))
                                                                                        (ARRAY-TO-LIST
                                                                                         ALPHA)))
                                                                                      (FOUND
                                                                                       (APPLY
                                                                                        #'AREF
                                                                                        (CONS
                                                                                         OMEGA
                                                                                         COORDS))))
                                                                                 (IF (NOT
                                                                                      (ARRAYP
                                                                                       FOUND))
                                                                                     (VECTOR
                                                                                      FOUND)
                                                                                     FOUND))))
                                                                       (IF (AND)
                                                                           (FUNCALL
                                                                            #'(LAMBDA
                                                                                  (
                                                                                   OMEGA)
                                                                                (LET ((OMEGA-DIMS
                                                                                       (DIMS
                                                                                        OMEGA)))
                                                                                  (MAKE-ARRAY
                                                                                   (LIST
                                                                                    (LENGTH
                                                                                     OMEGA-DIMS))
                                                                                   :INITIAL-CONTENTS
                                                                                   OMEGA-DIMS)))
                                                                            ⍵))
                                                                       (VECTOR
                                                                        3)
                                                                       (LIST))))))))
                                                       (VECTOR 1))))))
                        (LIST)))
                   ⍺ (LIST))))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1111
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                       (IF (AND
                            (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                            (VECTORP ALPHA) (VECTORP OMEGA))
                           (IF (AND AXES
                                    (< 0
                                       (- (AREF (FIRST AXES) 0)
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM))))
                               (ERROR
                                (CONCATENATE 'STRING
                                             "Specified axis is greater than 1, vectors"
                                             " have only one axis along which to catenate."))
                               (IF (AND AXES
                                        (> 0
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                                   (ERROR
                                    (FORMAT NIL
                                            "Specified axis is less than ~a."
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                   (CONCATENATE 'VECTOR ALPHA OMEGA)))
                           (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                               (LET* ((AXIS
                                       (IF AXES
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))
                                           (1-
                                            (MAX (ARRAY-RANK ALPHA)
                                                 (ARRAY-RANK OMEGA)))))
                                      (SCALE-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           ALPHA
                                           (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                      (SCALE-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           OMEGA
                                           (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                 (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                               (LET* ((AXIS
                                       (CEILING
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                      (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                      (P-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE ALPHA))))
                                      (P-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE OMEGA)))))
                                 (STACK AXIS
                                        (IF (IS-SINGLETON ALPHA)
                                            (SCALE-ARRAY ALPHA P-OMEGA)
                                            P-ALPHA)
                                        (IF (IS-SINGLETON OMEGA)
                                            (SCALE-ARRAY OMEGA P-ALPHA)
                                            P-OMEGA))))))
                   ⍺
                   (AREF-ELIDING ⍵
                                 (MAPCAR
                                  (LAMBDA (VECTOR)
                                    (IF VECTOR
                                        (IF (= 1 (LENGTH VECTOR))
                                            (- (AREF VECTOR 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))
                                            (MAPCAR
                                             (LAMBDA (ELEM)
                                               (- ELEM
                                                  (OF-STATE *APRIL-IDIOM*
                                                            :COUNT-FROM)))
                                             (ARRAY-TO-LIST VECTOR)))))
                                  (LIST NIL
                                        (IF (AND)
                                            (FUNCALL
                                             #'(LAMBDA (OMEGA)
                                                 (MAKE-ARRAY (LIST OMEGA)
                                                             :INITIAL-CONTENTS
                                                             (IOTA OMEGA :START
                                                                   (OF-STATE
                                                                    *APRIL-IDIOM*
                                                                    :COUNT-FROM))))
                                             (IF (ARRAYP
                                                  (FUNCALL
                                                   #'APPLY-SCALAR-DYADIC
                                                   #'(LAMBDA
                                                         (VEX::OMEGA
                                                          VEX::ALPHA)
                                                       (FUNCALL #'- VEX::ALPHA
                                                                VEX::OMEGA))
                                                   (VECTOR 1)
                                                   (PROGN
                                                    (IF (AND)
                                                        (FUNCALL
                                                         #'(LAMBDA
                                                               (OMEGA ALPHA
                                                                &OPTIONAL AXES)
                                                             (IF AXES
                                                                 (LET ((ELIDED-COORDS
                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                               (RANK
                                                                                                OMEGA))
                                                                              COLLECT NIL)))
                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                              (LENGTH
                                                                                               (FIRST
                                                                                                AXES)))
                                                                         DO (SETF (NTH
                                                                                   (-
                                                                                    (AREF
                                                                                     (FIRST
                                                                                      AXES)
                                                                                     INDEX)
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     :COUNT-FROM))
                                                                                   ELIDED-COORDS)
                                                                                    (-
                                                                                     (AREF
                                                                                      ALPHA
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))))
                                                                   (AREF-ELIDING
                                                                    OMEGA
                                                                    ELIDED-COORDS))
                                                                 (LET* ((COORDS
                                                                         (MAPCAR
                                                                          (LAMBDA
                                                                              (
                                                                               COORD)
                                                                            (-
                                                                             COORD
                                                                             (OF-STATE
                                                                              *APRIL-IDIOM*
                                                                              `:COUNT-FROM)))
                                                                          (ARRAY-TO-LIST
                                                                           ALPHA)))
                                                                        (FOUND
                                                                         (APPLY
                                                                          #'AREF
                                                                          (CONS
                                                                           OMEGA
                                                                           COORDS))))
                                                                   (IF (NOT
                                                                        (ARRAYP
                                                                         FOUND))
                                                                       (VECTOR
                                                                        FOUND)
                                                                       FOUND))))
                                                         (IF (AND)
                                                             (FUNCALL
                                                              #'(LAMBDA (OMEGA)
                                                                  (LET ((OMEGA-DIMS
                                                                         (DIMS
                                                                          OMEGA)))
                                                                    (MAKE-ARRAY
                                                                     (LIST
                                                                      (LENGTH
                                                                       OMEGA-DIMS))
                                                                     :INITIAL-CONTENTS
                                                                     OMEGA-DIMS)))
                                                              ⍵))
                                                         (VECTOR 2) (LIST))))))
                                                 (DISCLOSE
                                                  (FUNCALL
                                                   #'APPLY-SCALAR-DYADIC
                                                   #'(LAMBDA
                                                         (VEX::OMEGA
                                                          VEX::ALPHA)
                                                       (FUNCALL #'- VEX::ALPHA
                                                                VEX::OMEGA))
                                                   (VECTOR 1)
                                                   (PROGN
                                                    (IF (AND)
                                                        (FUNCALL
                                                         #'(LAMBDA
                                                               (OMEGA ALPHA
                                                                &OPTIONAL AXES)
                                                             (IF AXES
                                                                 (LET ((ELIDED-COORDS
                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                               (RANK
                                                                                                OMEGA))
                                                                              COLLECT NIL)))
                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                              (LENGTH
                                                                                               (FIRST
                                                                                                AXES)))
                                                                         DO (SETF (NTH
                                                                                   (-
                                                                                    (AREF
                                                                                     (FIRST
                                                                                      AXES)
                                                                                     INDEX)
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     :COUNT-FROM))
                                                                                   ELIDED-COORDS)
                                                                                    (-
                                                                                     (AREF
                                                                                      ALPHA
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))))
                                                                   (AREF-ELIDING
                                                                    OMEGA
                                                                    ELIDED-COORDS))
                                                                 (LET* ((COORDS
                                                                         (MAPCAR
                                                                          (LAMBDA
                                                                              (
                                                                               COORD)
                                                                            (-
                                                                             COORD
                                                                             (OF-STATE
                                                                              *APRIL-IDIOM*
                                                                              `:COUNT-FROM)))
                                                                          (ARRAY-TO-LIST
                                                                           ALPHA)))
                                                                        (FOUND
                                                                         (APPLY
                                                                          #'AREF
                                                                          (CONS
                                                                           OMEGA
                                                                           COORDS))))
                                                                   (IF (NOT
                                                                        (ARRAYP
                                                                         FOUND))
                                                                       (VECTOR
                                                                        FOUND)
                                                                       FOUND))))
                                                         (IF (AND)
                                                             (FUNCALL
                                                              #'(LAMBDA (OMEGA)
                                                                  (LET ((OMEGA-DIMS
                                                                         (DIMS
                                                                          OMEGA)))
                                                                    (MAKE-ARRAY
                                                                     (LIST
                                                                      (LENGTH
                                                                       OMEGA-DIMS))
                                                                     :INITIAL-CONTENTS
                                                                     OMEGA-DIMS)))
                                                              ⍵))
                                                         (VECTOR 2) (LIST))))))
                                                 (FUNCALL #'APPLY-SCALAR-DYADIC
                                                          #'(LAMBDA
                                                                (VEX::OMEGA
                                                                 VEX::ALPHA)
                                                              (FUNCALL #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                          (VECTOR 1)
                                                          (PROGN
                                                           (IF (AND)
                                                               (FUNCALL
                                                                #'(LAMBDA
                                                                      (OMEGA
                                                                       ALPHA
                                                                       &OPTIONAL
                                                                       AXES)
                                                                    (IF AXES
                                                                        (LET ((ELIDED-COORDS
                                                                               (LOOP FOR I FROM 0 TO (1-
                                                                                                      (RANK
                                                                                                       OMEGA))
                                                                                     COLLECT NIL)))
                                                                          (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                     (LENGTH
                                                                                                      (FIRST
                                                                                                       AXES)))
                                                                                DO (SETF (NTH
                                                                                          (-
                                                                                           (AREF
                                                                                            (FIRST
                                                                                             AXES)
                                                                                            INDEX)
                                                                                           (OF-STATE
                                                                                            *APRIL-IDIOM*
                                                                                            :COUNT-FROM))
                                                                                          ELIDED-COORDS)
                                                                                           (-
                                                                                            (AREF
                                                                                             ALPHA
                                                                                             INDEX)
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             :COUNT-FROM))))
                                                                          (AREF-ELIDING
                                                                           OMEGA
                                                                           ELIDED-COORDS))
                                                                        (LET* ((COORDS
                                                                                (MAPCAR
                                                                                 (LAMBDA
                                                                                     (
                                                                                      COORD)
                                                                                   (-
                                                                                    COORD
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     `:COUNT-FROM)))
                                                                                 (ARRAY-TO-LIST
                                                                                  ALPHA)))
                                                                               (FOUND
                                                                                (APPLY
                                                                                 #'AREF
                                                                                 (CONS
                                                                                  OMEGA
                                                                                  COORDS))))
                                                                          (IF (NOT
                                                                               (ARRAYP
                                                                                FOUND))
                                                                              (VECTOR
                                                                               FOUND)
                                                                              FOUND))))
                                                                (IF (AND)
                                                                    (FUNCALL
                                                                     #'(LAMBDA
                                                                           (
                                                                            OMEGA)
                                                                         (LET ((OMEGA-DIMS
                                                                                (DIMS
                                                                                 OMEGA)))
                                                                           (MAKE-ARRAY
                                                                            (LIST
                                                                             (LENGTH
                                                                              OMEGA-DIMS))
                                                                            :INITIAL-CONTENTS
                                                                            OMEGA-DIMS)))
                                                                     ⍵))
                                                                (VECTOR 2)
                                                                (LIST)))))))))))
                   (LIST (VECTOR 2)))))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1112
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (VECTOR 0) (VECTOR 16 16 16))))
      (#:G1113
       (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
  (DISCLOSE #:G1113))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "91")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16))))
;       (#:G1113
;        (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1110
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1111
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1112
;            (IF (AND)
;                (FUNCALL #'# # #)))
;           (#:G1113 (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 #) (VECTOR 1))))
;       (APRIL::DISCLOSE (VECTOR 91)))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1110 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1111 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1112 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1113 is defined but never used.
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16))))
;       (#:G1113
;        (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
;     (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1110)
; 
; caught WARNING:
;   undefined variable: #:G1110

;     (FUNCALL #:G1111 #:G1112 (VECTOR 2))
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1111)
; 
; caught WARNING:
;   undefined variable: #:G1111

; ==>
;   (SB-C::%FUNCALL (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1111) #:G1112
;                   (VECTOR 2))
; 
; caught WARNING:
;   undefined variable: #:G1112
; 
; compilation unit finished
;   Undefined variables:
;     #:G1110 #:G1111 #:G1112
;   caught 3 WARNING conditions
;   caught 7 STYLE-WARNING conditions
; Evaluation aborted on #<UNBOUND-VARIABLE G1110 {1008931393}>.
APRIL> (april (set (:space *workspace1*) (:compile-only)) "bla")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL)
      (#:G1020
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 7)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1110
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                       (IF (AND
                            (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                            (VECTORP ALPHA) (VECTORP OMEGA))
                           (IF (AND AXES
                                    (< 0
                                       (- (AREF (FIRST AXES) 0)
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM))))
                               (ERROR
                                (CONCATENATE 'STRING
                                             "Specified axis is greater than 1, vectors"
                                             " have only one axis along which to catenate."))
                               (IF (AND AXES
                                        (> 0
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                                   (ERROR
                                    (FORMAT NIL
                                            "Specified axis is less than ~a."
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                   (CONCATENATE 'VECTOR ALPHA OMEGA)))
                           (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                               (LET* ((AXIS
                                       (IF AXES
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))
                                           (1-
                                            (MAX (ARRAY-RANK ALPHA)
                                                 (ARRAY-RANK OMEGA)))))
                                      (SCALE-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           ALPHA
                                           (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                      (SCALE-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           OMEGA
                                           (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                 (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                               (LET* ((AXIS
                                       (CEILING
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                      (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                      (P-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE ALPHA))))
                                      (P-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE OMEGA)))))
                                 (STACK AXIS
                                        (IF (IS-SINGLETON ALPHA)
                                            (SCALE-ARRAY ALPHA P-OMEGA)
                                            P-ALPHA)
                                        (IF (IS-SINGLETON OMEGA)
                                            (SCALE-ARRAY OMEGA P-ALPHA)
                                            P-OMEGA))))))
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                            (IF (AND
                                 (OR (NOT AXES)
                                     (INTEGERP (AREF (FIRST AXES) 0)))
                                 (VECTORP ALPHA) (VECTORP OMEGA))
                                (IF (AND AXES
                                         (< 0
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                                    (ERROR
                                     (CONCATENATE 'STRING
                                                  "Specified axis is greater than 1, vectors"
                                                  " have only one axis along which to catenate."))
                                    (IF (AND AXES
                                             (> 0
                                                (- (AREF (FIRST AXES) 0)
                                                   (OF-STATE *APRIL-IDIOM*
                                                             :COUNT-FROM))))
                                        (ERROR
                                         (FORMAT NIL
                                                 "Specified axis is less than ~a."
                                                 (OF-STATE *APRIL-IDIOM*
                                                           :COUNT-FROM)))
                                        (CONCATENATE 'VECTOR ALPHA OMEGA)))
                                (IF (OR (NOT AXES)
                                        (INTEGERP (AREF (FIRST AXES) 0)))
                                    (LET* ((AXIS
                                            (IF AXES
                                                (- (AREF (FIRST AXES) 0)
                                                   (OF-STATE *APRIL-IDIOM*
                                                             :COUNT-FROM))
                                                (1-
                                                 (MAX (ARRAY-RANK ALPHA)
                                                      (ARRAY-RANK OMEGA)))))
                                           (SCALE-ALPHA
                                            (IF (NOT (IS-SINGLETON ALPHA))
                                                ALPHA
                                                (SCALE-ARRAY ALPHA OMEGA
                                                             AXIS)))
                                           (SCALE-OMEGA
                                            (IF (NOT (IS-SINGLETON OMEGA))
                                                OMEGA
                                                (SCALE-ARRAY OMEGA ALPHA
                                                             AXIS))))
                                      (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                    (LET* ((AXIS
                                            (CEILING
                                             (- (AREF (FIRST AXES) 0)
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                                           (PERMUTE-DIMS
                                            (IOTA (1+ (RANK ALPHA))))
                                           (P-ALPHA
                                            (IF (NOT (IS-SINGLETON ALPHA))
                                                (PERMUTE
                                                 (ROTATE-RIGHT AXIS
                                                               PERMUTE-DIMS)
                                                 (ARRAY-PROMOTE ALPHA))))
                                           (P-OMEGA
                                            (IF (NOT (IS-SINGLETON OMEGA))
                                                (PERMUTE
                                                 (ROTATE-RIGHT AXIS
                                                               PERMUTE-DIMS)
                                                 (ARRAY-PROMOTE OMEGA)))))
                                      (STACK AXIS
                                             (IF (IS-SINGLETON ALPHA)
                                                 (SCALE-ARRAY ALPHA P-OMEGA)
                                                 P-ALPHA)
                                             (IF (IS-SINGLETON OMEGA)
                                                 (SCALE-ARRAY OMEGA P-ALPHA)
                                                 P-OMEGA))))))
                        ⍺
                        (PROGN
                         (AREF-ELIDING ⍵
                                       (MAPCAR
                                        (LAMBDA (VECTOR)
                                          (IF VECTOR
                                              (IF (= 1 (LENGTH VECTOR))
                                                  (- (AREF VECTOR 0)
                                                     (OF-STATE *APRIL-IDIOM*
                                                               :COUNT-FROM))
                                                  (MAPCAR
                                                   (LAMBDA (ELEM)
                                                     (- ELEM
                                                        (OF-STATE *APRIL-IDIOM*
                                                                  :COUNT-FROM)))
                                                   (ARRAY-TO-LIST VECTOR)))))
                                        (LIST NIL NIL
                                              (FUNCALL #'APPLY-SCALAR-DYADIC
                                                       #'+
                                                       (IF (AND)
                                                           (FUNCALL
                                                            #'(LAMBDA (OMEGA)
                                                                (MAKE-ARRAY
                                                                 (LIST OMEGA)
                                                                 :INITIAL-CONTENTS
                                                                 (IOTA OMEGA
                                                                       :START
                                                                       (OF-STATE
                                                                        *APRIL-IDIOM*
                                                                        :COUNT-FROM))))
                                                            (IF (ARRAYP
                                                                 (FUNCALL
                                                                  #'APPLY-SCALAR-DYADIC
                                                                  #'(LAMBDA
                                                                        (
                                                                         VEX::OMEGA
                                                                         VEX::ALPHA)
                                                                      (FUNCALL
                                                                       #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                                  (VECTOR 2)
                                                                  (PROGN
                                                                   (IF (AND)
                                                                       (FUNCALL
                                                                        #'(LAMBDA
                                                                              (
                                                                               OMEGA
                                                                               ALPHA
                                                                               &OPTIONAL
                                                                               AXES)
                                                                            (IF AXES
                                                                                (LET ((ELIDED-COORDS
                                                                                       (LOOP FOR I FROM 0 TO (1-
                                                                                                              (RANK
                                                                                                               OMEGA))
                                                                                             COLLECT NIL)))
                                                                                  (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                             (LENGTH
                                                                                                              (FIRST
                                                                                                               AXES)))
                                                                                        DO (SETF (NTH
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    (FIRST
                                                                                                     AXES)
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))
                                                                                                  ELIDED-COORDS)
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     ALPHA
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))))
                                                                                  (AREF-ELIDING
                                                                                   OMEGA
                                                                                   ELIDED-COORDS))
                                                                                (LET* ((COORDS
                                                                                        (MAPCAR
                                                                                         (LAMBDA
                                                                                             (
                                                                                              COORD)
                                                                                           (-
                                                                                            COORD
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             `:COUNT-FROM)))
                                                                                         (ARRAY-TO-LIST
                                                                                          ALPHA)))
                                                                                       (FOUND
                                                                                        (APPLY
                                                                                         #'AREF
                                                                                         (CONS
                                                                                          OMEGA
                                                                                          COORDS))))
                                                                                  (IF (NOT
                                                                                       (ARRAYP
                                                                                        FOUND))
                                                                                      (VECTOR
                                                                                       FOUND)
                                                                                      FOUND))))
                                                                        (IF (AND)
                                                                            (FUNCALL
                                                                             #'(LAMBDA
                                                                                   (
                                                                                    OMEGA)
                                                                                 (LET ((OMEGA-DIMS
                                                                                        (DIMS
                                                                                         OMEGA)))
                                                                                   (MAKE-ARRAY
                                                                                    (LIST
                                                                                     (LENGTH
                                                                                      OMEGA-DIMS))
                                                                                    :INITIAL-CONTENTS
                                                                                    OMEGA-DIMS)))
                                                                             ⍵))
                                                                        (VECTOR
                                                                         3)
                                                                        (LIST))))))
                                                                (DISCLOSE
                                                                 (FUNCALL
                                                                  #'APPLY-SCALAR-DYADIC
                                                                  #'(LAMBDA
                                                                        (
                                                                         VEX::OMEGA
                                                                         VEX::ALPHA)
                                                                      (FUNCALL
                                                                       #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                                  (VECTOR 2)
                                                                  (PROGN
                                                                   (IF (AND)
                                                                       (FUNCALL
                                                                        #'(LAMBDA
                                                                              (
                                                                               OMEGA
                                                                               ALPHA
                                                                               &OPTIONAL
                                                                               AXES)
                                                                            (IF AXES
                                                                                (LET ((ELIDED-COORDS
                                                                                       (LOOP FOR I FROM 0 TO (1-
                                                                                                              (RANK
                                                                                                               OMEGA))
                                                                                             COLLECT NIL)))
                                                                                  (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                             (LENGTH
                                                                                                              (FIRST
                                                                                                               AXES)))
                                                                                        DO (SETF (NTH
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    (FIRST
                                                                                                     AXES)
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))
                                                                                                  ELIDED-COORDS)
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     ALPHA
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))))
                                                                                  (AREF-ELIDING
                                                                                   OMEGA
                                                                                   ELIDED-COORDS))
                                                                                (LET* ((COORDS
                                                                                        (MAPCAR
                                                                                         (LAMBDA
                                                                                             (
                                                                                              COORD)
                                                                                           (-
                                                                                            COORD
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             `:COUNT-FROM)))
                                                                                         (ARRAY-TO-LIST
                                                                                          ALPHA)))
                                                                                       (FOUND
                                                                                        (APPLY
                                                                                         #'AREF
                                                                                         (CONS
                                                                                          OMEGA
                                                                                          COORDS))))
                                                                                  (IF (NOT
                                                                                       (ARRAYP
                                                                                        FOUND))
                                                                                      (VECTOR
                                                                                       FOUND)
                                                                                      FOUND))))
                                                                        (IF (AND)
                                                                            (FUNCALL
                                                                             #'(LAMBDA
                                                                                   (
                                                                                    OMEGA)
                                                                                 (LET ((OMEGA-DIMS
                                                                                        (DIMS
                                                                                         OMEGA)))
                                                                                   (MAKE-ARRAY
                                                                                    (LIST
                                                                                     (LENGTH
                                                                                      OMEGA-DIMS))
                                                                                    :INITIAL-CONTENTS
                                                                                    OMEGA-DIMS)))
                                                                             ⍵))
                                                                        (VECTOR
                                                                         3)
                                                                        (LIST))))))
                                                                (FUNCALL
                                                                 #'APPLY-SCALAR-DYADIC
                                                                 #'(LAMBDA
                                                                       (
                                                                        VEX::OMEGA
                                                                        VEX::ALPHA)
                                                                     (FUNCALL
                                                                      #'-
                                                                      VEX::ALPHA
                                                                      VEX::OMEGA))
                                                                 (VECTOR 2)
                                                                 (PROGN
                                                                  (IF (AND)
                                                                      (FUNCALL
                                                                       #'(LAMBDA
                                                                             (
                                                                              OMEGA
                                                                              ALPHA
                                                                              &OPTIONAL
                                                                              AXES)
                                                                           (IF AXES
                                                                               (LET ((ELIDED-COORDS
                                                                                      (LOOP FOR I FROM 0 TO (1-
                                                                                                             (RANK
                                                                                                              OMEGA))
                                                                                            COLLECT NIL)))
                                                                                 (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                            (LENGTH
                                                                                                             (FIRST
                                                                                                              AXES)))
                                                                                       DO (SETF (NTH
                                                                                                 (-
                                                                                                  (AREF
                                                                                                   (FIRST
                                                                                                    AXES)
                                                                                                   INDEX)
                                                                                                  (OF-STATE
                                                                                                   *APRIL-IDIOM*
                                                                                                   :COUNT-FROM))
                                                                                                 ELIDED-COORDS)
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    ALPHA
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))))
                                                                                 (AREF-ELIDING
                                                                                  OMEGA
                                                                                  ELIDED-COORDS))
                                                                               (LET* ((COORDS
                                                                                       (MAPCAR
                                                                                        (LAMBDA
                                                                                            (
                                                                                             COORD)
                                                                                          (-
                                                                                           COORD
                                                                                           (OF-STATE
                                                                                            *APRIL-IDIOM*
                                                                                            `:COUNT-FROM)))
                                                                                        (ARRAY-TO-LIST
                                                                                         ALPHA)))
                                                                                      (FOUND
                                                                                       (APPLY
                                                                                        #'AREF
                                                                                        (CONS
                                                                                         OMEGA
                                                                                         COORDS))))
                                                                                 (IF (NOT
                                                                                      (ARRAYP
                                                                                       FOUND))
                                                                                     (VECTOR
                                                                                      FOUND)
                                                                                     FOUND))))
                                                                       (IF (AND)
                                                                           (FUNCALL
                                                                            #'(LAMBDA
                                                                                  (
                                                                                   OMEGA)
                                                                                (LET ((OMEGA-DIMS
                                                                                       (DIMS
                                                                                        OMEGA)))
                                                                                  (MAKE-ARRAY
                                                                                   (LIST
                                                                                    (LENGTH
                                                                                     OMEGA-DIMS))
                                                                                   :INITIAL-CONTENTS
                                                                                   OMEGA-DIMS)))
                                                                            ⍵))
                                                                       (VECTOR
                                                                        3)
                                                                       (LIST))))))))
                                                       (VECTOR 1))))))
                        (LIST)))
                   ⍺ (LIST))))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1111
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                       (IF (AND
                            (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                            (VECTORP ALPHA) (VECTORP OMEGA))
                           (IF (AND AXES
                                    (< 0
                                       (- (AREF (FIRST AXES) 0)
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM))))
                               (ERROR
                                (CONCATENATE 'STRING
                                             "Specified axis is greater than 1, vectors"
                                             " have only one axis along which to catenate."))
                               (IF (AND AXES
                                        (> 0
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                                   (ERROR
                                    (FORMAT NIL
                                            "Specified axis is less than ~a."
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                   (CONCATENATE 'VECTOR ALPHA OMEGA)))
                           (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                               (LET* ((AXIS
                                       (IF AXES
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))
                                           (1-
                                            (MAX (ARRAY-RANK ALPHA)
                                                 (ARRAY-RANK OMEGA)))))
                                      (SCALE-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           ALPHA
                                           (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                      (SCALE-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           OMEGA
                                           (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                 (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                               (LET* ((AXIS
                                       (CEILING
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                      (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                      (P-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE ALPHA))))
                                      (P-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE OMEGA)))))
                                 (STACK AXIS
                                        (IF (IS-SINGLETON ALPHA)
                                            (SCALE-ARRAY ALPHA P-OMEGA)
                                            P-ALPHA)
                                        (IF (IS-SINGLETON OMEGA)
                                            (SCALE-ARRAY OMEGA P-ALPHA)
                                            P-OMEGA))))))
                   ⍺
                   (AREF-ELIDING ⍵
                                 (MAPCAR
                                  (LAMBDA (VECTOR)
                                    (IF VECTOR
                                        (IF (= 1 (LENGTH VECTOR))
                                            (- (AREF VECTOR 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))
                                            (MAPCAR
                                             (LAMBDA (ELEM)
                                               (- ELEM
                                                  (OF-STATE *APRIL-IDIOM*
                                                            :COUNT-FROM)))
                                             (ARRAY-TO-LIST VECTOR)))))
                                  (LIST NIL
                                        (IF (AND)
                                            (FUNCALL
                                             #'(LAMBDA (OMEGA)
                                                 (MAKE-ARRAY (LIST OMEGA)
                                                             :INITIAL-CONTENTS
                                                             (IOTA OMEGA :START
                                                                   (OF-STATE
                                                                    *APRIL-IDIOM*
                                                                    :COUNT-FROM))))
                                             (IF (ARRAYP
                                                  (FUNCALL
                                                   #'APPLY-SCALAR-DYADIC
                                                   #'(LAMBDA
                                                         (VEX::OMEGA
                                                          VEX::ALPHA)
                                                       (FUNCALL #'- VEX::ALPHA
                                                                VEX::OMEGA))
                                                   (VECTOR 1)
                                                   (PROGN
                                                    (IF (AND)
                                                        (FUNCALL
                                                         #'(LAMBDA
                                                               (OMEGA ALPHA
                                                                &OPTIONAL AXES)
                                                             (IF AXES
                                                                 (LET ((ELIDED-COORDS
                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                               (RANK
                                                                                                OMEGA))
                                                                              COLLECT NIL)))
                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                              (LENGTH
                                                                                               (FIRST
                                                                                                AXES)))
                                                                         DO (SETF (NTH
                                                                                   (-
                                                                                    (AREF
                                                                                     (FIRST
                                                                                      AXES)
                                                                                     INDEX)
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     :COUNT-FROM))
                                                                                   ELIDED-COORDS)
                                                                                    (-
                                                                                     (AREF
                                                                                      ALPHA
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))))
                                                                   (AREF-ELIDING
                                                                    OMEGA
                                                                    ELIDED-COORDS))
                                                                 (LET* ((COORDS
                                                                         (MAPCAR
                                                                          (LAMBDA
                                                                              (
                                                                               COORD)
                                                                            (-
                                                                             COORD
                                                                             (OF-STATE
                                                                              *APRIL-IDIOM*
                                                                              `:COUNT-FROM)))
                                                                          (ARRAY-TO-LIST
                                                                           ALPHA)))
                                                                        (FOUND
                                                                         (APPLY
                                                                          #'AREF
                                                                          (CONS
                                                                           OMEGA
                                                                           COORDS))))
                                                                   (IF (NOT
                                                                        (ARRAYP
                                                                         FOUND))
                                                                       (VECTOR
                                                                        FOUND)
                                                                       FOUND))))
                                                         (IF (AND)
                                                             (FUNCALL
                                                              #'(LAMBDA (OMEGA)
                                                                  (LET ((OMEGA-DIMS
                                                                         (DIMS
                                                                          OMEGA)))
                                                                    (MAKE-ARRAY
                                                                     (LIST
                                                                      (LENGTH
                                                                       OMEGA-DIMS))
                                                                     :INITIAL-CONTENTS
                                                                     OMEGA-DIMS)))
                                                              ⍵))
                                                         (VECTOR 2) (LIST))))))
                                                 (DISCLOSE
                                                  (FUNCALL
                                                   #'APPLY-SCALAR-DYADIC
                                                   #'(LAMBDA
                                                         (VEX::OMEGA
                                                          VEX::ALPHA)
                                                       (FUNCALL #'- VEX::ALPHA
                                                                VEX::OMEGA))
                                                   (VECTOR 1)
                                                   (PROGN
                                                    (IF (AND)
                                                        (FUNCALL
                                                         #'(LAMBDA
                                                               (OMEGA ALPHA
                                                                &OPTIONAL AXES)
                                                             (IF AXES
                                                                 (LET ((ELIDED-COORDS
                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                               (RANK
                                                                                                OMEGA))
                                                                              COLLECT NIL)))
                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                              (LENGTH
                                                                                               (FIRST
                                                                                                AXES)))
                                                                         DO (SETF (NTH
                                                                                   (-
                                                                                    (AREF
                                                                                     (FIRST
                                                                                      AXES)
                                                                                     INDEX)
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     :COUNT-FROM))
                                                                                   ELIDED-COORDS)
                                                                                    (-
                                                                                     (AREF
                                                                                      ALPHA
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))))
                                                                   (AREF-ELIDING
                                                                    OMEGA
                                                                    ELIDED-COORDS))
                                                                 (LET* ((COORDS
                                                                         (MAPCAR
                                                                          (LAMBDA
                                                                              (
                                                                               COORD)
                                                                            (-
                                                                             COORD
                                                                             (OF-STATE
                                                                              *APRIL-IDIOM*
                                                                              `:COUNT-FROM)))
                                                                          (ARRAY-TO-LIST
                                                                           ALPHA)))
                                                                        (FOUND
                                                                         (APPLY
                                                                          #'AREF
                                                                          (CONS
                                                                           OMEGA
                                                                           COORDS))))
                                                                   (IF (NOT
                                                                        (ARRAYP
                                                                         FOUND))
                                                                       (VECTOR
                                                                        FOUND)
                                                                       FOUND))))
                                                         (IF (AND)
                                                             (FUNCALL
                                                              #'(LAMBDA (OMEGA)
                                                                  (LET ((OMEGA-DIMS
                                                                         (DIMS
                                                                          OMEGA)))
                                                                    (MAKE-ARRAY
                                                                     (LIST
                                                                      (LENGTH
                                                                       OMEGA-DIMS))
                                                                     :INITIAL-CONTENTS
                                                                     OMEGA-DIMS)))
                                                              ⍵))
                                                         (VECTOR 2) (LIST))))))
                                                 (FUNCALL #'APPLY-SCALAR-DYADIC
                                                          #'(LAMBDA
                                                                (VEX::OMEGA
                                                                 VEX::ALPHA)
                                                              (FUNCALL #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                          (VECTOR 1)
                                                          (PROGN
                                                           (IF (AND)
                                                               (FUNCALL
                                                                #'(LAMBDA
                                                                      (OMEGA
                                                                       ALPHA
                                                                       &OPTIONAL
                                                                       AXES)
                                                                    (IF AXES
                                                                        (LET ((ELIDED-COORDS
                                                                               (LOOP FOR I FROM 0 TO (1-
                                                                                                      (RANK
                                                                                                       OMEGA))
                                                                                     COLLECT NIL)))
                                                                          (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                     (LENGTH
                                                                                                      (FIRST
                                                                                                       AXES)))
                                                                                DO (SETF (NTH
                                                                                          (-
                                                                                           (AREF
                                                                                            (FIRST
                                                                                             AXES)
                                                                                            INDEX)
                                                                                           (OF-STATE
                                                                                            *APRIL-IDIOM*
                                                                                            :COUNT-FROM))
                                                                                          ELIDED-COORDS)
                                                                                           (-
                                                                                            (AREF
                                                                                             ALPHA
                                                                                             INDEX)
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             :COUNT-FROM))))
                                                                          (AREF-ELIDING
                                                                           OMEGA
                                                                           ELIDED-COORDS))
                                                                        (LET* ((COORDS
                                                                                (MAPCAR
                                                                                 (LAMBDA
                                                                                     (
                                                                                      COORD)
                                                                                   (-
                                                                                    COORD
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     `:COUNT-FROM)))
                                                                                 (ARRAY-TO-LIST
                                                                                  ALPHA)))
                                                                               (FOUND
                                                                                (APPLY
                                                                                 #'AREF
                                                                                 (CONS
                                                                                  OMEGA
                                                                                  COORDS))))
                                                                          (IF (NOT
                                                                               (ARRAYP
                                                                                FOUND))
                                                                              (VECTOR
                                                                               FOUND)
                                                                              FOUND))))
                                                                (IF (AND)
                                                                    (FUNCALL
                                                                     #'(LAMBDA
                                                                           (
                                                                            OMEGA)
                                                                         (LET ((OMEGA-DIMS
                                                                                (DIMS
                                                                                 OMEGA)))
                                                                           (MAKE-ARRAY
                                                                            (LIST
                                                                             (LENGTH
                                                                              OMEGA-DIMS))
                                                                            :INITIAL-CONTENTS
                                                                            OMEGA-DIMS)))
                                                                     ⍵))
                                                                (VECTOR 2)
                                                                (LIST)))))))))))
                   (LIST (VECTOR 2)))))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1112
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (VECTOR 0) (VECTOR 16 16 16))))
      (#:G1113
       (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
  (DISCLOSE #:G1113))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "bla")
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16))))
;       (#:G1113
;        (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
;     (LET ((#:G1018
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1019 NIL)
;           (#:G1020
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1110
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1111
;            (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;           (#:G1112
;            (IF (AND)
;                (FUNCALL #'# # #)))
;           (#:G1113 (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 #) (VECTOR 1))))
;       (APRIL::DISCLOSE #:G1113))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1110 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1111 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1112 is defined but never used.
; in:
;      LET ((#:G1018
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1019 NIL)
;       (#:G1020
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1110
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1111
;        (LAMBDA (OMEGA &OPTIONAL ALPHA)
;          (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;       (#:G1112
;        (IF (AND)
;            (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16))))
;       (#:G1113
;        (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
;     (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1110)
; 
; caught WARNING:
;   undefined variable: #:G1110

;     (FUNCALL #:G1111 #:G1112 (VECTOR 2))
; --> SB-C::%FUNCALL THE 
; ==>
;   (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1111)
; 
; caught WARNING:
;   undefined variable: #:G1111

; ==>
;   (SB-C::%FUNCALL (SB-KERNEL:%COERCE-CALLABLE-TO-FUN #:G1111) #:G1112
;                   (VECTOR 2))
; 
; caught WARNING:
;   undefined variable: #:G1112
; 
; compilation unit finished
;   Undefined variables:
;     #:G1110 #:G1111 #:G1112
;   caught 3 WARNING conditions
;   caught 6 STYLE-WARNING conditions
; Evaluation aborted on #<UNBOUND-VARIABLE G1110 {1001DF9393}>.
APRIL> (april (set (:space *workspace1*) (:compile-only)) "bla")
(LET ((#:G1018
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1019 NIL)
      (#:G1020
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 7)) ⍺))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1110
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                       (IF (AND
                            (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                            (VECTORP ALPHA) (VECTORP OMEGA))
                           (IF (AND AXES
                                    (< 0
                                       (- (AREF (FIRST AXES) 0)
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM))))
                               (ERROR
                                (CONCATENATE 'STRING
                                             "Specified axis is greater than 1, vectors"
                                             " have only one axis along which to catenate."))
                               (IF (AND AXES
                                        (> 0
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                                   (ERROR
                                    (FORMAT NIL
                                            "Specified axis is less than ~a."
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                   (CONCATENATE 'VECTOR ALPHA OMEGA)))
                           (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                               (LET* ((AXIS
                                       (IF AXES
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))
                                           (1-
                                            (MAX (ARRAY-RANK ALPHA)
                                                 (ARRAY-RANK OMEGA)))))
                                      (SCALE-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           ALPHA
                                           (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                      (SCALE-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           OMEGA
                                           (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                 (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                               (LET* ((AXIS
                                       (CEILING
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                      (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                      (P-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE ALPHA))))
                                      (P-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE OMEGA)))))
                                 (STACK AXIS
                                        (IF (IS-SINGLETON ALPHA)
                                            (SCALE-ARRAY ALPHA P-OMEGA)
                                            P-ALPHA)
                                        (IF (IS-SINGLETON OMEGA)
                                            (SCALE-ARRAY OMEGA P-ALPHA)
                                            P-OMEGA))))))
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                            (IF (AND
                                 (OR (NOT AXES)
                                     (INTEGERP (AREF (FIRST AXES) 0)))
                                 (VECTORP ALPHA) (VECTORP OMEGA))
                                (IF (AND AXES
                                         (< 0
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                                    (ERROR
                                     (CONCATENATE 'STRING
                                                  "Specified axis is greater than 1, vectors"
                                                  " have only one axis along which to catenate."))
                                    (IF (AND AXES
                                             (> 0
                                                (- (AREF (FIRST AXES) 0)
                                                   (OF-STATE *APRIL-IDIOM*
                                                             :COUNT-FROM))))
                                        (ERROR
                                         (FORMAT NIL
                                                 "Specified axis is less than ~a."
                                                 (OF-STATE *APRIL-IDIOM*
                                                           :COUNT-FROM)))
                                        (CONCATENATE 'VECTOR ALPHA OMEGA)))
                                (IF (OR (NOT AXES)
                                        (INTEGERP (AREF (FIRST AXES) 0)))
                                    (LET* ((AXIS
                                            (IF AXES
                                                (- (AREF (FIRST AXES) 0)
                                                   (OF-STATE *APRIL-IDIOM*
                                                             :COUNT-FROM))
                                                (1-
                                                 (MAX (ARRAY-RANK ALPHA)
                                                      (ARRAY-RANK OMEGA)))))
                                           (SCALE-ALPHA
                                            (IF (NOT (IS-SINGLETON ALPHA))
                                                ALPHA
                                                (SCALE-ARRAY ALPHA OMEGA
                                                             AXIS)))
                                           (SCALE-OMEGA
                                            (IF (NOT (IS-SINGLETON OMEGA))
                                                OMEGA
                                                (SCALE-ARRAY OMEGA ALPHA
                                                             AXIS))))
                                      (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                    (LET* ((AXIS
                                            (CEILING
                                             (- (AREF (FIRST AXES) 0)
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                                           (PERMUTE-DIMS
                                            (IOTA (1+ (RANK ALPHA))))
                                           (P-ALPHA
                                            (IF (NOT (IS-SINGLETON ALPHA))
                                                (PERMUTE
                                                 (ROTATE-RIGHT AXIS
                                                               PERMUTE-DIMS)
                                                 (ARRAY-PROMOTE ALPHA))))
                                           (P-OMEGA
                                            (IF (NOT (IS-SINGLETON OMEGA))
                                                (PERMUTE
                                                 (ROTATE-RIGHT AXIS
                                                               PERMUTE-DIMS)
                                                 (ARRAY-PROMOTE OMEGA)))))
                                      (STACK AXIS
                                             (IF (IS-SINGLETON ALPHA)
                                                 (SCALE-ARRAY ALPHA P-OMEGA)
                                                 P-ALPHA)
                                             (IF (IS-SINGLETON OMEGA)
                                                 (SCALE-ARRAY OMEGA P-ALPHA)
                                                 P-OMEGA))))))
                        ⍺
                        (PROGN
                         (AREF-ELIDING ⍵
                                       (MAPCAR
                                        (LAMBDA (VECTOR)
                                          (IF VECTOR
                                              (IF (= 1 (LENGTH VECTOR))
                                                  (- (AREF VECTOR 0)
                                                     (OF-STATE *APRIL-IDIOM*
                                                               :COUNT-FROM))
                                                  (MAPCAR
                                                   (LAMBDA (ELEM)
                                                     (- ELEM
                                                        (OF-STATE *APRIL-IDIOM*
                                                                  :COUNT-FROM)))
                                                   (ARRAY-TO-LIST VECTOR)))))
                                        (LIST NIL NIL
                                              (FUNCALL #'APPLY-SCALAR-DYADIC
                                                       #'+
                                                       (IF (AND)
                                                           (FUNCALL
                                                            #'(LAMBDA (OMEGA)
                                                                (MAKE-ARRAY
                                                                 (LIST OMEGA)
                                                                 :INITIAL-CONTENTS
                                                                 (IOTA OMEGA
                                                                       :START
                                                                       (OF-STATE
                                                                        *APRIL-IDIOM*
                                                                        :COUNT-FROM))))
                                                            (IF (ARRAYP
                                                                 (FUNCALL
                                                                  #'APPLY-SCALAR-DYADIC
                                                                  #'(LAMBDA
                                                                        (
                                                                         VEX::OMEGA
                                                                         VEX::ALPHA)
                                                                      (FUNCALL
                                                                       #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                                  (VECTOR 2)
                                                                  (PROGN
                                                                   (IF (AND)
                                                                       (FUNCALL
                                                                        #'(LAMBDA
                                                                              (
                                                                               OMEGA
                                                                               ALPHA
                                                                               &OPTIONAL
                                                                               AXES)
                                                                            (IF AXES
                                                                                (LET ((ELIDED-COORDS
                                                                                       (LOOP FOR I FROM 0 TO (1-
                                                                                                              (RANK
                                                                                                               OMEGA))
                                                                                             COLLECT NIL)))
                                                                                  (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                             (LENGTH
                                                                                                              (FIRST
                                                                                                               AXES)))
                                                                                        DO (SETF (NTH
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    (FIRST
                                                                                                     AXES)
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))
                                                                                                  ELIDED-COORDS)
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     ALPHA
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))))
                                                                                  (AREF-ELIDING
                                                                                   OMEGA
                                                                                   ELIDED-COORDS))
                                                                                (LET* ((COORDS
                                                                                        (MAPCAR
                                                                                         (LAMBDA
                                                                                             (
                                                                                              COORD)
                                                                                           (-
                                                                                            COORD
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             `:COUNT-FROM)))
                                                                                         (ARRAY-TO-LIST
                                                                                          ALPHA)))
                                                                                       (FOUND
                                                                                        (APPLY
                                                                                         #'AREF
                                                                                         (CONS
                                                                                          OMEGA
                                                                                          COORDS))))
                                                                                  (IF (NOT
                                                                                       (ARRAYP
                                                                                        FOUND))
                                                                                      (VECTOR
                                                                                       FOUND)
                                                                                      FOUND))))
                                                                        (IF (AND)
                                                                            (FUNCALL
                                                                             #'(LAMBDA
                                                                                   (
                                                                                    OMEGA)
                                                                                 (LET ((OMEGA-DIMS
                                                                                        (DIMS
                                                                                         OMEGA)))
                                                                                   (MAKE-ARRAY
                                                                                    (LIST
                                                                                     (LENGTH
                                                                                      OMEGA-DIMS))
                                                                                    :INITIAL-CONTENTS
                                                                                    OMEGA-DIMS)))
                                                                             ⍵))
                                                                        (VECTOR
                                                                         3)
                                                                        (LIST))))))
                                                                (DISCLOSE
                                                                 (FUNCALL
                                                                  #'APPLY-SCALAR-DYADIC
                                                                  #'(LAMBDA
                                                                        (
                                                                         VEX::OMEGA
                                                                         VEX::ALPHA)
                                                                      (FUNCALL
                                                                       #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                                  (VECTOR 2)
                                                                  (PROGN
                                                                   (IF (AND)
                                                                       (FUNCALL
                                                                        #'(LAMBDA
                                                                              (
                                                                               OMEGA
                                                                               ALPHA
                                                                               &OPTIONAL
                                                                               AXES)
                                                                            (IF AXES
                                                                                (LET ((ELIDED-COORDS
                                                                                       (LOOP FOR I FROM 0 TO (1-
                                                                                                              (RANK
                                                                                                               OMEGA))
                                                                                             COLLECT NIL)))
                                                                                  (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                             (LENGTH
                                                                                                              (FIRST
                                                                                                               AXES)))
                                                                                        DO (SETF (NTH
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    (FIRST
                                                                                                     AXES)
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))
                                                                                                  ELIDED-COORDS)
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     ALPHA
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))))
                                                                                  (AREF-ELIDING
                                                                                   OMEGA
                                                                                   ELIDED-COORDS))
                                                                                (LET* ((COORDS
                                                                                        (MAPCAR
                                                                                         (LAMBDA
                                                                                             (
                                                                                              COORD)
                                                                                           (-
                                                                                            COORD
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             `:COUNT-FROM)))
                                                                                         (ARRAY-TO-LIST
                                                                                          ALPHA)))
                                                                                       (FOUND
                                                                                        (APPLY
                                                                                         #'AREF
                                                                                         (CONS
                                                                                          OMEGA
                                                                                          COORDS))))
                                                                                  (IF (NOT
                                                                                       (ARRAYP
                                                                                        FOUND))
                                                                                      (VECTOR
                                                                                       FOUND)
                                                                                      FOUND))))
                                                                        (IF (AND)
                                                                            (FUNCALL
                                                                             #'(LAMBDA
                                                                                   (
                                                                                    OMEGA)
                                                                                 (LET ((OMEGA-DIMS
                                                                                        (DIMS
                                                                                         OMEGA)))
                                                                                   (MAKE-ARRAY
                                                                                    (LIST
                                                                                     (LENGTH
                                                                                      OMEGA-DIMS))
                                                                                    :INITIAL-CONTENTS
                                                                                    OMEGA-DIMS)))
                                                                             ⍵))
                                                                        (VECTOR
                                                                         3)
                                                                        (LIST))))))
                                                                (FUNCALL
                                                                 #'APPLY-SCALAR-DYADIC
                                                                 #'(LAMBDA
                                                                       (
                                                                        VEX::OMEGA
                                                                        VEX::ALPHA)
                                                                     (FUNCALL
                                                                      #'-
                                                                      VEX::ALPHA
                                                                      VEX::OMEGA))
                                                                 (VECTOR 2)
                                                                 (PROGN
                                                                  (IF (AND)
                                                                      (FUNCALL
                                                                       #'(LAMBDA
                                                                             (
                                                                              OMEGA
                                                                              ALPHA
                                                                              &OPTIONAL
                                                                              AXES)
                                                                           (IF AXES
                                                                               (LET ((ELIDED-COORDS
                                                                                      (LOOP FOR I FROM 0 TO (1-
                                                                                                             (RANK
                                                                                                              OMEGA))
                                                                                            COLLECT NIL)))
                                                                                 (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                            (LENGTH
                                                                                                             (FIRST
                                                                                                              AXES)))
                                                                                       DO (SETF (NTH
                                                                                                 (-
                                                                                                  (AREF
                                                                                                   (FIRST
                                                                                                    AXES)
                                                                                                   INDEX)
                                                                                                  (OF-STATE
                                                                                                   *APRIL-IDIOM*
                                                                                                   :COUNT-FROM))
                                                                                                 ELIDED-COORDS)
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    ALPHA
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))))
                                                                                 (AREF-ELIDING
                                                                                  OMEGA
                                                                                  ELIDED-COORDS))
                                                                               (LET* ((COORDS
                                                                                       (MAPCAR
                                                                                        (LAMBDA
                                                                                            (
                                                                                             COORD)
                                                                                          (-
                                                                                           COORD
                                                                                           (OF-STATE
                                                                                            *APRIL-IDIOM*
                                                                                            `:COUNT-FROM)))
                                                                                        (ARRAY-TO-LIST
                                                                                         ALPHA)))
                                                                                      (FOUND
                                                                                       (APPLY
                                                                                        #'AREF
                                                                                        (CONS
                                                                                         OMEGA
                                                                                         COORDS))))
                                                                                 (IF (NOT
                                                                                      (ARRAYP
                                                                                       FOUND))
                                                                                     (VECTOR
                                                                                      FOUND)
                                                                                     FOUND))))
                                                                       (IF (AND)
                                                                           (FUNCALL
                                                                            #'(LAMBDA
                                                                                  (
                                                                                   OMEGA)
                                                                                (LET ((OMEGA-DIMS
                                                                                       (DIMS
                                                                                        OMEGA)))
                                                                                  (MAKE-ARRAY
                                                                                   (LIST
                                                                                    (LENGTH
                                                                                     OMEGA-DIMS))
                                                                                   :INITIAL-CONTENTS
                                                                                   OMEGA-DIMS)))
                                                                            ⍵))
                                                                       (VECTOR
                                                                        3)
                                                                       (LIST))))))))
                                                       (VECTOR 1))))))
                        (LIST)))
                   ⍺ (LIST))))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1111
       (LAMBDA (OMEGA &OPTIONAL ALPHA)
         (FUNCALL
          (LAMBDA (⍵ &OPTIONAL ⍺)
            (DECLARE (IGNORABLE ⍺))
            (PROGN
             (DISCLOSE
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                       (IF (AND
                            (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                            (VECTORP ALPHA) (VECTORP OMEGA))
                           (IF (AND AXES
                                    (< 0
                                       (- (AREF (FIRST AXES) 0)
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM))))
                               (ERROR
                                (CONCATENATE 'STRING
                                             "Specified axis is greater than 1, vectors"
                                             " have only one axis along which to catenate."))
                               (IF (AND AXES
                                        (> 0
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                                   (ERROR
                                    (FORMAT NIL
                                            "Specified axis is less than ~a."
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                   (CONCATENATE 'VECTOR ALPHA OMEGA)))
                           (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                               (LET* ((AXIS
                                       (IF AXES
                                           (- (AREF (FIRST AXES) 0)
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))
                                           (1-
                                            (MAX (ARRAY-RANK ALPHA)
                                                 (ARRAY-RANK OMEGA)))))
                                      (SCALE-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           ALPHA
                                           (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                      (SCALE-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           OMEGA
                                           (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                 (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                               (LET* ((AXIS
                                       (CEILING
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                      (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                      (P-ALPHA
                                       (IF (NOT (IS-SINGLETON ALPHA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE ALPHA))))
                                      (P-OMEGA
                                       (IF (NOT (IS-SINGLETON OMEGA))
                                           (PERMUTE
                                            (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                            (ARRAY-PROMOTE OMEGA)))))
                                 (STACK AXIS
                                        (IF (IS-SINGLETON ALPHA)
                                            (SCALE-ARRAY ALPHA P-OMEGA)
                                            P-ALPHA)
                                        (IF (IS-SINGLETON OMEGA)
                                            (SCALE-ARRAY OMEGA P-ALPHA)
                                            P-OMEGA))))))
                   ⍺
                   (AREF-ELIDING ⍵
                                 (MAPCAR
                                  (LAMBDA (VECTOR)
                                    (IF VECTOR
                                        (IF (= 1 (LENGTH VECTOR))
                                            (- (AREF VECTOR 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))
                                            (MAPCAR
                                             (LAMBDA (ELEM)
                                               (- ELEM
                                                  (OF-STATE *APRIL-IDIOM*
                                                            :COUNT-FROM)))
                                             (ARRAY-TO-LIST VECTOR)))))
                                  (LIST NIL
                                        (IF (AND)
                                            (FUNCALL
                                             #'(LAMBDA (OMEGA)
                                                 (MAKE-ARRAY (LIST OMEGA)
                                                             :INITIAL-CONTENTS
                                                             (IOTA OMEGA :START
                                                                   (OF-STATE
                                                                    *APRIL-IDIOM*
                                                                    :COUNT-FROM))))
                                             (IF (ARRAYP
                                                  (FUNCALL
                                                   #'APPLY-SCALAR-DYADIC
                                                   #'(LAMBDA
                                                         (VEX::OMEGA
                                                          VEX::ALPHA)
                                                       (FUNCALL #'- VEX::ALPHA
                                                                VEX::OMEGA))
                                                   (VECTOR 1)
                                                   (PROGN
                                                    (IF (AND)
                                                        (FUNCALL
                                                         #'(LAMBDA
                                                               (OMEGA ALPHA
                                                                &OPTIONAL AXES)
                                                             (IF AXES
                                                                 (LET ((ELIDED-COORDS
                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                               (RANK
                                                                                                OMEGA))
                                                                              COLLECT NIL)))
                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                              (LENGTH
                                                                                               (FIRST
                                                                                                AXES)))
                                                                         DO (SETF (NTH
                                                                                   (-
                                                                                    (AREF
                                                                                     (FIRST
                                                                                      AXES)
                                                                                     INDEX)
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     :COUNT-FROM))
                                                                                   ELIDED-COORDS)
                                                                                    (-
                                                                                     (AREF
                                                                                      ALPHA
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))))
                                                                   (AREF-ELIDING
                                                                    OMEGA
                                                                    ELIDED-COORDS))
                                                                 (LET* ((COORDS
                                                                         (MAPCAR
                                                                          (LAMBDA
                                                                              (
                                                                               COORD)
                                                                            (-
                                                                             COORD
                                                                             (OF-STATE
                                                                              *APRIL-IDIOM*
                                                                              `:COUNT-FROM)))
                                                                          (ARRAY-TO-LIST
                                                                           ALPHA)))
                                                                        (FOUND
                                                                         (APPLY
                                                                          #'AREF
                                                                          (CONS
                                                                           OMEGA
                                                                           COORDS))))
                                                                   (IF (NOT
                                                                        (ARRAYP
                                                                         FOUND))
                                                                       (VECTOR
                                                                        FOUND)
                                                                       FOUND))))
                                                         (IF (AND)
                                                             (FUNCALL
                                                              #'(LAMBDA (OMEGA)
                                                                  (LET ((OMEGA-DIMS
                                                                         (DIMS
                                                                          OMEGA)))
                                                                    (MAKE-ARRAY
                                                                     (LIST
                                                                      (LENGTH
                                                                       OMEGA-DIMS))
                                                                     :INITIAL-CONTENTS
                                                                     OMEGA-DIMS)))
                                                              ⍵))
                                                         (VECTOR 2) (LIST))))))
                                                 (DISCLOSE
                                                  (FUNCALL
                                                   #'APPLY-SCALAR-DYADIC
                                                   #'(LAMBDA
                                                         (VEX::OMEGA
                                                          VEX::ALPHA)
                                                       (FUNCALL #'- VEX::ALPHA
                                                                VEX::OMEGA))
                                                   (VECTOR 1)
                                                   (PROGN
                                                    (IF (AND)
                                                        (FUNCALL
                                                         #'(LAMBDA
                                                               (OMEGA ALPHA
                                                                &OPTIONAL AXES)
                                                             (IF AXES
                                                                 (LET ((ELIDED-COORDS
                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                               (RANK
                                                                                                OMEGA))
                                                                              COLLECT NIL)))
                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                              (LENGTH
                                                                                               (FIRST
                                                                                                AXES)))
                                                                         DO (SETF (NTH
                                                                                   (-
                                                                                    (AREF
                                                                                     (FIRST
                                                                                      AXES)
                                                                                     INDEX)
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     :COUNT-FROM))
                                                                                   ELIDED-COORDS)
                                                                                    (-
                                                                                     (AREF
                                                                                      ALPHA
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))))
                                                                   (AREF-ELIDING
                                                                    OMEGA
                                                                    ELIDED-COORDS))
                                                                 (LET* ((COORDS
                                                                         (MAPCAR
                                                                          (LAMBDA
                                                                              (
                                                                               COORD)
                                                                            (-
                                                                             COORD
                                                                             (OF-STATE
                                                                              *APRIL-IDIOM*
                                                                              `:COUNT-FROM)))
                                                                          (ARRAY-TO-LIST
                                                                           ALPHA)))
                                                                        (FOUND
                                                                         (APPLY
                                                                          #'AREF
                                                                          (CONS
                                                                           OMEGA
                                                                           COORDS))))
                                                                   (IF (NOT
                                                                        (ARRAYP
                                                                         FOUND))
                                                                       (VECTOR
                                                                        FOUND)
                                                                       FOUND))))
                                                         (IF (AND)
                                                             (FUNCALL
                                                              #'(LAMBDA (OMEGA)
                                                                  (LET ((OMEGA-DIMS
                                                                         (DIMS
                                                                          OMEGA)))
                                                                    (MAKE-ARRAY
                                                                     (LIST
                                                                      (LENGTH
                                                                       OMEGA-DIMS))
                                                                     :INITIAL-CONTENTS
                                                                     OMEGA-DIMS)))
                                                              ⍵))
                                                         (VECTOR 2) (LIST))))))
                                                 (FUNCALL #'APPLY-SCALAR-DYADIC
                                                          #'(LAMBDA
                                                                (VEX::OMEGA
                                                                 VEX::ALPHA)
                                                              (FUNCALL #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                          (VECTOR 1)
                                                          (PROGN
                                                           (IF (AND)
                                                               (FUNCALL
                                                                #'(LAMBDA
                                                                      (OMEGA
                                                                       ALPHA
                                                                       &OPTIONAL
                                                                       AXES)
                                                                    (IF AXES
                                                                        (LET ((ELIDED-COORDS
                                                                               (LOOP FOR I FROM 0 TO (1-
                                                                                                      (RANK
                                                                                                       OMEGA))
                                                                                     COLLECT NIL)))
                                                                          (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                     (LENGTH
                                                                                                      (FIRST
                                                                                                       AXES)))
                                                                                DO (SETF (NTH
                                                                                          (-
                                                                                           (AREF
                                                                                            (FIRST
                                                                                             AXES)
                                                                                            INDEX)
                                                                                           (OF-STATE
                                                                                            *APRIL-IDIOM*
                                                                                            :COUNT-FROM))
                                                                                          ELIDED-COORDS)
                                                                                           (-
                                                                                            (AREF
                                                                                             ALPHA
                                                                                             INDEX)
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             :COUNT-FROM))))
                                                                          (AREF-ELIDING
                                                                           OMEGA
                                                                           ELIDED-COORDS))
                                                                        (LET* ((COORDS
                                                                                (MAPCAR
                                                                                 (LAMBDA
                                                                                     (
                                                                                      COORD)
                                                                                   (-
                                                                                    COORD
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     `:COUNT-FROM)))
                                                                                 (ARRAY-TO-LIST
                                                                                  ALPHA)))
                                                                               (FOUND
                                                                                (APPLY
                                                                                 #'AREF
                                                                                 (CONS
                                                                                  OMEGA
                                                                                  COORDS))))
                                                                          (IF (NOT
                                                                               (ARRAYP
                                                                                FOUND))
                                                                              (VECTOR
                                                                               FOUND)
                                                                              FOUND))))
                                                                (IF (AND)
                                                                    (FUNCALL
                                                                     #'(LAMBDA
                                                                           (
                                                                            OMEGA)
                                                                         (LET ((OMEGA-DIMS
                                                                                (DIMS
                                                                                 OMEGA)))
                                                                           (MAKE-ARRAY
                                                                            (LIST
                                                                             (LENGTH
                                                                              OMEGA-DIMS))
                                                                            :INITIAL-CONTENTS
                                                                            OMEGA-DIMS)))
                                                                     ⍵))
                                                                (VECTOR 2)
                                                                (LIST)))))))))))
                   (LIST (VECTOR 2)))))))
          (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
      (#:G1112
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (VECTOR 0) (VECTOR 16 16 16))))
      (#:G1113
       (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
  (DISCLOSE #:G1113))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:52:44 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.232
APRIL> (april (set (:space *workspace1*) (:compile-only)) "bla")
(LET* ((#:G1018
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                        (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) ⍺))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1019 NIL)
       (#:G1020
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                        (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 7)) ⍺))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1110
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (IF (AND)
                   (FUNCALL
                    #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                        (IF (AND
                             (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                             (VECTORP ALPHA) (VECTORP OMEGA))
                            (IF (AND AXES
                                     (< 0
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                (ERROR
                                 (CONCATENATE 'STRING
                                              "Specified axis is greater than 1, vectors"
                                              " have only one axis along which to catenate."))
                                (IF (AND AXES
                                         (> 0
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                                    (ERROR
                                     (FORMAT NIL
                                             "Specified axis is less than ~a."
                                             (OF-STATE *APRIL-IDIOM*
                                                       :COUNT-FROM)))
                                    (CONCATENATE 'VECTOR ALPHA OMEGA)))
                            (IF (OR (NOT AXES)
                                    (INTEGERP (AREF (FIRST AXES) 0)))
                                (LET* ((AXIS
                                        (IF AXES
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))
                                            (1-
                                             (MAX (ARRAY-RANK ALPHA)
                                                  (ARRAY-RANK OMEGA)))))
                                       (SCALE-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            ALPHA
                                            (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                       (SCALE-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            OMEGA
                                            (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                  (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                (LET* ((AXIS
                                        (CEILING
                                         (- (AREF (FIRST AXES) 0)
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM))))
                                       (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                       (P-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE ALPHA))))
                                       (P-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE OMEGA)))))
                                  (STACK AXIS
                                         (IF (IS-SINGLETON ALPHA)
                                             (SCALE-ARRAY ALPHA P-OMEGA)
                                             P-ALPHA)
                                         (IF (IS-SINGLETON OMEGA)
                                             (SCALE-ARRAY OMEGA P-ALPHA)
                                             P-OMEGA))))))
                    (IF (AND)
                        (FUNCALL
                         #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                             (IF (AND
                                  (OR (NOT AXES)
                                      (INTEGERP (AREF (FIRST AXES) 0)))
                                  (VECTORP ALPHA) (VECTORP OMEGA))
                                 (IF (AND AXES
                                          (< 0
                                             (- (AREF (FIRST AXES) 0)
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                                     (ERROR
                                      (CONCATENATE 'STRING
                                                   "Specified axis is greater than 1, vectors"
                                                   " have only one axis along which to catenate."))
                                     (IF (AND AXES
                                              (> 0
                                                 (- (AREF (FIRST AXES) 0)
                                                    (OF-STATE *APRIL-IDIOM*
                                                              :COUNT-FROM))))
                                         (ERROR
                                          (FORMAT NIL
                                                  "Specified axis is less than ~a."
                                                  (OF-STATE *APRIL-IDIOM*
                                                            :COUNT-FROM)))
                                         (CONCATENATE 'VECTOR ALPHA OMEGA)))
                                 (IF (OR (NOT AXES)
                                         (INTEGERP (AREF (FIRST AXES) 0)))
                                     (LET* ((AXIS
                                             (IF AXES
                                                 (- (AREF (FIRST AXES) 0)
                                                    (OF-STATE *APRIL-IDIOM*
                                                              :COUNT-FROM))
                                                 (1-
                                                  (MAX (ARRAY-RANK ALPHA)
                                                       (ARRAY-RANK OMEGA)))))
                                            (SCALE-ALPHA
                                             (IF (NOT (IS-SINGLETON ALPHA))
                                                 ALPHA
                                                 (SCALE-ARRAY ALPHA OMEGA
                                                              AXIS)))
                                            (SCALE-OMEGA
                                             (IF (NOT (IS-SINGLETON OMEGA))
                                                 OMEGA
                                                 (SCALE-ARRAY OMEGA ALPHA
                                                              AXIS))))
                                       (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                     (LET* ((AXIS
                                             (CEILING
                                              (- (AREF (FIRST AXES) 0)
                                                 (OF-STATE *APRIL-IDIOM*
                                                           :COUNT-FROM))))
                                            (PERMUTE-DIMS
                                             (IOTA (1+ (RANK ALPHA))))
                                            (P-ALPHA
                                             (IF (NOT (IS-SINGLETON ALPHA))
                                                 (PERMUTE
                                                  (ROTATE-RIGHT AXIS
                                                                PERMUTE-DIMS)
                                                  (ARRAY-PROMOTE ALPHA))))
                                            (P-OMEGA
                                             (IF (NOT (IS-SINGLETON OMEGA))
                                                 (PERMUTE
                                                  (ROTATE-RIGHT AXIS
                                                                PERMUTE-DIMS)
                                                  (ARRAY-PROMOTE OMEGA)))))
                                       (STACK AXIS
                                              (IF (IS-SINGLETON ALPHA)
                                                  (SCALE-ARRAY ALPHA P-OMEGA)
                                                  P-ALPHA)
                                              (IF (IS-SINGLETON OMEGA)
                                                  (SCALE-ARRAY OMEGA P-ALPHA)
                                                  P-OMEGA))))))
                         ⍺
                         (PROGN
                          (AREF-ELIDING ⍵
                                        (MAPCAR
                                         (LAMBDA (VECTOR)
                                           (IF VECTOR
                                               (IF (= 1 (LENGTH VECTOR))
                                                   (- (AREF VECTOR 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM))
                                                   (MAPCAR
                                                    (LAMBDA (ELEM)
                                                      (- ELEM
                                                         (OF-STATE
                                                          *APRIL-IDIOM*
                                                          :COUNT-FROM)))
                                                    (ARRAY-TO-LIST VECTOR)))))
                                         (LIST NIL NIL
                                               (FUNCALL #'APPLY-SCALAR-DYADIC
                                                        #'+
                                                        (IF (AND)
                                                            (FUNCALL
                                                             #'(LAMBDA (OMEGA)
                                                                 (MAKE-ARRAY
                                                                  (LIST OMEGA)
                                                                  :INITIAL-CONTENTS
                                                                  (IOTA OMEGA
                                                                        :START
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM))))
                                                             (IF (ARRAYP
                                                                  (FUNCALL
                                                                   #'APPLY-SCALAR-DYADIC
                                                                   #'(LAMBDA
                                                                         (
                                                                          VEX::OMEGA
                                                                          VEX::ALPHA)
                                                                       (FUNCALL
                                                                        #'-
                                                                        VEX::ALPHA
                                                                        VEX::OMEGA))
                                                                   (VECTOR 2)
                                                                   (PROGN
                                                                    (IF (AND)
                                                                        (FUNCALL
                                                                         #'(LAMBDA
                                                                               (
                                                                                OMEGA
                                                                                ALPHA
                                                                                &OPTIONAL
                                                                                AXES)
                                                                             (IF AXES
                                                                                 (LET ((ELIDED-COORDS
                                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                                               (RANK
                                                                                                                OMEGA))
                                                                                              COLLECT NIL)))
                                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                              (LENGTH
                                                                                                               (FIRST
                                                                                                                AXES)))
                                                                                         DO (SETF (NTH
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     (FIRST
                                                                                                      AXES)
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))
                                                                                                   ELIDED-COORDS)
                                                                                                    (-
                                                                                                     (AREF
                                                                                                      ALPHA
                                                                                                      INDEX)
                                                                                                     (OF-STATE
                                                                                                      *APRIL-IDIOM*
                                                                                                      :COUNT-FROM))))
                                                                                   (AREF-ELIDING
                                                                                    OMEGA
                                                                                    ELIDED-COORDS))
                                                                                 (LET* ((COORDS
                                                                                         (MAPCAR
                                                                                          (LAMBDA
                                                                                              (
                                                                                               COORD)
                                                                                            (-
                                                                                             COORD
                                                                                             (OF-STATE
                                                                                              *APRIL-IDIOM*
                                                                                              `:COUNT-FROM)))
                                                                                          (ARRAY-TO-LIST
                                                                                           ALPHA)))
                                                                                        (FOUND
                                                                                         (APPLY
                                                                                          #'AREF
                                                                                          (CONS
                                                                                           OMEGA
                                                                                           COORDS))))
                                                                                   (IF (NOT
                                                                                        (ARRAYP
                                                                                         FOUND))
                                                                                       (VECTOR
                                                                                        FOUND)
                                                                                       FOUND))))
                                                                         (IF (AND)
                                                                             (FUNCALL
                                                                              #'(LAMBDA
                                                                                    (
                                                                                     OMEGA)
                                                                                  (LET ((OMEGA-DIMS
                                                                                         (DIMS
                                                                                          OMEGA)))
                                                                                    (MAKE-ARRAY
                                                                                     (LIST
                                                                                      (LENGTH
                                                                                       OMEGA-DIMS))
                                                                                     :INITIAL-CONTENTS
                                                                                     OMEGA-DIMS)))
                                                                              ⍵))
                                                                         (VECTOR
                                                                          3)
                                                                         (LIST))))))
                                                                 (DISCLOSE
                                                                  (FUNCALL
                                                                   #'APPLY-SCALAR-DYADIC
                                                                   #'(LAMBDA
                                                                         (
                                                                          VEX::OMEGA
                                                                          VEX::ALPHA)
                                                                       (FUNCALL
                                                                        #'-
                                                                        VEX::ALPHA
                                                                        VEX::OMEGA))
                                                                   (VECTOR 2)
                                                                   (PROGN
                                                                    (IF (AND)
                                                                        (FUNCALL
                                                                         #'(LAMBDA
                                                                               (
                                                                                OMEGA
                                                                                ALPHA
                                                                                &OPTIONAL
                                                                                AXES)
                                                                             (IF AXES
                                                                                 (LET ((ELIDED-COORDS
                                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                                               (RANK
                                                                                                                OMEGA))
                                                                                              COLLECT NIL)))
                                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                              (LENGTH
                                                                                                               (FIRST
                                                                                                                AXES)))
                                                                                         DO (SETF (NTH
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     (FIRST
                                                                                                      AXES)
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))
                                                                                                   ELIDED-COORDS)
                                                                                                    (-
                                                                                                     (AREF
                                                                                                      ALPHA
                                                                                                      INDEX)
                                                                                                     (OF-STATE
                                                                                                      *APRIL-IDIOM*
                                                                                                      :COUNT-FROM))))
                                                                                   (AREF-ELIDING
                                                                                    OMEGA
                                                                                    ELIDED-COORDS))
                                                                                 (LET* ((COORDS
                                                                                         (MAPCAR
                                                                                          (LAMBDA
                                                                                              (
                                                                                               COORD)
                                                                                            (-
                                                                                             COORD
                                                                                             (OF-STATE
                                                                                              *APRIL-IDIOM*
                                                                                              `:COUNT-FROM)))
                                                                                          (ARRAY-TO-LIST
                                                                                           ALPHA)))
                                                                                        (FOUND
                                                                                         (APPLY
                                                                                          #'AREF
                                                                                          (CONS
                                                                                           OMEGA
                                                                                           COORDS))))
                                                                                   (IF (NOT
                                                                                        (ARRAYP
                                                                                         FOUND))
                                                                                       (VECTOR
                                                                                        FOUND)
                                                                                       FOUND))))
                                                                         (IF (AND)
                                                                             (FUNCALL
                                                                              #'(LAMBDA
                                                                                    (
                                                                                     OMEGA)
                                                                                  (LET ((OMEGA-DIMS
                                                                                         (DIMS
                                                                                          OMEGA)))
                                                                                    (MAKE-ARRAY
                                                                                     (LIST
                                                                                      (LENGTH
                                                                                       OMEGA-DIMS))
                                                                                     :INITIAL-CONTENTS
                                                                                     OMEGA-DIMS)))
                                                                              ⍵))
                                                                         (VECTOR
                                                                          3)
                                                                         (LIST))))))
                                                                 (FUNCALL
                                                                  #'APPLY-SCALAR-DYADIC
                                                                  #'(LAMBDA
                                                                        (
                                                                         VEX::OMEGA
                                                                         VEX::ALPHA)
                                                                      (FUNCALL
                                                                       #'-
                                                                       VEX::ALPHA
                                                                       VEX::OMEGA))
                                                                  (VECTOR 2)
                                                                  (PROGN
                                                                   (IF (AND)
                                                                       (FUNCALL
                                                                        #'(LAMBDA
                                                                              (
                                                                               OMEGA
                                                                               ALPHA
                                                                               &OPTIONAL
                                                                               AXES)
                                                                            (IF AXES
                                                                                (LET ((ELIDED-COORDS
                                                                                       (LOOP FOR I FROM 0 TO (1-
                                                                                                              (RANK
                                                                                                               OMEGA))
                                                                                             COLLECT NIL)))
                                                                                  (LOOP FOR INDEX FROM 0 TO (1-
                                                                                                             (LENGTH
                                                                                                              (FIRST
                                                                                                               AXES)))
                                                                                        DO (SETF (NTH
                                                                                                  (-
                                                                                                   (AREF
                                                                                                    (FIRST
                                                                                                     AXES)
                                                                                                    INDEX)
                                                                                                   (OF-STATE
                                                                                                    *APRIL-IDIOM*
                                                                                                    :COUNT-FROM))
                                                                                                  ELIDED-COORDS)
                                                                                                   (-
                                                                                                    (AREF
                                                                                                     ALPHA
                                                                                                     INDEX)
                                                                                                    (OF-STATE
                                                                                                     *APRIL-IDIOM*
                                                                                                     :COUNT-FROM))))
                                                                                  (AREF-ELIDING
                                                                                   OMEGA
                                                                                   ELIDED-COORDS))
                                                                                (LET* ((COORDS
                                                                                        (MAPCAR
                                                                                         (LAMBDA
                                                                                             (
                                                                                              COORD)
                                                                                           (-
                                                                                            COORD
                                                                                            (OF-STATE
                                                                                             *APRIL-IDIOM*
                                                                                             `:COUNT-FROM)))
                                                                                         (ARRAY-TO-LIST
                                                                                          ALPHA)))
                                                                                       (FOUND
                                                                                        (APPLY
                                                                                         #'AREF
                                                                                         (CONS
                                                                                          OMEGA
                                                                                          COORDS))))
                                                                                  (IF (NOT
                                                                                       (ARRAYP
                                                                                        FOUND))
                                                                                      (VECTOR
                                                                                       FOUND)
                                                                                      FOUND))))
                                                                        (IF (AND)
                                                                            (FUNCALL
                                                                             #'(LAMBDA
                                                                                   (
                                                                                    OMEGA)
                                                                                 (LET ((OMEGA-DIMS
                                                                                        (DIMS
                                                                                         OMEGA)))
                                                                                   (MAKE-ARRAY
                                                                                    (LIST
                                                                                     (LENGTH
                                                                                      OMEGA-DIMS))
                                                                                    :INITIAL-CONTENTS
                                                                                    OMEGA-DIMS)))
                                                                             ⍵))
                                                                        (VECTOR
                                                                         3)
                                                                        (LIST))))))))
                                                        (VECTOR 1))))))
                         (LIST)))
                    ⍺ (LIST))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1111
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (IF (AND)
                   (FUNCALL
                    #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                        (IF (AND
                             (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                             (VECTORP ALPHA) (VECTORP OMEGA))
                            (IF (AND AXES
                                     (< 0
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                (ERROR
                                 (CONCATENATE 'STRING
                                              "Specified axis is greater than 1, vectors"
                                              " have only one axis along which to catenate."))
                                (IF (AND AXES
                                         (> 0
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                                    (ERROR
                                     (FORMAT NIL
                                             "Specified axis is less than ~a."
                                             (OF-STATE *APRIL-IDIOM*
                                                       :COUNT-FROM)))
                                    (CONCATENATE 'VECTOR ALPHA OMEGA)))
                            (IF (OR (NOT AXES)
                                    (INTEGERP (AREF (FIRST AXES) 0)))
                                (LET* ((AXIS
                                        (IF AXES
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))
                                            (1-
                                             (MAX (ARRAY-RANK ALPHA)
                                                  (ARRAY-RANK OMEGA)))))
                                       (SCALE-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            ALPHA
                                            (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                       (SCALE-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            OMEGA
                                            (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                  (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                (LET* ((AXIS
                                        (CEILING
                                         (- (AREF (FIRST AXES) 0)
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM))))
                                       (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                       (P-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE ALPHA))))
                                       (P-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE OMEGA)))))
                                  (STACK AXIS
                                         (IF (IS-SINGLETON ALPHA)
                                             (SCALE-ARRAY ALPHA P-OMEGA)
                                             P-ALPHA)
                                         (IF (IS-SINGLETON OMEGA)
                                             (SCALE-ARRAY OMEGA P-ALPHA)
                                             P-OMEGA))))))
                    ⍺
                    (AREF-ELIDING ⍵
                                  (MAPCAR
                                   (LAMBDA (VECTOR)
                                     (IF VECTOR
                                         (IF (= 1 (LENGTH VECTOR))
                                             (- (AREF VECTOR 0)
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))
                                             (MAPCAR
                                              (LAMBDA (ELEM)
                                                (- ELEM
                                                   (OF-STATE *APRIL-IDIOM*
                                                             :COUNT-FROM)))
                                              (ARRAY-TO-LIST VECTOR)))))
                                   (LIST NIL
                                         (IF (AND)
                                             (FUNCALL
                                              #'(LAMBDA (OMEGA)
                                                  (MAKE-ARRAY (LIST OMEGA)
                                                              :INITIAL-CONTENTS
                                                              (IOTA OMEGA
                                                                    :START
                                                                    (OF-STATE
                                                                     *APRIL-IDIOM*
                                                                     :COUNT-FROM))))
                                              (IF (ARRAYP
                                                   (FUNCALL
                                                    #'APPLY-SCALAR-DYADIC
                                                    #'(LAMBDA
                                                          (VEX::OMEGA
                                                           VEX::ALPHA)
                                                        (FUNCALL #'- VEX::ALPHA
                                                                 VEX::OMEGA))
                                                    (VECTOR 1)
                                                    (PROGN
                                                     (IF (AND)
                                                         (FUNCALL
                                                          #'(LAMBDA
                                                                (OMEGA ALPHA
                                                                 &OPTIONAL
                                                                 AXES)
                                                              (IF AXES
                                                                  (LET ((ELIDED-COORDS
                                                                         (LOOP FOR I FROM 0 TO (1-
                                                                                                (RANK
                                                                                                 OMEGA))
                                                                               COLLECT NIL)))
                                                                    (LOOP FOR INDEX FROM 0 TO (1-
                                                                                               (LENGTH
                                                                                                (FIRST
                                                                                                 AXES)))
                                                                          DO (SETF (NTH
                                                                                    (-
                                                                                     (AREF
                                                                                      (FIRST
                                                                                       AXES)
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))
                                                                                    ELIDED-COORDS)
                                                                                     (-
                                                                                      (AREF
                                                                                       ALPHA
                                                                                       INDEX)
                                                                                      (OF-STATE
                                                                                       *APRIL-IDIOM*
                                                                                       :COUNT-FROM))))
                                                                    (AREF-ELIDING
                                                                     OMEGA
                                                                     ELIDED-COORDS))
                                                                  (LET* ((COORDS
                                                                          (MAPCAR
                                                                           (LAMBDA
                                                                               (
                                                                                COORD)
                                                                             (-
                                                                              COORD
                                                                              (OF-STATE
                                                                               *APRIL-IDIOM*
                                                                               `:COUNT-FROM)))
                                                                           (ARRAY-TO-LIST
                                                                            ALPHA)))
                                                                         (FOUND
                                                                          (APPLY
                                                                           #'AREF
                                                                           (CONS
                                                                            OMEGA
                                                                            COORDS))))
                                                                    (IF (NOT
                                                                         (ARRAYP
                                                                          FOUND))
                                                                        (VECTOR
                                                                         FOUND)
                                                                        FOUND))))
                                                          (IF (AND)
                                                              (FUNCALL
                                                               #'(LAMBDA
                                                                     (OMEGA)
                                                                   (LET ((OMEGA-DIMS
                                                                          (DIMS
                                                                           OMEGA)))
                                                                     (MAKE-ARRAY
                                                                      (LIST
                                                                       (LENGTH
                                                                        OMEGA-DIMS))
                                                                      :INITIAL-CONTENTS
                                                                      OMEGA-DIMS)))
                                                               ⍵))
                                                          (VECTOR 2)
                                                          (LIST))))))
                                                  (DISCLOSE
                                                   (FUNCALL
                                                    #'APPLY-SCALAR-DYADIC
                                                    #'(LAMBDA
                                                          (VEX::OMEGA
                                                           VEX::ALPHA)
                                                        (FUNCALL #'- VEX::ALPHA
                                                                 VEX::OMEGA))
                                                    (VECTOR 1)
                                                    (PROGN
                                                     (IF (AND)
                                                         (FUNCALL
                                                          #'(LAMBDA
                                                                (OMEGA ALPHA
                                                                 &OPTIONAL
                                                                 AXES)
                                                              (IF AXES
                                                                  (LET ((ELIDED-COORDS
                                                                         (LOOP FOR I FROM 0 TO (1-
                                                                                                (RANK
                                                                                                 OMEGA))
                                                                               COLLECT NIL)))
                                                                    (LOOP FOR INDEX FROM 0 TO (1-
                                                                                               (LENGTH
                                                                                                (FIRST
                                                                                                 AXES)))
                                                                          DO (SETF (NTH
                                                                                    (-
                                                                                     (AREF
                                                                                      (FIRST
                                                                                       AXES)
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))
                                                                                    ELIDED-COORDS)
                                                                                     (-
                                                                                      (AREF
                                                                                       ALPHA
                                                                                       INDEX)
                                                                                      (OF-STATE
                                                                                       *APRIL-IDIOM*
                                                                                       :COUNT-FROM))))
                                                                    (AREF-ELIDING
                                                                     OMEGA
                                                                     ELIDED-COORDS))
                                                                  (LET* ((COORDS
                                                                          (MAPCAR
                                                                           (LAMBDA
                                                                               (
                                                                                COORD)
                                                                             (-
                                                                              COORD
                                                                              (OF-STATE
                                                                               *APRIL-IDIOM*
                                                                               `:COUNT-FROM)))
                                                                           (ARRAY-TO-LIST
                                                                            ALPHA)))
                                                                         (FOUND
                                                                          (APPLY
                                                                           #'AREF
                                                                           (CONS
                                                                            OMEGA
                                                                            COORDS))))
                                                                    (IF (NOT
                                                                         (ARRAYP
                                                                          FOUND))
                                                                        (VECTOR
                                                                         FOUND)
                                                                        FOUND))))
                                                          (IF (AND)
                                                              (FUNCALL
                                                               #'(LAMBDA
                                                                     (OMEGA)
                                                                   (LET ((OMEGA-DIMS
                                                                          (DIMS
                                                                           OMEGA)))
                                                                     (MAKE-ARRAY
                                                                      (LIST
                                                                       (LENGTH
                                                                        OMEGA-DIMS))
                                                                      :INITIAL-CONTENTS
                                                                      OMEGA-DIMS)))
                                                               ⍵))
                                                          (VECTOR 2)
                                                          (LIST))))))
                                                  (FUNCALL
                                                   #'APPLY-SCALAR-DYADIC
                                                   #'(LAMBDA
                                                         (VEX::OMEGA
                                                          VEX::ALPHA)
                                                       (FUNCALL #'- VEX::ALPHA
                                                                VEX::OMEGA))
                                                   (VECTOR 1)
                                                   (PROGN
                                                    (IF (AND)
                                                        (FUNCALL
                                                         #'(LAMBDA
                                                               (OMEGA ALPHA
                                                                &OPTIONAL AXES)
                                                             (IF AXES
                                                                 (LET ((ELIDED-COORDS
                                                                        (LOOP FOR I FROM 0 TO (1-
                                                                                               (RANK
                                                                                                OMEGA))
                                                                              COLLECT NIL)))
                                                                   (LOOP FOR INDEX FROM 0 TO (1-
                                                                                              (LENGTH
                                                                                               (FIRST
                                                                                                AXES)))
                                                                         DO (SETF (NTH
                                                                                   (-
                                                                                    (AREF
                                                                                     (FIRST
                                                                                      AXES)
                                                                                     INDEX)
                                                                                    (OF-STATE
                                                                                     *APRIL-IDIOM*
                                                                                     :COUNT-FROM))
                                                                                   ELIDED-COORDS)
                                                                                    (-
                                                                                     (AREF
                                                                                      ALPHA
                                                                                      INDEX)
                                                                                     (OF-STATE
                                                                                      *APRIL-IDIOM*
                                                                                      :COUNT-FROM))))
                                                                   (AREF-ELIDING
                                                                    OMEGA
                                                                    ELIDED-COORDS))
                                                                 (LET* ((COORDS
                                                                         (MAPCAR
                                                                          (LAMBDA
                                                                              (
                                                                               COORD)
                                                                            (-
                                                                             COORD
                                                                             (OF-STATE
                                                                              *APRIL-IDIOM*
                                                                              `:COUNT-FROM)))
                                                                          (ARRAY-TO-LIST
                                                                           ALPHA)))
                                                                        (FOUND
                                                                         (APPLY
                                                                          #'AREF
                                                                          (CONS
                                                                           OMEGA
                                                                           COORDS))))
                                                                   (IF (NOT
                                                                        (ARRAYP
                                                                         FOUND))
                                                                       (VECTOR
                                                                        FOUND)
                                                                       FOUND))))
                                                         (IF (AND)
                                                             (FUNCALL
                                                              #'(LAMBDA (OMEGA)
                                                                  (LET ((OMEGA-DIMS
                                                                         (DIMS
                                                                          OMEGA)))
                                                                    (MAKE-ARRAY
                                                                     (LIST
                                                                      (LENGTH
                                                                       OMEGA-DIMS))
                                                                     :INITIAL-CONTENTS
                                                                     OMEGA-DIMS)))
                                                              ⍵))
                                                         (VECTOR 2)
                                                         (LIST)))))))))))
                    (LIST (VECTOR 2)))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1112
        (IF (AND)
            (FUNCALL
             #'(LAMBDA (OMEGA ALPHA)
                 (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
             (VECTOR 0) (VECTOR 16 16 16))))
       (#:G1113
        (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
  (DISCLOSE #:G1113))
APRIL> (april (set (:space *workspace1*) (:compile-onl)) "bla")
; in:
;      LET* ((#:G1018
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1019 NIL)
;        (#:G1020
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1110
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1111
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1112
;         (IF (AND)
;             (FUNCALL #'(LAMBDA # #) (VECTOR 0) (VECTOR 16 16 16))))
;        (#:G1113
;         (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 (VECTOR 2)) (VECTOR 1))))
;     (LET* ((#:G1018
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1019 NIL)
;            (#:G1020
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1110
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1111
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1112
;             (IF (AND)
;                 (FUNCALL #'# # #)))
;            (#:G1113 (FUNCALL #:G1110 (FUNCALL #:G1111 #:G1112 #) (VECTOR 1))))
;       (APRIL::DISCLOSE #:G1113))
; 
; caught STYLE-WARNING:
;   The variable #:G1018 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1019 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1020 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
#3A(((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1))
    ((1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)
     (1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1)))
APRIL> (april (set (:space *workspace2*)) "i←18 21 24 25 34 36 38 30 28 27 24 21 25 27 29 27 31 33 35 36 32 31 28 31 33 39 42 38 37")
#(18 21 24 25 34 36 38 30 28 27 24 21 25 27 29 27 31 33 35 36 32 31 28 31 33 39
  42 38 37)
APRIL> (april (set (:space *workspace2*)) "i+9")
#(27 30 33 34 43 45 47 39 37 36 33 30 34 36 38 36 40 42 44 45 41 40 37 40 42 48
  51 47 46)
APRIL> (april (set (:space *workspace2*)) "directions←{×1↓¯1↓(⍵,0)-0,⍵}")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115 :UNDEFINED))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115 :UNDEFINED))
;       (APRIL::DISCLOSE (SETQ #:G1115 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1114 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {100731CDCB}>
APRIL> (april (set (:space *workspace2*)) "zeroends←{0,(1↓¯1↓⍵),0}")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116 :UNDEFINED))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116 :UNDEFINED))
;       (APRIL::DISCLOSE (SETQ #:G1116 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1114 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1115 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {100731DD0B}>
APRIL> (april (set (:space *workspace2*)) "peaks←{zeroends |×(⍵,0)-0,⍵}")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117 :UNDEFINED))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117 :UNDEFINED))
;       (APRIL::DISCLOSE (SETQ #:G1117 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1114 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1115 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {100731E40B}>
APRIL> (april (set (:space *workspace2*)) "directions i")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1115 #:G1114)))
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1117 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#(1 1 1 1 1 1 -1 -1 -1 -1 -1 1 1 1 -1 1 1 1 1 -1 -1 -1 1 1 1 1 -1 -1)
APRIL> (april (set (:space *workspace2*)) "peaks directions i")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1117 (FUNCALL #:G1115 #:G1114))))
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<TYPE-ERROR expected-type: REAL datum: :UNDEFINED>.
APRIL> (april (set (:space *workspace2*)) "zeroends directions i")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1116 (FUNCALL #:G1115 #:G1114))))
; 
; caught STYLE-WARNING:
;   The variable #:G1117 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(0 1 1 1 1 1 -1 -1 -1 -1 -1 1 1 1 -1 1 1 1 1 -1 -1 -1 1 1 1 1 -1 0)
APRIL> (april (set (:space *workspace2*)) "peaks←{|×(⍵,0)-0,⍵}")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (SETQ #:G1117 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1114 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1115 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {100A6ECF3B}>
APRIL> (april (set (:space *workspace2*)) "peaks directions i")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1117 (FUNCALL #:G1115 #:G1114))))
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(1 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1)
APRIL> (april (set (:space *workspace2*)) "zeroends peaks directions i")
#(0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 0)
APRIL> (april (set (:space *workspace2*)) "peaks←{{0,(1↓¯1↓⍵),0}|×(⍵,0)-0,⍵}")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE NIL))
; 
; caught STYLE-WARNING:
;   The variable #:G1114 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1115 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1117 is defined but never used.
; 
; compilation unit finished
;   caught 4 STYLE-WARNING conditions
NIL
APRIL> (april (set (:space *workspace2*)) "peaks directions i")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1117 (FUNCALL #:G1115 #:G1114))))
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(1 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1)
APRIL> (april (set (:space *workspace2*)) "peaks←{{0,(1↓¯1↓⍵),0}|×(⍵,0)-0,⍵}")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE NIL))
; 
; caught STYLE-WARNING:
;   The variable #:G1114 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1115 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1117 is defined but never used.
; 
; compilation unit finished
;   caught 4 STYLE-WARNING conditions
NIL
APRIL> (april (set (:space *workspace2*)) "peaks directions i")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1117 (FUNCALL #:G1115 #:G1114))))
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(1 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1)
APRIL> (april (set (:space *workspace2*)) "peaks←{{0,(1↓¯1↓⍵),0}|×(⍵,0)-0,⍵}")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE NIL))
; 
; caught STYLE-WARNING:
;   The variable #:G1114 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1115 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1117 is defined but never used.
; 
; compilation unit finished
;   caught 4 STYLE-WARNING conditions
NIL
APRIL> (april (set (:space *workspace2*)) "directions i")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1115 #:G1114)))
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1117 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#(1 1 1 1 1 1 -1 -1 -1 -1 -1 1 1 1 -1 1 1 1 1 -1 -1 -1 1 1 1 1 -1 -1)
APRIL> (april (set (:space *workspace2*)) "peaks directions i")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1117 (FUNCALL #:G1115 #:G1114))))
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(1 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1)
APRIL> (april (set (:space *workspace2*)) "gg←{{3+⍵} 8+⍵}")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1119 :UNDEFINED))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1119 :UNDEFINED))
;       (APRIL::DISCLOSE NIL))
; 
; caught STYLE-WARNING:
;   The variable #:G1114 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1115 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1117 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1119 is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
NIL
APRIL> (april (set (:space *workspace2*)) "gg 3")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1119 NIL))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1119 NIL))
;       (APRIL::DISCLOSE (VECTOR (APRIL::DISCLOSE #:G1119) 3)))
; 
; caught STYLE-WARNING:
;   The variable #:G1114 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1115 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1117 is defined but never used.
; 
; compilation unit finished
;   caught 4 STYLE-WARNING conditions
#(NIL 3)
APRIL> (april (set (:space *workspace2*) (:compile-only)) "gg←{{3+⍵} 8+⍵}")
(LET* ((#:G1114
        (VECTOR 18 21 24 25 34 36 38 30 28 27 24 21 25 27 29 27 31 33 35 36 32
                31 28 31 33 39 42 38 37))
       (#:G1115
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (FUNCALL #'APPLY-SCALAR-MONADIC #'SIGNUM
                        (IF (AND)
                            (FUNCALL
                             #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                 (MULTIDIM-SLICE OMEGA
                                                 (IF AXES
                                                     (LOOP FOR AXIS FROM 0 TO (1-
                                                                               (RANK
                                                                                OMEGA))
                                                           COLLECT (IF (= AXIS
                                                                          (-
                                                                           (AREF
                                                                            (FIRST
                                                                             AXES)
                                                                            0)
                                                                           (OF-STATE
                                                                            *APRIL-IDIOM*
                                                                            :COUNT-FROM)))
                                                                       (AREF
                                                                        ALPHA
                                                                        0)
                                                                       0))
                                                     (ARRAY-TO-LIST ALPHA))
                                                 :INVERSE T))
                             (IF (AND)
                                 (FUNCALL
                                  #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                      (MULTIDIM-SLICE OMEGA
                                                      (IF AXES
                                                          (LOOP FOR AXIS FROM 0 TO (1-
                                                                                    (RANK
                                                                                     OMEGA))
                                                                COLLECT (IF (=
                                                                             AXIS
                                                                             (-
                                                                              (AREF
                                                                               (FIRST
                                                                                AXES)
                                                                               0)
                                                                              (OF-STATE
                                                                               *APRIL-IDIOM*
                                                                               :COUNT-FROM)))
                                                                            (AREF
                                                                             ALPHA
                                                                             0)
                                                                            0))
                                                          (ARRAY-TO-LIST
                                                           ALPHA))
                                                      :INVERSE T))
                                  (FUNCALL #'APPLY-SCALAR-DYADIC
                                           #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                                               (FUNCALL #'- VEX::ALPHA
                                                        VEX::OMEGA))
                                           (IF (AND)
                                               (FUNCALL
                                                #'(LAMBDA
                                                      (OMEGA ALPHA
                                                       &OPTIONAL AXES)
                                                    (IF (AND
                                                         (OR (NOT AXES)
                                                             (INTEGERP
                                                              (AREF
                                                               (FIRST AXES)
                                                               0)))
                                                         (VECTORP ALPHA)
                                                         (VECTORP OMEGA))
                                                        (IF (AND AXES
                                                                 (< 0
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                            (ERROR
                                                             (CONCATENATE
                                                              'STRING
                                                              "Specified axis is greater than 1, vectors"
                                                              " have only one axis along which to catenate."))
                                                            (IF (AND AXES
                                                                     (> 0
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))))
                                                                (ERROR
                                                                 (FORMAT NIL
                                                                         "Specified axis is less than ~a."
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM)))
                                                                (CONCATENATE
                                                                 'VECTOR ALPHA
                                                                 OMEGA)))
                                                        (IF (OR (NOT AXES)
                                                                (INTEGERP
                                                                 (AREF
                                                                  (FIRST AXES)
                                                                  0)))
                                                            (LET* ((AXIS
                                                                    (IF AXES
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))
                                                                        (1-
                                                                         (MAX
                                                                          (ARRAY-RANK
                                                                           ALPHA)
                                                                          (ARRAY-RANK
                                                                           OMEGA)))))
                                                                   (SCALE-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        ALPHA
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         OMEGA
                                                                         AXIS)))
                                                                   (SCALE-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        OMEGA
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         ALPHA
                                                                         AXIS))))
                                                              (STACK AXIS
                                                                     SCALE-ALPHA
                                                                     SCALE-OMEGA))
                                                            (LET* ((AXIS
                                                                    (CEILING
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                                   (PERMUTE-DIMS
                                                                    (IOTA
                                                                     (1+
                                                                      (RANK
                                                                       ALPHA))))
                                                                   (P-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          ALPHA))))
                                                                   (P-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          OMEGA)))))
                                                              (STACK AXIS
                                                                     (IF (IS-SINGLETON
                                                                          ALPHA)
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          P-OMEGA)
                                                                         P-ALPHA)
                                                                     (IF (IS-SINGLETON
                                                                          OMEGA)
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          P-ALPHA)
                                                                         P-OMEGA))))))
                                                ⍵ (VECTOR 0) (LIST)))
                                           (PROGN
                                            (IF (AND)
                                                (FUNCALL
                                                 #'(LAMBDA
                                                       (OMEGA ALPHA
                                                        &OPTIONAL AXES)
                                                     (IF (AND
                                                          (OR (NOT AXES)
                                                              (INTEGERP
                                                               (AREF
                                                                (FIRST AXES)
                                                                0)))
                                                          (VECTORP ALPHA)
                                                          (VECTORP OMEGA))
                                                         (IF (AND AXES
                                                                  (< 0
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                             (ERROR
                                                              (CONCATENATE
                                                               'STRING
                                                               "Specified axis is greater than 1, vectors"
                                                               " have only one axis along which to catenate."))
                                                             (IF (AND AXES
                                                                      (> 0
                                                                         (-
                                                                          (AREF
                                                                           (FIRST
                                                                            AXES)
                                                                           0)
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM))))
                                                                 (ERROR
                                                                  (FORMAT NIL
                                                                          "Specified axis is less than ~a."
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM)))
                                                                 (CONCATENATE
                                                                  'VECTOR ALPHA
                                                                  OMEGA)))
                                                         (IF (OR (NOT AXES)
                                                                 (INTEGERP
                                                                  (AREF
                                                                   (FIRST AXES)
                                                                   0)))
                                                             (LET* ((AXIS
                                                                     (IF AXES
                                                                         (-
                                                                          (AREF
                                                                           (FIRST
                                                                            AXES)
                                                                           0)
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM))
                                                                         (1-
                                                                          (MAX
                                                                           (ARRAY-RANK
                                                                            ALPHA)
                                                                           (ARRAY-RANK
                                                                            OMEGA)))))
                                                                    (SCALE-ALPHA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           ALPHA))
                                                                         ALPHA
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          OMEGA
                                                                          AXIS)))
                                                                    (SCALE-OMEGA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           OMEGA))
                                                                         OMEGA
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          ALPHA
                                                                          AXIS))))
                                                               (STACK AXIS
                                                                      SCALE-ALPHA
                                                                      SCALE-OMEGA))
                                                             (LET* ((AXIS
                                                                     (CEILING
                                                                      (-
                                                                       (AREF
                                                                        (FIRST
                                                                         AXES)
                                                                        0)
                                                                       (OF-STATE
                                                                        *APRIL-IDIOM*
                                                                        :COUNT-FROM))))
                                                                    (PERMUTE-DIMS
                                                                     (IOTA
                                                                      (1+
                                                                       (RANK
                                                                        ALPHA))))
                                                                    (P-ALPHA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           ALPHA))
                                                                         (PERMUTE
                                                                          (ROTATE-RIGHT
                                                                           AXIS
                                                                           PERMUTE-DIMS)
                                                                          (ARRAY-PROMOTE
                                                                           ALPHA))))
                                                                    (P-OMEGA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           OMEGA))
                                                                         (PERMUTE
                                                                          (ROTATE-RIGHT
                                                                           AXIS
                                                                           PERMUTE-DIMS)
                                                                          (ARRAY-PROMOTE
                                                                           OMEGA)))))
                                                               (STACK AXIS
                                                                      (IF (IS-SINGLETON
                                                                           ALPHA)
                                                                          (SCALE-ARRAY
                                                                           ALPHA
                                                                           P-OMEGA)
                                                                          P-ALPHA)
                                                                      (IF (IS-SINGLETON
                                                                           OMEGA)
                                                                          (SCALE-ARRAY
                                                                           OMEGA
                                                                           P-ALPHA)
                                                                          P-OMEGA))))))
                                                 (VECTOR 0) ⍵ (LIST)))))
                                  (VECTOR -1) (LIST)))
                             (VECTOR 1) (LIST)))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1116
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (IF (AND)
                   (FUNCALL
                    #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                        (IF (AND
                             (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                             (VECTORP ALPHA) (VECTORP OMEGA))
                            (IF (AND AXES
                                     (< 0
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                (ERROR
                                 (CONCATENATE 'STRING
                                              "Specified axis is greater than 1, vectors"
                                              " have only one axis along which to catenate."))
                                (IF (AND AXES
                                         (> 0
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                                    (ERROR
                                     (FORMAT NIL
                                             "Specified axis is less than ~a."
                                             (OF-STATE *APRIL-IDIOM*
                                                       :COUNT-FROM)))
                                    (CONCATENATE 'VECTOR ALPHA OMEGA)))
                            (IF (OR (NOT AXES)
                                    (INTEGERP (AREF (FIRST AXES) 0)))
                                (LET* ((AXIS
                                        (IF AXES
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))
                                            (1-
                                             (MAX (ARRAY-RANK ALPHA)
                                                  (ARRAY-RANK OMEGA)))))
                                       (SCALE-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            ALPHA
                                            (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                       (SCALE-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            OMEGA
                                            (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                  (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                (LET* ((AXIS
                                        (CEILING
                                         (- (AREF (FIRST AXES) 0)
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM))))
                                       (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                       (P-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE ALPHA))))
                                       (P-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE OMEGA)))))
                                  (STACK AXIS
                                         (IF (IS-SINGLETON ALPHA)
                                             (SCALE-ARRAY ALPHA P-OMEGA)
                                             P-ALPHA)
                                         (IF (IS-SINGLETON OMEGA)
                                             (SCALE-ARRAY OMEGA P-ALPHA)
                                             P-OMEGA))))))
                    (IF (AND)
                        (FUNCALL
                         #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                             (IF (AND
                                  (OR (NOT AXES)
                                      (INTEGERP (AREF (FIRST AXES) 0)))
                                  (VECTORP ALPHA) (VECTORP OMEGA))
                                 (IF (AND AXES
                                          (< 0
                                             (- (AREF (FIRST AXES) 0)
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                                     (ERROR
                                      (CONCATENATE 'STRING
                                                   "Specified axis is greater than 1, vectors"
                                                   " have only one axis along which to catenate."))
                                     (IF (AND AXES
                                              (> 0
                                                 (- (AREF (FIRST AXES) 0)
                                                    (OF-STATE *APRIL-IDIOM*
                                                              :COUNT-FROM))))
                                         (ERROR
                                          (FORMAT NIL
                                                  "Specified axis is less than ~a."
                                                  (OF-STATE *APRIL-IDIOM*
                                                            :COUNT-FROM)))
                                         (CONCATENATE 'VECTOR ALPHA OMEGA)))
                                 (IF (OR (NOT AXES)
                                         (INTEGERP (AREF (FIRST AXES) 0)))
                                     (LET* ((AXIS
                                             (IF AXES
                                                 (- (AREF (FIRST AXES) 0)
                                                    (OF-STATE *APRIL-IDIOM*
                                                              :COUNT-FROM))
                                                 (1-
                                                  (MAX (ARRAY-RANK ALPHA)
                                                       (ARRAY-RANK OMEGA)))))
                                            (SCALE-ALPHA
                                             (IF (NOT (IS-SINGLETON ALPHA))
                                                 ALPHA
                                                 (SCALE-ARRAY ALPHA OMEGA
                                                              AXIS)))
                                            (SCALE-OMEGA
                                             (IF (NOT (IS-SINGLETON OMEGA))
                                                 OMEGA
                                                 (SCALE-ARRAY OMEGA ALPHA
                                                              AXIS))))
                                       (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                     (LET* ((AXIS
                                             (CEILING
                                              (- (AREF (FIRST AXES) 0)
                                                 (OF-STATE *APRIL-IDIOM*
                                                           :COUNT-FROM))))
                                            (PERMUTE-DIMS
                                             (IOTA (1+ (RANK ALPHA))))
                                            (P-ALPHA
                                             (IF (NOT (IS-SINGLETON ALPHA))
                                                 (PERMUTE
                                                  (ROTATE-RIGHT AXIS
                                                                PERMUTE-DIMS)
                                                  (ARRAY-PROMOTE ALPHA))))
                                            (P-OMEGA
                                             (IF (NOT (IS-SINGLETON OMEGA))
                                                 (PERMUTE
                                                  (ROTATE-RIGHT AXIS
                                                                PERMUTE-DIMS)
                                                  (ARRAY-PROMOTE OMEGA)))))
                                       (STACK AXIS
                                              (IF (IS-SINGLETON ALPHA)
                                                  (SCALE-ARRAY ALPHA P-OMEGA)
                                                  P-ALPHA)
                                              (IF (IS-SINGLETON OMEGA)
                                                  (SCALE-ARRAY OMEGA P-ALPHA)
                                                  P-OMEGA))))))
                         (VECTOR 0)
                         (PROGN
                          (IF (AND)
                              (FUNCALL
                               #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                   (MULTIDIM-SLICE OMEGA
                                                   (IF AXES
                                                       (LOOP FOR AXIS FROM 0 TO (1-
                                                                                 (RANK
                                                                                  OMEGA))
                                                             COLLECT (IF (=
                                                                          AXIS
                                                                          (-
                                                                           (AREF
                                                                            (FIRST
                                                                             AXES)
                                                                            0)
                                                                           (OF-STATE
                                                                            *APRIL-IDIOM*
                                                                            :COUNT-FROM)))
                                                                         (AREF
                                                                          ALPHA
                                                                          0)
                                                                         0))
                                                       (ARRAY-TO-LIST ALPHA))
                                                   :INVERSE T))
                               (IF (AND)
                                   (FUNCALL
                                    #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                        (MULTIDIM-SLICE OMEGA
                                                        (IF AXES
                                                            (LOOP FOR AXIS FROM 0 TO (1-
                                                                                      (RANK
                                                                                       OMEGA))
                                                                  COLLECT (IF (=
                                                                               AXIS
                                                                               (-
                                                                                (AREF
                                                                                 (FIRST
                                                                                  AXES)
                                                                                 0)
                                                                                (OF-STATE
                                                                                 *APRIL-IDIOM*
                                                                                 :COUNT-FROM)))
                                                                              (AREF
                                                                               ALPHA
                                                                               0)
                                                                              0))
                                                            (ARRAY-TO-LIST
                                                             ALPHA))
                                                        :INVERSE T))
                                    ⍵ (VECTOR -1) (LIST)))
                               (VECTOR 1) (LIST))))
                         (LIST)))
                    (VECTOR 0) (LIST))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1117
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (FUNCALL #'APPLY-SCALAR-MONADIC #'ABS
                        (FUNCALL #'APPLY-SCALAR-MONADIC #'SIGNUM
                                 (FUNCALL #'APPLY-SCALAR-DYADIC
                                          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                                              (FUNCALL #'- VEX::ALPHA
                                                       VEX::OMEGA))
                                          (IF (AND)
                                              (FUNCALL
                                               #'(LAMBDA
                                                     (OMEGA ALPHA
                                                      &OPTIONAL AXES)
                                                   (IF (AND
                                                        (OR (NOT AXES)
                                                            (INTEGERP
                                                             (AREF (FIRST AXES)
                                                                   0)))
                                                        (VECTORP ALPHA)
                                                        (VECTORP OMEGA))
                                                       (IF (AND AXES
                                                                (< 0
                                                                   (-
                                                                    (AREF
                                                                     (FIRST
                                                                      AXES)
                                                                     0)
                                                                    (OF-STATE
                                                                     *APRIL-IDIOM*
                                                                     :COUNT-FROM))))
                                                           (ERROR
                                                            (CONCATENATE
                                                             'STRING
                                                             "Specified axis is greater than 1, vectors"
                                                             " have only one axis along which to catenate."))
                                                           (IF (AND AXES
                                                                    (> 0
                                                                       (-
                                                                        (AREF
                                                                         (FIRST
                                                                          AXES)
                                                                         0)
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM))))
                                                               (ERROR
                                                                (FORMAT NIL
                                                                        "Specified axis is less than ~a."
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM)))
                                                               (CONCATENATE
                                                                'VECTOR ALPHA
                                                                OMEGA)))
                                                       (IF (OR (NOT AXES)
                                                               (INTEGERP
                                                                (AREF
                                                                 (FIRST AXES)
                                                                 0)))
                                                           (LET* ((AXIS
                                                                   (IF AXES
                                                                       (-
                                                                        (AREF
                                                                         (FIRST
                                                                          AXES)
                                                                         0)
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM))
                                                                       (1-
                                                                        (MAX
                                                                         (ARRAY-RANK
                                                                          ALPHA)
                                                                         (ARRAY-RANK
                                                                          OMEGA)))))
                                                                  (SCALE-ALPHA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         ALPHA))
                                                                       ALPHA
                                                                       (SCALE-ARRAY
                                                                        ALPHA
                                                                        OMEGA
                                                                        AXIS)))
                                                                  (SCALE-OMEGA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         OMEGA))
                                                                       OMEGA
                                                                       (SCALE-ARRAY
                                                                        OMEGA
                                                                        ALPHA
                                                                        AXIS))))
                                                             (STACK AXIS
                                                                    SCALE-ALPHA
                                                                    SCALE-OMEGA))
                                                           (LET* ((AXIS
                                                                   (CEILING
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                                  (PERMUTE-DIMS
                                                                   (IOTA
                                                                    (1+
                                                                     (RANK
                                                                      ALPHA))))
                                                                  (P-ALPHA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         ALPHA))
                                                                       (PERMUTE
                                                                        (ROTATE-RIGHT
                                                                         AXIS
                                                                         PERMUTE-DIMS)
                                                                        (ARRAY-PROMOTE
                                                                         ALPHA))))
                                                                  (P-OMEGA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         OMEGA))
                                                                       (PERMUTE
                                                                        (ROTATE-RIGHT
                                                                         AXIS
                                                                         PERMUTE-DIMS)
                                                                        (ARRAY-PROMOTE
                                                                         OMEGA)))))
                                                             (STACK AXIS
                                                                    (IF (IS-SINGLETON
                                                                         ALPHA)
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         P-OMEGA)
                                                                        P-ALPHA)
                                                                    (IF (IS-SINGLETON
                                                                         OMEGA)
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         P-ALPHA)
                                                                        P-OMEGA))))))
                                               ⍵ (VECTOR 0) (LIST)))
                                          (PROGN
                                           (IF (AND)
                                               (FUNCALL
                                                #'(LAMBDA
                                                      (OMEGA ALPHA
                                                       &OPTIONAL AXES)
                                                    (IF (AND
                                                         (OR (NOT AXES)
                                                             (INTEGERP
                                                              (AREF
                                                               (FIRST AXES)
                                                               0)))
                                                         (VECTORP ALPHA)
                                                         (VECTORP OMEGA))
                                                        (IF (AND AXES
                                                                 (< 0
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                            (ERROR
                                                             (CONCATENATE
                                                              'STRING
                                                              "Specified axis is greater than 1, vectors"
                                                              " have only one axis along which to catenate."))
                                                            (IF (AND AXES
                                                                     (> 0
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))))
                                                                (ERROR
                                                                 (FORMAT NIL
                                                                         "Specified axis is less than ~a."
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM)))
                                                                (CONCATENATE
                                                                 'VECTOR ALPHA
                                                                 OMEGA)))
                                                        (IF (OR (NOT AXES)
                                                                (INTEGERP
                                                                 (AREF
                                                                  (FIRST AXES)
                                                                  0)))
                                                            (LET* ((AXIS
                                                                    (IF AXES
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))
                                                                        (1-
                                                                         (MAX
                                                                          (ARRAY-RANK
                                                                           ALPHA)
                                                                          (ARRAY-RANK
                                                                           OMEGA)))))
                                                                   (SCALE-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        ALPHA
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         OMEGA
                                                                         AXIS)))
                                                                   (SCALE-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        OMEGA
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         ALPHA
                                                                         AXIS))))
                                                              (STACK AXIS
                                                                     SCALE-ALPHA
                                                                     SCALE-OMEGA))
                                                            (LET* ((AXIS
                                                                    (CEILING
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                                   (PERMUTE-DIMS
                                                                    (IOTA
                                                                     (1+
                                                                      (RANK
                                                                       ALPHA))))
                                                                   (P-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          ALPHA))))
                                                                   (P-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          OMEGA)))))
                                                              (STACK AXIS
                                                                     (IF (IS-SINGLETON
                                                                          ALPHA)
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          P-OMEGA)
                                                                         P-ALPHA)
                                                                     (IF (IS-SINGLETON
                                                                          OMEGA)
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          P-ALPHA)
                                                                         P-OMEGA))))))
                                                (VECTOR 0) ⍵ (LIST))))))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1119 NIL))
  (DISCLOSE NIL))
APRIL> (april (set (:space *workspace2*) (:compile-only)) "gg←{{3+⍵} 8+⍵}")
(LET* ((#:G1114
        (VECTOR 18 21 24 25 34 36 38 30 28 27 24 21 25 27 29 27 31 33 35 36 32
                31 28 31 33 39 42 38 37))
       (#:G1115
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (FUNCALL #'APPLY-SCALAR-MONADIC #'SIGNUM
                        (IF (AND)
                            (FUNCALL
                             #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                 (MULTIDIM-SLICE OMEGA
                                                 (IF AXES
                                                     (LOOP FOR AXIS FROM 0 TO (1-
                                                                               (RANK
                                                                                OMEGA))
                                                           COLLECT (IF (= AXIS
                                                                          (-
                                                                           (AREF
                                                                            (FIRST
                                                                             AXES)
                                                                            0)
                                                                           (OF-STATE
                                                                            *APRIL-IDIOM*
                                                                            :COUNT-FROM)))
                                                                       (AREF
                                                                        ALPHA
                                                                        0)
                                                                       0))
                                                     (ARRAY-TO-LIST ALPHA))
                                                 :INVERSE T))
                             (IF (AND)
                                 (FUNCALL
                                  #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                      (MULTIDIM-SLICE OMEGA
                                                      (IF AXES
                                                          (LOOP FOR AXIS FROM 0 TO (1-
                                                                                    (RANK
                                                                                     OMEGA))
                                                                COLLECT (IF (=
                                                                             AXIS
                                                                             (-
                                                                              (AREF
                                                                               (FIRST
                                                                                AXES)
                                                                               0)
                                                                              (OF-STATE
                                                                               *APRIL-IDIOM*
                                                                               :COUNT-FROM)))
                                                                            (AREF
                                                                             ALPHA
                                                                             0)
                                                                            0))
                                                          (ARRAY-TO-LIST
                                                           ALPHA))
                                                      :INVERSE T))
                                  (FUNCALL #'APPLY-SCALAR-DYADIC
                                           #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                                               (FUNCALL #'- VEX::ALPHA
                                                        VEX::OMEGA))
                                           (IF (AND)
                                               (FUNCALL
                                                #'(LAMBDA
                                                      (OMEGA ALPHA
                                                       &OPTIONAL AXES)
                                                    (IF (AND
                                                         (OR (NOT AXES)
                                                             (INTEGERP
                                                              (AREF
                                                               (FIRST AXES)
                                                               0)))
                                                         (VECTORP ALPHA)
                                                         (VECTORP OMEGA))
                                                        (IF (AND AXES
                                                                 (< 0
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                            (ERROR
                                                             (CONCATENATE
                                                              'STRING
                                                              "Specified axis is greater than 1, vectors"
                                                              " have only one axis along which to catenate."))
                                                            (IF (AND AXES
                                                                     (> 0
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))))
                                                                (ERROR
                                                                 (FORMAT NIL
                                                                         "Specified axis is less than ~a."
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM)))
                                                                (CONCATENATE
                                                                 'VECTOR ALPHA
                                                                 OMEGA)))
                                                        (IF (OR (NOT AXES)
                                                                (INTEGERP
                                                                 (AREF
                                                                  (FIRST AXES)
                                                                  0)))
                                                            (LET* ((AXIS
                                                                    (IF AXES
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))
                                                                        (1-
                                                                         (MAX
                                                                          (ARRAY-RANK
                                                                           ALPHA)
                                                                          (ARRAY-RANK
                                                                           OMEGA)))))
                                                                   (SCALE-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        ALPHA
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         OMEGA
                                                                         AXIS)))
                                                                   (SCALE-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        OMEGA
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         ALPHA
                                                                         AXIS))))
                                                              (STACK AXIS
                                                                     SCALE-ALPHA
                                                                     SCALE-OMEGA))
                                                            (LET* ((AXIS
                                                                    (CEILING
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                                   (PERMUTE-DIMS
                                                                    (IOTA
                                                                     (1+
                                                                      (RANK
                                                                       ALPHA))))
                                                                   (P-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          ALPHA))))
                                                                   (P-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          OMEGA)))))
                                                              (STACK AXIS
                                                                     (IF (IS-SINGLETON
                                                                          ALPHA)
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          P-OMEGA)
                                                                         P-ALPHA)
                                                                     (IF (IS-SINGLETON
                                                                          OMEGA)
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          P-ALPHA)
                                                                         P-OMEGA))))))
                                                ⍵ (VECTOR 0) (LIST)))
                                           (PROGN
                                            (IF (AND)
                                                (FUNCALL
                                                 #'(LAMBDA
                                                       (OMEGA ALPHA
                                                        &OPTIONAL AXES)
                                                     (IF (AND
                                                          (OR (NOT AXES)
                                                              (INTEGERP
                                                               (AREF
                                                                (FIRST AXES)
                                                                0)))
                                                          (VECTORP ALPHA)
                                                          (VECTORP OMEGA))
                                                         (IF (AND AXES
                                                                  (< 0
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                             (ERROR
                                                              (CONCATENATE
                                                               'STRING
                                                               "Specified axis is greater than 1, vectors"
                                                               " have only one axis along which to catenate."))
                                                             (IF (AND AXES
                                                                      (> 0
                                                                         (-
                                                                          (AREF
                                                                           (FIRST
                                                                            AXES)
                                                                           0)
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM))))
                                                                 (ERROR
                                                                  (FORMAT NIL
                                                                          "Specified axis is less than ~a."
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM)))
                                                                 (CONCATENATE
                                                                  'VECTOR ALPHA
                                                                  OMEGA)))
                                                         (IF (OR (NOT AXES)
                                                                 (INTEGERP
                                                                  (AREF
                                                                   (FIRST AXES)
                                                                   0)))
                                                             (LET* ((AXIS
                                                                     (IF AXES
                                                                         (-
                                                                          (AREF
                                                                           (FIRST
                                                                            AXES)
                                                                           0)
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM))
                                                                         (1-
                                                                          (MAX
                                                                           (ARRAY-RANK
                                                                            ALPHA)
                                                                           (ARRAY-RANK
                                                                            OMEGA)))))
                                                                    (SCALE-ALPHA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           ALPHA))
                                                                         ALPHA
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          OMEGA
                                                                          AXIS)))
                                                                    (SCALE-OMEGA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           OMEGA))
                                                                         OMEGA
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          ALPHA
                                                                          AXIS))))
                                                               (STACK AXIS
                                                                      SCALE-ALPHA
                                                                      SCALE-OMEGA))
                                                             (LET* ((AXIS
                                                                     (CEILING
                                                                      (-
                                                                       (AREF
                                                                        (FIRST
                                                                         AXES)
                                                                        0)
                                                                       (OF-STATE
                                                                        *APRIL-IDIOM*
                                                                        :COUNT-FROM))))
                                                                    (PERMUTE-DIMS
                                                                     (IOTA
                                                                      (1+
                                                                       (RANK
                                                                        ALPHA))))
                                                                    (P-ALPHA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           ALPHA))
                                                                         (PERMUTE
                                                                          (ROTATE-RIGHT
                                                                           AXIS
                                                                           PERMUTE-DIMS)
                                                                          (ARRAY-PROMOTE
                                                                           ALPHA))))
                                                                    (P-OMEGA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           OMEGA))
                                                                         (PERMUTE
                                                                          (ROTATE-RIGHT
                                                                           AXIS
                                                                           PERMUTE-DIMS)
                                                                          (ARRAY-PROMOTE
                                                                           OMEGA)))))
                                                               (STACK AXIS
                                                                      (IF (IS-SINGLETON
                                                                           ALPHA)
                                                                          (SCALE-ARRAY
                                                                           ALPHA
                                                                           P-OMEGA)
                                                                          P-ALPHA)
                                                                      (IF (IS-SINGLETON
                                                                           OMEGA)
                                                                          (SCALE-ARRAY
                                                                           OMEGA
                                                                           P-ALPHA)
                                                                          P-OMEGA))))))
                                                 (VECTOR 0) ⍵ (LIST)))))
                                  (VECTOR -1) (LIST)))
                             (VECTOR 1) (LIST)))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1116
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (IF (AND)
                   (FUNCALL
                    #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                        (IF (AND
                             (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                             (VECTORP ALPHA) (VECTORP OMEGA))
                            (IF (AND AXES
                                     (< 0
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                (ERROR
                                 (CONCATENATE 'STRING
                                              "Specified axis is greater than 1, vectors"
                                              " have only one axis along which to catenate."))
                                (IF (AND AXES
                                         (> 0
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                                    (ERROR
                                     (FORMAT NIL
                                             "Specified axis is less than ~a."
                                             (OF-STATE *APRIL-IDIOM*
                                                       :COUNT-FROM)))
                                    (CONCATENATE 'VECTOR ALPHA OMEGA)))
                            (IF (OR (NOT AXES)
                                    (INTEGERP (AREF (FIRST AXES) 0)))
                                (LET* ((AXIS
                                        (IF AXES
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))
                                            (1-
                                             (MAX (ARRAY-RANK ALPHA)
                                                  (ARRAY-RANK OMEGA)))))
                                       (SCALE-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            ALPHA
                                            (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                       (SCALE-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            OMEGA
                                            (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                  (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                (LET* ((AXIS
                                        (CEILING
                                         (- (AREF (FIRST AXES) 0)
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM))))
                                       (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                       (P-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE ALPHA))))
                                       (P-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE OMEGA)))))
                                  (STACK AXIS
                                         (IF (IS-SINGLETON ALPHA)
                                             (SCALE-ARRAY ALPHA P-OMEGA)
                                             P-ALPHA)
                                         (IF (IS-SINGLETON OMEGA)
                                             (SCALE-ARRAY OMEGA P-ALPHA)
                                             P-OMEGA))))))
                    (IF (AND)
                        (FUNCALL
                         #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                             (IF (AND
                                  (OR (NOT AXES)
                                      (INTEGERP (AREF (FIRST AXES) 0)))
                                  (VECTORP ALPHA) (VECTORP OMEGA))
                                 (IF (AND AXES
                                          (< 0
                                             (- (AREF (FIRST AXES) 0)
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                                     (ERROR
                                      (CONCATENATE 'STRING
                                                   "Specified axis is greater than 1, vectors"
                                                   " have only one axis along which to catenate."))
                                     (IF (AND AXES
                                              (> 0
                                                 (- (AREF (FIRST AXES) 0)
                                                    (OF-STATE *APRIL-IDIOM*
                                                              :COUNT-FROM))))
                                         (ERROR
                                          (FORMAT NIL
                                                  "Specified axis is less than ~a."
                                                  (OF-STATE *APRIL-IDIOM*
                                                            :COUNT-FROM)))
                                         (CONCATENATE 'VECTOR ALPHA OMEGA)))
                                 (IF (OR (NOT AXES)
                                         (INTEGERP (AREF (FIRST AXES) 0)))
                                     (LET* ((AXIS
                                             (IF AXES
                                                 (- (AREF (FIRST AXES) 0)
                                                    (OF-STATE *APRIL-IDIOM*
                                                              :COUNT-FROM))
                                                 (1-
                                                  (MAX (ARRAY-RANK ALPHA)
                                                       (ARRAY-RANK OMEGA)))))
                                            (SCALE-ALPHA
                                             (IF (NOT (IS-SINGLETON ALPHA))
                                                 ALPHA
                                                 (SCALE-ARRAY ALPHA OMEGA
                                                              AXIS)))
                                            (SCALE-OMEGA
                                             (IF (NOT (IS-SINGLETON OMEGA))
                                                 OMEGA
                                                 (SCALE-ARRAY OMEGA ALPHA
                                                              AXIS))))
                                       (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                     (LET* ((AXIS
                                             (CEILING
                                              (- (AREF (FIRST AXES) 0)
                                                 (OF-STATE *APRIL-IDIOM*
                                                           :COUNT-FROM))))
                                            (PERMUTE-DIMS
                                             (IOTA (1+ (RANK ALPHA))))
                                            (P-ALPHA
                                             (IF (NOT (IS-SINGLETON ALPHA))
                                                 (PERMUTE
                                                  (ROTATE-RIGHT AXIS
                                                                PERMUTE-DIMS)
                                                  (ARRAY-PROMOTE ALPHA))))
                                            (P-OMEGA
                                             (IF (NOT (IS-SINGLETON OMEGA))
                                                 (PERMUTE
                                                  (ROTATE-RIGHT AXIS
                                                                PERMUTE-DIMS)
                                                  (ARRAY-PROMOTE OMEGA)))))
                                       (STACK AXIS
                                              (IF (IS-SINGLETON ALPHA)
                                                  (SCALE-ARRAY ALPHA P-OMEGA)
                                                  P-ALPHA)
                                              (IF (IS-SINGLETON OMEGA)
                                                  (SCALE-ARRAY OMEGA P-ALPHA)
                                                  P-OMEGA))))))
                         (VECTOR 0)
                         (PROGN
                          (IF (AND)
                              (FUNCALL
                               #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                   (MULTIDIM-SLICE OMEGA
                                                   (IF AXES
                                                       (LOOP FOR AXIS FROM 0 TO (1-
                                                                                 (RANK
                                                                                  OMEGA))
                                                             COLLECT (IF (=
                                                                          AXIS
                                                                          (-
                                                                           (AREF
                                                                            (FIRST
                                                                             AXES)
                                                                            0)
                                                                           (OF-STATE
                                                                            *APRIL-IDIOM*
                                                                            :COUNT-FROM)))
                                                                         (AREF
                                                                          ALPHA
                                                                          0)
                                                                         0))
                                                       (ARRAY-TO-LIST ALPHA))
                                                   :INVERSE T))
                               (IF (AND)
                                   (FUNCALL
                                    #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                        (MULTIDIM-SLICE OMEGA
                                                        (IF AXES
                                                            (LOOP FOR AXIS FROM 0 TO (1-
                                                                                      (RANK
                                                                                       OMEGA))
                                                                  COLLECT (IF (=
                                                                               AXIS
                                                                               (-
                                                                                (AREF
                                                                                 (FIRST
                                                                                  AXES)
                                                                                 0)
                                                                                (OF-STATE
                                                                                 *APRIL-IDIOM*
                                                                                 :COUNT-FROM)))
                                                                              (AREF
                                                                               ALPHA
                                                                               0)
                                                                              0))
                                                            (ARRAY-TO-LIST
                                                             ALPHA))
                                                        :INVERSE T))
                                    ⍵ (VECTOR -1) (LIST)))
                               (VECTOR 1) (LIST))))
                         (LIST)))
                    (VECTOR 0) (LIST))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1117
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (FUNCALL #'APPLY-SCALAR-MONADIC #'ABS
                        (FUNCALL #'APPLY-SCALAR-MONADIC #'SIGNUM
                                 (FUNCALL #'APPLY-SCALAR-DYADIC
                                          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                                              (FUNCALL #'- VEX::ALPHA
                                                       VEX::OMEGA))
                                          (IF (AND)
                                              (FUNCALL
                                               #'(LAMBDA
                                                     (OMEGA ALPHA
                                                      &OPTIONAL AXES)
                                                   (IF (AND
                                                        (OR (NOT AXES)
                                                            (INTEGERP
                                                             (AREF (FIRST AXES)
                                                                   0)))
                                                        (VECTORP ALPHA)
                                                        (VECTORP OMEGA))
                                                       (IF (AND AXES
                                                                (< 0
                                                                   (-
                                                                    (AREF
                                                                     (FIRST
                                                                      AXES)
                                                                     0)
                                                                    (OF-STATE
                                                                     *APRIL-IDIOM*
                                                                     :COUNT-FROM))))
                                                           (ERROR
                                                            (CONCATENATE
                                                             'STRING
                                                             "Specified axis is greater than 1, vectors"
                                                             " have only one axis along which to catenate."))
                                                           (IF (AND AXES
                                                                    (> 0
                                                                       (-
                                                                        (AREF
                                                                         (FIRST
                                                                          AXES)
                                                                         0)
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM))))
                                                               (ERROR
                                                                (FORMAT NIL
                                                                        "Specified axis is less than ~a."
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM)))
                                                               (CONCATENATE
                                                                'VECTOR ALPHA
                                                                OMEGA)))
                                                       (IF (OR (NOT AXES)
                                                               (INTEGERP
                                                                (AREF
                                                                 (FIRST AXES)
                                                                 0)))
                                                           (LET* ((AXIS
                                                                   (IF AXES
                                                                       (-
                                                                        (AREF
                                                                         (FIRST
                                                                          AXES)
                                                                         0)
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM))
                                                                       (1-
                                                                        (MAX
                                                                         (ARRAY-RANK
                                                                          ALPHA)
                                                                         (ARRAY-RANK
                                                                          OMEGA)))))
                                                                  (SCALE-ALPHA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         ALPHA))
                                                                       ALPHA
                                                                       (SCALE-ARRAY
                                                                        ALPHA
                                                                        OMEGA
                                                                        AXIS)))
                                                                  (SCALE-OMEGA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         OMEGA))
                                                                       OMEGA
                                                                       (SCALE-ARRAY
                                                                        OMEGA
                                                                        ALPHA
                                                                        AXIS))))
                                                             (STACK AXIS
                                                                    SCALE-ALPHA
                                                                    SCALE-OMEGA))
                                                           (LET* ((AXIS
                                                                   (CEILING
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                                  (PERMUTE-DIMS
                                                                   (IOTA
                                                                    (1+
                                                                     (RANK
                                                                      ALPHA))))
                                                                  (P-ALPHA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         ALPHA))
                                                                       (PERMUTE
                                                                        (ROTATE-RIGHT
                                                                         AXIS
                                                                         PERMUTE-DIMS)
                                                                        (ARRAY-PROMOTE
                                                                         ALPHA))))
                                                                  (P-OMEGA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         OMEGA))
                                                                       (PERMUTE
                                                                        (ROTATE-RIGHT
                                                                         AXIS
                                                                         PERMUTE-DIMS)
                                                                        (ARRAY-PROMOTE
                                                                         OMEGA)))))
                                                             (STACK AXIS
                                                                    (IF (IS-SINGLETON
                                                                         ALPHA)
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         P-OMEGA)
                                                                        P-ALPHA)
                                                                    (IF (IS-SINGLETON
                                                                         OMEGA)
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         P-ALPHA)
                                                                        P-OMEGA))))))
                                               ⍵ (VECTOR 0) (LIST)))
                                          (PROGN
                                           (IF (AND)
                                               (FUNCALL
                                                #'(LAMBDA
                                                      (OMEGA ALPHA
                                                       &OPTIONAL AXES)
                                                    (IF (AND
                                                         (OR (NOT AXES)
                                                             (INTEGERP
                                                              (AREF
                                                               (FIRST AXES)
                                                               0)))
                                                         (VECTORP ALPHA)
                                                         (VECTORP OMEGA))
                                                        (IF (AND AXES
                                                                 (< 0
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                            (ERROR
                                                             (CONCATENATE
                                                              'STRING
                                                              "Specified axis is greater than 1, vectors"
                                                              " have only one axis along which to catenate."))
                                                            (IF (AND AXES
                                                                     (> 0
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))))
                                                                (ERROR
                                                                 (FORMAT NIL
                                                                         "Specified axis is less than ~a."
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM)))
                                                                (CONCATENATE
                                                                 'VECTOR ALPHA
                                                                 OMEGA)))
                                                        (IF (OR (NOT AXES)
                                                                (INTEGERP
                                                                 (AREF
                                                                  (FIRST AXES)
                                                                  0)))
                                                            (LET* ((AXIS
                                                                    (IF AXES
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))
                                                                        (1-
                                                                         (MAX
                                                                          (ARRAY-RANK
                                                                           ALPHA)
                                                                          (ARRAY-RANK
                                                                           OMEGA)))))
                                                                   (SCALE-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        ALPHA
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         OMEGA
                                                                         AXIS)))
                                                                   (SCALE-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        OMEGA
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         ALPHA
                                                                         AXIS))))
                                                              (STACK AXIS
                                                                     SCALE-ALPHA
                                                                     SCALE-OMEGA))
                                                            (LET* ((AXIS
                                                                    (CEILING
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                                   (PERMUTE-DIMS
                                                                    (IOTA
                                                                     (1+
                                                                      (RANK
                                                                       ALPHA))))
                                                                   (P-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          ALPHA))))
                                                                   (P-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          OMEGA)))))
                                                              (STACK AXIS
                                                                     (IF (IS-SINGLETON
                                                                          ALPHA)
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          P-OMEGA)
                                                                         P-ALPHA)
                                                                     (IF (IS-SINGLETON
                                                                          OMEGA)
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          P-ALPHA)
                                                                         P-OMEGA))))))
                                                (VECTOR 0) ⍵ (LIST))))))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1119 NIL))
  (DISCLOSE NIL))
APRIL> (april (set (:space *workspace2*) (:compile-onl)) "gg←{{3+⍵} 8+⍵}")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1119 NIL))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1119 NIL))
;       (APRIL::DISCLOSE NIL))
; 
; caught STYLE-WARNING:
;   The variable #:G1114 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1115 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1117 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1119 is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
NIL
APRIL> (april (set (:space *workspace2*)) "gg 3")
; in:
;      LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1115
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1116
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1117
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1119 NIL))
;     (LET* ((#:G1114 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1115
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1116
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1117
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1119 NIL))
;       (APRIL::DISCLOSE (VECTOR (APRIL::DISCLOSE #:G1119) 3)))
; 
; caught STYLE-WARNING:
;   The variable #:G1114 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1115 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1116 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1117 is defined but never used.
; 
; compilation unit finished
;   caught 4 STYLE-WARNING conditions
#(NIL 3)
APRIL> (april (set (:space *workspace2*) (:compile-only)) "gg 3")
(LET* ((#:G1114
        (VECTOR 18 21 24 25 34 36 38 30 28 27 24 21 25 27 29 27 31 33 35 36 32
                31 28 31 33 39 42 38 37))
       (#:G1115
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (FUNCALL #'APPLY-SCALAR-MONADIC #'SIGNUM
                        (IF (AND)
                            (FUNCALL
                             #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                 (MULTIDIM-SLICE OMEGA
                                                 (IF AXES
                                                     (LOOP FOR AXIS FROM 0 TO (1-
                                                                               (RANK
                                                                                OMEGA))
                                                           COLLECT (IF (= AXIS
                                                                          (-
                                                                           (AREF
                                                                            (FIRST
                                                                             AXES)
                                                                            0)
                                                                           (OF-STATE
                                                                            *APRIL-IDIOM*
                                                                            :COUNT-FROM)))
                                                                       (AREF
                                                                        ALPHA
                                                                        0)
                                                                       0))
                                                     (ARRAY-TO-LIST ALPHA))
                                                 :INVERSE T))
                             (IF (AND)
                                 (FUNCALL
                                  #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                      (MULTIDIM-SLICE OMEGA
                                                      (IF AXES
                                                          (LOOP FOR AXIS FROM 0 TO (1-
                                                                                    (RANK
                                                                                     OMEGA))
                                                                COLLECT (IF (=
                                                                             AXIS
                                                                             (-
                                                                              (AREF
                                                                               (FIRST
                                                                                AXES)
                                                                               0)
                                                                              (OF-STATE
                                                                               *APRIL-IDIOM*
                                                                               :COUNT-FROM)))
                                                                            (AREF
                                                                             ALPHA
                                                                             0)
                                                                            0))
                                                          (ARRAY-TO-LIST
                                                           ALPHA))
                                                      :INVERSE T))
                                  (FUNCALL #'APPLY-SCALAR-DYADIC
                                           #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                                               (FUNCALL #'- VEX::ALPHA
                                                        VEX::OMEGA))
                                           (IF (AND)
                                               (FUNCALL
                                                #'(LAMBDA
                                                      (OMEGA ALPHA
                                                       &OPTIONAL AXES)
                                                    (IF (AND
                                                         (OR (NOT AXES)
                                                             (INTEGERP
                                                              (AREF
                                                               (FIRST AXES)
                                                               0)))
                                                         (VECTORP ALPHA)
                                                         (VECTORP OMEGA))
                                                        (IF (AND AXES
                                                                 (< 0
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                            (ERROR
                                                             (CONCATENATE
                                                              'STRING
                                                              "Specified axis is greater than 1, vectors"
                                                              " have only one axis along which to catenate."))
                                                            (IF (AND AXES
                                                                     (> 0
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))))
                                                                (ERROR
                                                                 (FORMAT NIL
                                                                         "Specified axis is less than ~a."
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM)))
                                                                (CONCATENATE
                                                                 'VECTOR ALPHA
                                                                 OMEGA)))
                                                        (IF (OR (NOT AXES)
                                                                (INTEGERP
                                                                 (AREF
                                                                  (FIRST AXES)
                                                                  0)))
                                                            (LET* ((AXIS
                                                                    (IF AXES
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))
                                                                        (1-
                                                                         (MAX
                                                                          (ARRAY-RANK
                                                                           ALPHA)
                                                                          (ARRAY-RANK
                                                                           OMEGA)))))
                                                                   (SCALE-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        ALPHA
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         OMEGA
                                                                         AXIS)))
                                                                   (SCALE-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        OMEGA
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         ALPHA
                                                                         AXIS))))
                                                              (STACK AXIS
                                                                     SCALE-ALPHA
                                                                     SCALE-OMEGA))
                                                            (LET* ((AXIS
                                                                    (CEILING
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                                   (PERMUTE-DIMS
                                                                    (IOTA
                                                                     (1+
                                                                      (RANK
                                                                       ALPHA))))
                                                                   (P-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          ALPHA))))
                                                                   (P-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          OMEGA)))))
                                                              (STACK AXIS
                                                                     (IF (IS-SINGLETON
                                                                          ALPHA)
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          P-OMEGA)
                                                                         P-ALPHA)
                                                                     (IF (IS-SINGLETON
                                                                          OMEGA)
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          P-ALPHA)
                                                                         P-OMEGA))))))
                                                ⍵ (VECTOR 0) (LIST)))
                                           (PROGN
                                            (IF (AND)
                                                (FUNCALL
                                                 #'(LAMBDA
                                                       (OMEGA ALPHA
                                                        &OPTIONAL AXES)
                                                     (IF (AND
                                                          (OR (NOT AXES)
                                                              (INTEGERP
                                                               (AREF
                                                                (FIRST AXES)
                                                                0)))
                                                          (VECTORP ALPHA)
                                                          (VECTORP OMEGA))
                                                         (IF (AND AXES
                                                                  (< 0
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                             (ERROR
                                                              (CONCATENATE
                                                               'STRING
                                                               "Specified axis is greater than 1, vectors"
                                                               " have only one axis along which to catenate."))
                                                             (IF (AND AXES
                                                                      (> 0
                                                                         (-
                                                                          (AREF
                                                                           (FIRST
                                                                            AXES)
                                                                           0)
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM))))
                                                                 (ERROR
                                                                  (FORMAT NIL
                                                                          "Specified axis is less than ~a."
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM)))
                                                                 (CONCATENATE
                                                                  'VECTOR ALPHA
                                                                  OMEGA)))
                                                         (IF (OR (NOT AXES)
                                                                 (INTEGERP
                                                                  (AREF
                                                                   (FIRST AXES)
                                                                   0)))
                                                             (LET* ((AXIS
                                                                     (IF AXES
                                                                         (-
                                                                          (AREF
                                                                           (FIRST
                                                                            AXES)
                                                                           0)
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM))
                                                                         (1-
                                                                          (MAX
                                                                           (ARRAY-RANK
                                                                            ALPHA)
                                                                           (ARRAY-RANK
                                                                            OMEGA)))))
                                                                    (SCALE-ALPHA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           ALPHA))
                                                                         ALPHA
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          OMEGA
                                                                          AXIS)))
                                                                    (SCALE-OMEGA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           OMEGA))
                                                                         OMEGA
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          ALPHA
                                                                          AXIS))))
                                                               (STACK AXIS
                                                                      SCALE-ALPHA
                                                                      SCALE-OMEGA))
                                                             (LET* ((AXIS
                                                                     (CEILING
                                                                      (-
                                                                       (AREF
                                                                        (FIRST
                                                                         AXES)
                                                                        0)
                                                                       (OF-STATE
                                                                        *APRIL-IDIOM*
                                                                        :COUNT-FROM))))
                                                                    (PERMUTE-DIMS
                                                                     (IOTA
                                                                      (1+
                                                                       (RANK
                                                                        ALPHA))))
                                                                    (P-ALPHA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           ALPHA))
                                                                         (PERMUTE
                                                                          (ROTATE-RIGHT
                                                                           AXIS
                                                                           PERMUTE-DIMS)
                                                                          (ARRAY-PROMOTE
                                                                           ALPHA))))
                                                                    (P-OMEGA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           OMEGA))
                                                                         (PERMUTE
                                                                          (ROTATE-RIGHT
                                                                           AXIS
                                                                           PERMUTE-DIMS)
                                                                          (ARRAY-PROMOTE
                                                                           OMEGA)))))
                                                               (STACK AXIS
                                                                      (IF (IS-SINGLETON
                                                                           ALPHA)
                                                                          (SCALE-ARRAY
                                                                           ALPHA
                                                                           P-OMEGA)
                                                                          P-ALPHA)
                                                                      (IF (IS-SINGLETON
                                                                           OMEGA)
                                                                          (SCALE-ARRAY
                                                                           OMEGA
                                                                           P-ALPHA)
                                                                          P-OMEGA))))))
                                                 (VECTOR 0) ⍵ (LIST)))))
                                  (VECTOR -1) (LIST)))
                             (VECTOR 1) (LIST)))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1116
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (IF (AND)
                   (FUNCALL
                    #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                        (IF (AND
                             (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                             (VECTORP ALPHA) (VECTORP OMEGA))
                            (IF (AND AXES
                                     (< 0
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                (ERROR
                                 (CONCATENATE 'STRING
                                              "Specified axis is greater than 1, vectors"
                                              " have only one axis along which to catenate."))
                                (IF (AND AXES
                                         (> 0
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                                    (ERROR
                                     (FORMAT NIL
                                             "Specified axis is less than ~a."
                                             (OF-STATE *APRIL-IDIOM*
                                                       :COUNT-FROM)))
                                    (CONCATENATE 'VECTOR ALPHA OMEGA)))
                            (IF (OR (NOT AXES)
                                    (INTEGERP (AREF (FIRST AXES) 0)))
                                (LET* ((AXIS
                                        (IF AXES
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))
                                            (1-
                                             (MAX (ARRAY-RANK ALPHA)
                                                  (ARRAY-RANK OMEGA)))))
                                       (SCALE-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            ALPHA
                                            (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                       (SCALE-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            OMEGA
                                            (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                  (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                (LET* ((AXIS
                                        (CEILING
                                         (- (AREF (FIRST AXES) 0)
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM))))
                                       (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                       (P-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE ALPHA))))
                                       (P-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE OMEGA)))))
                                  (STACK AXIS
                                         (IF (IS-SINGLETON ALPHA)
                                             (SCALE-ARRAY ALPHA P-OMEGA)
                                             P-ALPHA)
                                         (IF (IS-SINGLETON OMEGA)
                                             (SCALE-ARRAY OMEGA P-ALPHA)
                                             P-OMEGA))))))
                    (IF (AND)
                        (FUNCALL
                         #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                             (IF (AND
                                  (OR (NOT AXES)
                                      (INTEGERP (AREF (FIRST AXES) 0)))
                                  (VECTORP ALPHA) (VECTORP OMEGA))
                                 (IF (AND AXES
                                          (< 0
                                             (- (AREF (FIRST AXES) 0)
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                                     (ERROR
                                      (CONCATENATE 'STRING
                                                   "Specified axis is greater than 1, vectors"
                                                   " have only one axis along which to catenate."))
                                     (IF (AND AXES
                                              (> 0
                                                 (- (AREF (FIRST AXES) 0)
                                                    (OF-STATE *APRIL-IDIOM*
                                                              :COUNT-FROM))))
                                         (ERROR
                                          (FORMAT NIL
                                                  "Specified axis is less than ~a."
                                                  (OF-STATE *APRIL-IDIOM*
                                                            :COUNT-FROM)))
                                         (CONCATENATE 'VECTOR ALPHA OMEGA)))
                                 (IF (OR (NOT AXES)
                                         (INTEGERP (AREF (FIRST AXES) 0)))
                                     (LET* ((AXIS
                                             (IF AXES
                                                 (- (AREF (FIRST AXES) 0)
                                                    (OF-STATE *APRIL-IDIOM*
                                                              :COUNT-FROM))
                                                 (1-
                                                  (MAX (ARRAY-RANK ALPHA)
                                                       (ARRAY-RANK OMEGA)))))
                                            (SCALE-ALPHA
                                             (IF (NOT (IS-SINGLETON ALPHA))
                                                 ALPHA
                                                 (SCALE-ARRAY ALPHA OMEGA
                                                              AXIS)))
                                            (SCALE-OMEGA
                                             (IF (NOT (IS-SINGLETON OMEGA))
                                                 OMEGA
                                                 (SCALE-ARRAY OMEGA ALPHA
                                                              AXIS))))
                                       (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                     (LET* ((AXIS
                                             (CEILING
                                              (- (AREF (FIRST AXES) 0)
                                                 (OF-STATE *APRIL-IDIOM*
                                                           :COUNT-FROM))))
                                            (PERMUTE-DIMS
                                             (IOTA (1+ (RANK ALPHA))))
                                            (P-ALPHA
                                             (IF (NOT (IS-SINGLETON ALPHA))
                                                 (PERMUTE
                                                  (ROTATE-RIGHT AXIS
                                                                PERMUTE-DIMS)
                                                  (ARRAY-PROMOTE ALPHA))))
                                            (P-OMEGA
                                             (IF (NOT (IS-SINGLETON OMEGA))
                                                 (PERMUTE
                                                  (ROTATE-RIGHT AXIS
                                                                PERMUTE-DIMS)
                                                  (ARRAY-PROMOTE OMEGA)))))
                                       (STACK AXIS
                                              (IF (IS-SINGLETON ALPHA)
                                                  (SCALE-ARRAY ALPHA P-OMEGA)
                                                  P-ALPHA)
                                              (IF (IS-SINGLETON OMEGA)
                                                  (SCALE-ARRAY OMEGA P-ALPHA)
                                                  P-OMEGA))))))
                         (VECTOR 0)
                         (PROGN
                          (IF (AND)
                              (FUNCALL
                               #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                   (MULTIDIM-SLICE OMEGA
                                                   (IF AXES
                                                       (LOOP FOR AXIS FROM 0 TO (1-
                                                                                 (RANK
                                                                                  OMEGA))
                                                             COLLECT (IF (=
                                                                          AXIS
                                                                          (-
                                                                           (AREF
                                                                            (FIRST
                                                                             AXES)
                                                                            0)
                                                                           (OF-STATE
                                                                            *APRIL-IDIOM*
                                                                            :COUNT-FROM)))
                                                                         (AREF
                                                                          ALPHA
                                                                          0)
                                                                         0))
                                                       (ARRAY-TO-LIST ALPHA))
                                                   :INVERSE T))
                               (IF (AND)
                                   (FUNCALL
                                    #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                        (MULTIDIM-SLICE OMEGA
                                                        (IF AXES
                                                            (LOOP FOR AXIS FROM 0 TO (1-
                                                                                      (RANK
                                                                                       OMEGA))
                                                                  COLLECT (IF (=
                                                                               AXIS
                                                                               (-
                                                                                (AREF
                                                                                 (FIRST
                                                                                  AXES)
                                                                                 0)
                                                                                (OF-STATE
                                                                                 *APRIL-IDIOM*
                                                                                 :COUNT-FROM)))
                                                                              (AREF
                                                                               ALPHA
                                                                               0)
                                                                              0))
                                                            (ARRAY-TO-LIST
                                                             ALPHA))
                                                        :INVERSE T))
                                    ⍵ (VECTOR -1) (LIST)))
                               (VECTOR 1) (LIST))))
                         (LIST)))
                    (VECTOR 0) (LIST))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1117
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (FUNCALL #'APPLY-SCALAR-MONADIC #'ABS
                        (FUNCALL #'APPLY-SCALAR-MONADIC #'SIGNUM
                                 (FUNCALL #'APPLY-SCALAR-DYADIC
                                          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                                              (FUNCALL #'- VEX::ALPHA
                                                       VEX::OMEGA))
                                          (IF (AND)
                                              (FUNCALL
                                               #'(LAMBDA
                                                     (OMEGA ALPHA
                                                      &OPTIONAL AXES)
                                                   (IF (AND
                                                        (OR (NOT AXES)
                                                            (INTEGERP
                                                             (AREF (FIRST AXES)
                                                                   0)))
                                                        (VECTORP ALPHA)
                                                        (VECTORP OMEGA))
                                                       (IF (AND AXES
                                                                (< 0
                                                                   (-
                                                                    (AREF
                                                                     (FIRST
                                                                      AXES)
                                                                     0)
                                                                    (OF-STATE
                                                                     *APRIL-IDIOM*
                                                                     :COUNT-FROM))))
                                                           (ERROR
                                                            (CONCATENATE
                                                             'STRING
                                                             "Specified axis is greater than 1, vectors"
                                                             " have only one axis along which to catenate."))
                                                           (IF (AND AXES
                                                                    (> 0
                                                                       (-
                                                                        (AREF
                                                                         (FIRST
                                                                          AXES)
                                                                         0)
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM))))
                                                               (ERROR
                                                                (FORMAT NIL
                                                                        "Specified axis is less than ~a."
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM)))
                                                               (CONCATENATE
                                                                'VECTOR ALPHA
                                                                OMEGA)))
                                                       (IF (OR (NOT AXES)
                                                               (INTEGERP
                                                                (AREF
                                                                 (FIRST AXES)
                                                                 0)))
                                                           (LET* ((AXIS
                                                                   (IF AXES
                                                                       (-
                                                                        (AREF
                                                                         (FIRST
                                                                          AXES)
                                                                         0)
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM))
                                                                       (1-
                                                                        (MAX
                                                                         (ARRAY-RANK
                                                                          ALPHA)
                                                                         (ARRAY-RANK
                                                                          OMEGA)))))
                                                                  (SCALE-ALPHA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         ALPHA))
                                                                       ALPHA
                                                                       (SCALE-ARRAY
                                                                        ALPHA
                                                                        OMEGA
                                                                        AXIS)))
                                                                  (SCALE-OMEGA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         OMEGA))
                                                                       OMEGA
                                                                       (SCALE-ARRAY
                                                                        OMEGA
                                                                        ALPHA
                                                                        AXIS))))
                                                             (STACK AXIS
                                                                    SCALE-ALPHA
                                                                    SCALE-OMEGA))
                                                           (LET* ((AXIS
                                                                   (CEILING
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                                  (PERMUTE-DIMS
                                                                   (IOTA
                                                                    (1+
                                                                     (RANK
                                                                      ALPHA))))
                                                                  (P-ALPHA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         ALPHA))
                                                                       (PERMUTE
                                                                        (ROTATE-RIGHT
                                                                         AXIS
                                                                         PERMUTE-DIMS)
                                                                        (ARRAY-PROMOTE
                                                                         ALPHA))))
                                                                  (P-OMEGA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         OMEGA))
                                                                       (PERMUTE
                                                                        (ROTATE-RIGHT
                                                                         AXIS
                                                                         PERMUTE-DIMS)
                                                                        (ARRAY-PROMOTE
                                                                         OMEGA)))))
                                                             (STACK AXIS
                                                                    (IF (IS-SINGLETON
                                                                         ALPHA)
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         P-OMEGA)
                                                                        P-ALPHA)
                                                                    (IF (IS-SINGLETON
                                                                         OMEGA)
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         P-ALPHA)
                                                                        P-OMEGA))))))
                                               ⍵ (VECTOR 0) (LIST)))
                                          (PROGN
                                           (IF (AND)
                                               (FUNCALL
                                                #'(LAMBDA
                                                      (OMEGA ALPHA
                                                       &OPTIONAL AXES)
                                                    (IF (AND
                                                         (OR (NOT AXES)
                                                             (INTEGERP
                                                              (AREF
                                                               (FIRST AXES)
                                                               0)))
                                                         (VECTORP ALPHA)
                                                         (VECTORP OMEGA))
                                                        (IF (AND AXES
                                                                 (< 0
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                            (ERROR
                                                             (CONCATENATE
                                                              'STRING
                                                              "Specified axis is greater than 1, vectors"
                                                              " have only one axis along which to catenate."))
                                                            (IF (AND AXES
                                                                     (> 0
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))))
                                                                (ERROR
                                                                 (FORMAT NIL
                                                                         "Specified axis is less than ~a."
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM)))
                                                                (CONCATENATE
                                                                 'VECTOR ALPHA
                                                                 OMEGA)))
                                                        (IF (OR (NOT AXES)
                                                                (INTEGERP
                                                                 (AREF
                                                                  (FIRST AXES)
                                                                  0)))
                                                            (LET* ((AXIS
                                                                    (IF AXES
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))
                                                                        (1-
                                                                         (MAX
                                                                          (ARRAY-RANK
                                                                           ALPHA)
                                                                          (ARRAY-RANK
                                                                           OMEGA)))))
                                                                   (SCALE-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        ALPHA
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         OMEGA
                                                                         AXIS)))
                                                                   (SCALE-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        OMEGA
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         ALPHA
                                                                         AXIS))))
                                                              (STACK AXIS
                                                                     SCALE-ALPHA
                                                                     SCALE-OMEGA))
                                                            (LET* ((AXIS
                                                                    (CEILING
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                                   (PERMUTE-DIMS
                                                                    (IOTA
                                                                     (1+
                                                                      (RANK
                                                                       ALPHA))))
                                                                   (P-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          ALPHA))))
                                                                   (P-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          OMEGA)))))
                                                              (STACK AXIS
                                                                     (IF (IS-SINGLETON
                                                                          ALPHA)
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          P-OMEGA)
                                                                         P-ALPHA)
                                                                     (IF (IS-SINGLETON
                                                                          OMEGA)
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          P-ALPHA)
                                                                         P-OMEGA))))))
                                                (VECTOR 0) ⍵ (LIST))))))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1119 NIL))
  (DISCLOSE (VECTOR (DISCLOSE #:G1119) 3)))
APRIL> (april (set (:space *workspace2*) (:compile-only)) "gg←{{3+⍵} 8+⍵}")
(LET* ((#:G1114
        (VECTOR 18 21 24 25 34 36 38 30 28 27 24 21 25 27 29 27 31 33 35 36 32
                31 28 31 33 39 42 38 37))
       (#:G1115
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (FUNCALL #'APPLY-SCALAR-MONADIC #'SIGNUM
                        (IF (AND)
                            (FUNCALL
                             #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                 (MULTIDIM-SLICE OMEGA
                                                 (IF AXES
                                                     (LOOP FOR AXIS FROM 0 TO (1-
                                                                               (RANK
                                                                                OMEGA))
                                                           COLLECT (IF (= AXIS
                                                                          (-
                                                                           (AREF
                                                                            (FIRST
                                                                             AXES)
                                                                            0)
                                                                           (OF-STATE
                                                                            *APRIL-IDIOM*
                                                                            :COUNT-FROM)))
                                                                       (AREF
                                                                        ALPHA
                                                                        0)
                                                                       0))
                                                     (ARRAY-TO-LIST ALPHA))
                                                 :INVERSE T))
                             (IF (AND)
                                 (FUNCALL
                                  #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                      (MULTIDIM-SLICE OMEGA
                                                      (IF AXES
                                                          (LOOP FOR AXIS FROM 0 TO (1-
                                                                                    (RANK
                                                                                     OMEGA))
                                                                COLLECT (IF (=
                                                                             AXIS
                                                                             (-
                                                                              (AREF
                                                                               (FIRST
                                                                                AXES)
                                                                               0)
                                                                              (OF-STATE
                                                                               *APRIL-IDIOM*
                                                                               :COUNT-FROM)))
                                                                            (AREF
                                                                             ALPHA
                                                                             0)
                                                                            0))
                                                          (ARRAY-TO-LIST
                                                           ALPHA))
                                                      :INVERSE T))
                                  (FUNCALL #'APPLY-SCALAR-DYADIC
                                           #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                                               (FUNCALL #'- VEX::ALPHA
                                                        VEX::OMEGA))
                                           (IF (AND)
                                               (FUNCALL
                                                #'(LAMBDA
                                                      (OMEGA ALPHA
                                                       &OPTIONAL AXES)
                                                    (IF (AND
                                                         (OR (NOT AXES)
                                                             (INTEGERP
                                                              (AREF
                                                               (FIRST AXES)
                                                               0)))
                                                         (VECTORP ALPHA)
                                                         (VECTORP OMEGA))
                                                        (IF (AND AXES
                                                                 (< 0
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                            (ERROR
                                                             (CONCATENATE
                                                              'STRING
                                                              "Specified axis is greater than 1, vectors"
                                                              " have only one axis along which to catenate."))
                                                            (IF (AND AXES
                                                                     (> 0
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))))
                                                                (ERROR
                                                                 (FORMAT NIL
                                                                         "Specified axis is less than ~a."
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM)))
                                                                (CONCATENATE
                                                                 'VECTOR ALPHA
                                                                 OMEGA)))
                                                        (IF (OR (NOT AXES)
                                                                (INTEGERP
                                                                 (AREF
                                                                  (FIRST AXES)
                                                                  0)))
                                                            (LET* ((AXIS
                                                                    (IF AXES
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))
                                                                        (1-
                                                                         (MAX
                                                                          (ARRAY-RANK
                                                                           ALPHA)
                                                                          (ARRAY-RANK
                                                                           OMEGA)))))
                                                                   (SCALE-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        ALPHA
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         OMEGA
                                                                         AXIS)))
                                                                   (SCALE-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        OMEGA
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         ALPHA
                                                                         AXIS))))
                                                              (STACK AXIS
                                                                     SCALE-ALPHA
                                                                     SCALE-OMEGA))
                                                            (LET* ((AXIS
                                                                    (CEILING
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                                   (PERMUTE-DIMS
                                                                    (IOTA
                                                                     (1+
                                                                      (RANK
                                                                       ALPHA))))
                                                                   (P-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          ALPHA))))
                                                                   (P-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          OMEGA)))))
                                                              (STACK AXIS
                                                                     (IF (IS-SINGLETON
                                                                          ALPHA)
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          P-OMEGA)
                                                                         P-ALPHA)
                                                                     (IF (IS-SINGLETON
                                                                          OMEGA)
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          P-ALPHA)
                                                                         P-OMEGA))))))
                                                ⍵ (VECTOR 0) (LIST)))
                                           (PROGN
                                            (IF (AND)
                                                (FUNCALL
                                                 #'(LAMBDA
                                                       (OMEGA ALPHA
                                                        &OPTIONAL AXES)
                                                     (IF (AND
                                                          (OR (NOT AXES)
                                                              (INTEGERP
                                                               (AREF
                                                                (FIRST AXES)
                                                                0)))
                                                          (VECTORP ALPHA)
                                                          (VECTORP OMEGA))
                                                         (IF (AND AXES
                                                                  (< 0
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                             (ERROR
                                                              (CONCATENATE
                                                               'STRING
                                                               "Specified axis is greater than 1, vectors"
                                                               " have only one axis along which to catenate."))
                                                             (IF (AND AXES
                                                                      (> 0
                                                                         (-
                                                                          (AREF
                                                                           (FIRST
                                                                            AXES)
                                                                           0)
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM))))
                                                                 (ERROR
                                                                  (FORMAT NIL
                                                                          "Specified axis is less than ~a."
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM)))
                                                                 (CONCATENATE
                                                                  'VECTOR ALPHA
                                                                  OMEGA)))
                                                         (IF (OR (NOT AXES)
                                                                 (INTEGERP
                                                                  (AREF
                                                                   (FIRST AXES)
                                                                   0)))
                                                             (LET* ((AXIS
                                                                     (IF AXES
                                                                         (-
                                                                          (AREF
                                                                           (FIRST
                                                                            AXES)
                                                                           0)
                                                                          (OF-STATE
                                                                           *APRIL-IDIOM*
                                                                           :COUNT-FROM))
                                                                         (1-
                                                                          (MAX
                                                                           (ARRAY-RANK
                                                                            ALPHA)
                                                                           (ARRAY-RANK
                                                                            OMEGA)))))
                                                                    (SCALE-ALPHA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           ALPHA))
                                                                         ALPHA
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          OMEGA
                                                                          AXIS)))
                                                                    (SCALE-OMEGA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           OMEGA))
                                                                         OMEGA
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          ALPHA
                                                                          AXIS))))
                                                               (STACK AXIS
                                                                      SCALE-ALPHA
                                                                      SCALE-OMEGA))
                                                             (LET* ((AXIS
                                                                     (CEILING
                                                                      (-
                                                                       (AREF
                                                                        (FIRST
                                                                         AXES)
                                                                        0)
                                                                       (OF-STATE
                                                                        *APRIL-IDIOM*
                                                                        :COUNT-FROM))))
                                                                    (PERMUTE-DIMS
                                                                     (IOTA
                                                                      (1+
                                                                       (RANK
                                                                        ALPHA))))
                                                                    (P-ALPHA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           ALPHA))
                                                                         (PERMUTE
                                                                          (ROTATE-RIGHT
                                                                           AXIS
                                                                           PERMUTE-DIMS)
                                                                          (ARRAY-PROMOTE
                                                                           ALPHA))))
                                                                    (P-OMEGA
                                                                     (IF (NOT
                                                                          (IS-SINGLETON
                                                                           OMEGA))
                                                                         (PERMUTE
                                                                          (ROTATE-RIGHT
                                                                           AXIS
                                                                           PERMUTE-DIMS)
                                                                          (ARRAY-PROMOTE
                                                                           OMEGA)))))
                                                               (STACK AXIS
                                                                      (IF (IS-SINGLETON
                                                                           ALPHA)
                                                                          (SCALE-ARRAY
                                                                           ALPHA
                                                                           P-OMEGA)
                                                                          P-ALPHA)
                                                                      (IF (IS-SINGLETON
                                                                           OMEGA)
                                                                          (SCALE-ARRAY
                                                                           OMEGA
                                                                           P-ALPHA)
                                                                          P-OMEGA))))))
                                                 (VECTOR 0) ⍵ (LIST)))))
                                  (VECTOR -1) (LIST)))
                             (VECTOR 1) (LIST)))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1116
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (IF (AND)
                   (FUNCALL
                    #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                        (IF (AND
                             (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                             (VECTORP ALPHA) (VECTORP OMEGA))
                            (IF (AND AXES
                                     (< 0
                                        (- (AREF (FIRST AXES) 0)
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                                (ERROR
                                 (CONCATENATE 'STRING
                                              "Specified axis is greater than 1, vectors"
                                              " have only one axis along which to catenate."))
                                (IF (AND AXES
                                         (> 0
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                                    (ERROR
                                     (FORMAT NIL
                                             "Specified axis is less than ~a."
                                             (OF-STATE *APRIL-IDIOM*
                                                       :COUNT-FROM)))
                                    (CONCATENATE 'VECTOR ALPHA OMEGA)))
                            (IF (OR (NOT AXES)
                                    (INTEGERP (AREF (FIRST AXES) 0)))
                                (LET* ((AXIS
                                        (IF AXES
                                            (- (AREF (FIRST AXES) 0)
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))
                                            (1-
                                             (MAX (ARRAY-RANK ALPHA)
                                                  (ARRAY-RANK OMEGA)))))
                                       (SCALE-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            ALPHA
                                            (SCALE-ARRAY ALPHA OMEGA AXIS)))
                                       (SCALE-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            OMEGA
                                            (SCALE-ARRAY OMEGA ALPHA AXIS))))
                                  (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                (LET* ((AXIS
                                        (CEILING
                                         (- (AREF (FIRST AXES) 0)
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM))))
                                       (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                                       (P-ALPHA
                                        (IF (NOT (IS-SINGLETON ALPHA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE ALPHA))))
                                       (P-OMEGA
                                        (IF (NOT (IS-SINGLETON OMEGA))
                                            (PERMUTE
                                             (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                             (ARRAY-PROMOTE OMEGA)))))
                                  (STACK AXIS
                                         (IF (IS-SINGLETON ALPHA)
                                             (SCALE-ARRAY ALPHA P-OMEGA)
                                             P-ALPHA)
                                         (IF (IS-SINGLETON OMEGA)
                                             (SCALE-ARRAY OMEGA P-ALPHA)
                                             P-OMEGA))))))
                    (IF (AND)
                        (FUNCALL
                         #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                             (IF (AND
                                  (OR (NOT AXES)
                                      (INTEGERP (AREF (FIRST AXES) 0)))
                                  (VECTORP ALPHA) (VECTORP OMEGA))
                                 (IF (AND AXES
                                          (< 0
                                             (- (AREF (FIRST AXES) 0)
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                                     (ERROR
                                      (CONCATENATE 'STRING
                                                   "Specified axis is greater than 1, vectors"
                                                   " have only one axis along which to catenate."))
                                     (IF (AND AXES
                                              (> 0
                                                 (- (AREF (FIRST AXES) 0)
                                                    (OF-STATE *APRIL-IDIOM*
                                                              :COUNT-FROM))))
                                         (ERROR
                                          (FORMAT NIL
                                                  "Specified axis is less than ~a."
                                                  (OF-STATE *APRIL-IDIOM*
                                                            :COUNT-FROM)))
                                         (CONCATENATE 'VECTOR ALPHA OMEGA)))
                                 (IF (OR (NOT AXES)
                                         (INTEGERP (AREF (FIRST AXES) 0)))
                                     (LET* ((AXIS
                                             (IF AXES
                                                 (- (AREF (FIRST AXES) 0)
                                                    (OF-STATE *APRIL-IDIOM*
                                                              :COUNT-FROM))
                                                 (1-
                                                  (MAX (ARRAY-RANK ALPHA)
                                                       (ARRAY-RANK OMEGA)))))
                                            (SCALE-ALPHA
                                             (IF (NOT (IS-SINGLETON ALPHA))
                                                 ALPHA
                                                 (SCALE-ARRAY ALPHA OMEGA
                                                              AXIS)))
                                            (SCALE-OMEGA
                                             (IF (NOT (IS-SINGLETON OMEGA))
                                                 OMEGA
                                                 (SCALE-ARRAY OMEGA ALPHA
                                                              AXIS))))
                                       (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                                     (LET* ((AXIS
                                             (CEILING
                                              (- (AREF (FIRST AXES) 0)
                                                 (OF-STATE *APRIL-IDIOM*
                                                           :COUNT-FROM))))
                                            (PERMUTE-DIMS
                                             (IOTA (1+ (RANK ALPHA))))
                                            (P-ALPHA
                                             (IF (NOT (IS-SINGLETON ALPHA))
                                                 (PERMUTE
                                                  (ROTATE-RIGHT AXIS
                                                                PERMUTE-DIMS)
                                                  (ARRAY-PROMOTE ALPHA))))
                                            (P-OMEGA
                                             (IF (NOT (IS-SINGLETON OMEGA))
                                                 (PERMUTE
                                                  (ROTATE-RIGHT AXIS
                                                                PERMUTE-DIMS)
                                                  (ARRAY-PROMOTE OMEGA)))))
                                       (STACK AXIS
                                              (IF (IS-SINGLETON ALPHA)
                                                  (SCALE-ARRAY ALPHA P-OMEGA)
                                                  P-ALPHA)
                                              (IF (IS-SINGLETON OMEGA)
                                                  (SCALE-ARRAY OMEGA P-ALPHA)
                                                  P-OMEGA))))))
                         (VECTOR 0)
                         (PROGN
                          (IF (AND)
                              (FUNCALL
                               #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                   (MULTIDIM-SLICE OMEGA
                                                   (IF AXES
                                                       (LOOP FOR AXIS FROM 0 TO (1-
                                                                                 (RANK
                                                                                  OMEGA))
                                                             COLLECT (IF (=
                                                                          AXIS
                                                                          (-
                                                                           (AREF
                                                                            (FIRST
                                                                             AXES)
                                                                            0)
                                                                           (OF-STATE
                                                                            *APRIL-IDIOM*
                                                                            :COUNT-FROM)))
                                                                         (AREF
                                                                          ALPHA
                                                                          0)
                                                                         0))
                                                       (ARRAY-TO-LIST ALPHA))
                                                   :INVERSE T))
                               (IF (AND)
                                   (FUNCALL
                                    #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                        (MULTIDIM-SLICE OMEGA
                                                        (IF AXES
                                                            (LOOP FOR AXIS FROM 0 TO (1-
                                                                                      (RANK
                                                                                       OMEGA))
                                                                  COLLECT (IF (=
                                                                               AXIS
                                                                               (-
                                                                                (AREF
                                                                                 (FIRST
                                                                                  AXES)
                                                                                 0)
                                                                                (OF-STATE
                                                                                 *APRIL-IDIOM*
                                                                                 :COUNT-FROM)))
                                                                              (AREF
                                                                               ALPHA
                                                                               0)
                                                                              0))
                                                            (ARRAY-TO-LIST
                                                             ALPHA))
                                                        :INVERSE T))
                                    ⍵ (VECTOR -1) (LIST)))
                               (VECTOR 1) (LIST))))
                         (LIST)))
                    (VECTOR 0) (LIST))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1117
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE
               (FUNCALL #'APPLY-SCALAR-MONADIC #'ABS
                        (FUNCALL #'APPLY-SCALAR-MONADIC #'SIGNUM
                                 (FUNCALL #'APPLY-SCALAR-DYADIC
                                          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                                              (FUNCALL #'- VEX::ALPHA
                                                       VEX::OMEGA))
                                          (IF (AND)
                                              (FUNCALL
                                               #'(LAMBDA
                                                     (OMEGA ALPHA
                                                      &OPTIONAL AXES)
                                                   (IF (AND
                                                        (OR (NOT AXES)
                                                            (INTEGERP
                                                             (AREF (FIRST AXES)
                                                                   0)))
                                                        (VECTORP ALPHA)
                                                        (VECTORP OMEGA))
                                                       (IF (AND AXES
                                                                (< 0
                                                                   (-
                                                                    (AREF
                                                                     (FIRST
                                                                      AXES)
                                                                     0)
                                                                    (OF-STATE
                                                                     *APRIL-IDIOM*
                                                                     :COUNT-FROM))))
                                                           (ERROR
                                                            (CONCATENATE
                                                             'STRING
                                                             "Specified axis is greater than 1, vectors"
                                                             " have only one axis along which to catenate."))
                                                           (IF (AND AXES
                                                                    (> 0
                                                                       (-
                                                                        (AREF
                                                                         (FIRST
                                                                          AXES)
                                                                         0)
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM))))
                                                               (ERROR
                                                                (FORMAT NIL
                                                                        "Specified axis is less than ~a."
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM)))
                                                               (CONCATENATE
                                                                'VECTOR ALPHA
                                                                OMEGA)))
                                                       (IF (OR (NOT AXES)
                                                               (INTEGERP
                                                                (AREF
                                                                 (FIRST AXES)
                                                                 0)))
                                                           (LET* ((AXIS
                                                                   (IF AXES
                                                                       (-
                                                                        (AREF
                                                                         (FIRST
                                                                          AXES)
                                                                         0)
                                                                        (OF-STATE
                                                                         *APRIL-IDIOM*
                                                                         :COUNT-FROM))
                                                                       (1-
                                                                        (MAX
                                                                         (ARRAY-RANK
                                                                          ALPHA)
                                                                         (ARRAY-RANK
                                                                          OMEGA)))))
                                                                  (SCALE-ALPHA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         ALPHA))
                                                                       ALPHA
                                                                       (SCALE-ARRAY
                                                                        ALPHA
                                                                        OMEGA
                                                                        AXIS)))
                                                                  (SCALE-OMEGA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         OMEGA))
                                                                       OMEGA
                                                                       (SCALE-ARRAY
                                                                        OMEGA
                                                                        ALPHA
                                                                        AXIS))))
                                                             (STACK AXIS
                                                                    SCALE-ALPHA
                                                                    SCALE-OMEGA))
                                                           (LET* ((AXIS
                                                                   (CEILING
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                                  (PERMUTE-DIMS
                                                                   (IOTA
                                                                    (1+
                                                                     (RANK
                                                                      ALPHA))))
                                                                  (P-ALPHA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         ALPHA))
                                                                       (PERMUTE
                                                                        (ROTATE-RIGHT
                                                                         AXIS
                                                                         PERMUTE-DIMS)
                                                                        (ARRAY-PROMOTE
                                                                         ALPHA))))
                                                                  (P-OMEGA
                                                                   (IF (NOT
                                                                        (IS-SINGLETON
                                                                         OMEGA))
                                                                       (PERMUTE
                                                                        (ROTATE-RIGHT
                                                                         AXIS
                                                                         PERMUTE-DIMS)
                                                                        (ARRAY-PROMOTE
                                                                         OMEGA)))))
                                                             (STACK AXIS
                                                                    (IF (IS-SINGLETON
                                                                         ALPHA)
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         P-OMEGA)
                                                                        P-ALPHA)
                                                                    (IF (IS-SINGLETON
                                                                         OMEGA)
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         P-ALPHA)
                                                                        P-OMEGA))))))
                                               ⍵ (VECTOR 0) (LIST)))
                                          (PROGN
                                           (IF (AND)
                                               (FUNCALL
                                                #'(LAMBDA
                                                      (OMEGA ALPHA
                                                       &OPTIONAL AXES)
                                                    (IF (AND
                                                         (OR (NOT AXES)
                                                             (INTEGERP
                                                              (AREF
                                                               (FIRST AXES)
                                                               0)))
                                                         (VECTORP ALPHA)
                                                         (VECTORP OMEGA))
                                                        (IF (AND AXES
                                                                 (< 0
                                                                    (-
                                                                     (AREF
                                                                      (FIRST
                                                                       AXES)
                                                                      0)
                                                                     (OF-STATE
                                                                      *APRIL-IDIOM*
                                                                      :COUNT-FROM))))
                                                            (ERROR
                                                             (CONCATENATE
                                                              'STRING
                                                              "Specified axis is greater than 1, vectors"
                                                              " have only one axis along which to catenate."))
                                                            (IF (AND AXES
                                                                     (> 0
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))))
                                                                (ERROR
                                                                 (FORMAT NIL
                                                                         "Specified axis is less than ~a."
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM)))
                                                                (CONCATENATE
                                                                 'VECTOR ALPHA
                                                                 OMEGA)))
                                                        (IF (OR (NOT AXES)
                                                                (INTEGERP
                                                                 (AREF
                                                                  (FIRST AXES)
                                                                  0)))
                                                            (LET* ((AXIS
                                                                    (IF AXES
                                                                        (-
                                                                         (AREF
                                                                          (FIRST
                                                                           AXES)
                                                                          0)
                                                                         (OF-STATE
                                                                          *APRIL-IDIOM*
                                                                          :COUNT-FROM))
                                                                        (1-
                                                                         (MAX
                                                                          (ARRAY-RANK
                                                                           ALPHA)
                                                                          (ARRAY-RANK
                                                                           OMEGA)))))
                                                                   (SCALE-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        ALPHA
                                                                        (SCALE-ARRAY
                                                                         ALPHA
                                                                         OMEGA
                                                                         AXIS)))
                                                                   (SCALE-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        OMEGA
                                                                        (SCALE-ARRAY
                                                                         OMEGA
                                                                         ALPHA
                                                                         AXIS))))
                                                              (STACK AXIS
                                                                     SCALE-ALPHA
                                                                     SCALE-OMEGA))
                                                            (LET* ((AXIS
                                                                    (CEILING
                                                                     (-
                                                                      (AREF
                                                                       (FIRST
                                                                        AXES)
                                                                       0)
                                                                      (OF-STATE
                                                                       *APRIL-IDIOM*
                                                                       :COUNT-FROM))))
                                                                   (PERMUTE-DIMS
                                                                    (IOTA
                                                                     (1+
                                                                      (RANK
                                                                       ALPHA))))
                                                                   (P-ALPHA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          ALPHA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          ALPHA))))
                                                                   (P-OMEGA
                                                                    (IF (NOT
                                                                         (IS-SINGLETON
                                                                          OMEGA))
                                                                        (PERMUTE
                                                                         (ROTATE-RIGHT
                                                                          AXIS
                                                                          PERMUTE-DIMS)
                                                                         (ARRAY-PROMOTE
                                                                          OMEGA)))))
                                                              (STACK AXIS
                                                                     (IF (IS-SINGLETON
                                                                          ALPHA)
                                                                         (SCALE-ARRAY
                                                                          ALPHA
                                                                          P-OMEGA)
                                                                         P-ALPHA)
                                                                     (IF (IS-SINGLETON
                                                                          OMEGA)
                                                                         (SCALE-ARRAY
                                                                          OMEGA
                                                                          P-ALPHA)
                                                                         P-OMEGA))))))
                                                (VECTOR 0) ⍵ (LIST))))))))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
       (#:G1119 NIL))
  (DISCLOSE NIL))
APRIL> (april (set (:space *workspace3*) (:compile-only)) "gg←{{3+⍵} 8+⍵}")
(LET* ((#:G1120 :UNDEFINED))
  (DISCLOSE NIL))
APRIL> (april (set (:space *workspace3*) (:compile-only)) "gg←{8+⍵}")
(LET* ((#:G1120
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 8)))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
  (DISCLOSE
   (SETQ #:G1120
           (LAMBDA (OMEGA &OPTIONAL ALPHA)
             (FUNCALL
              (LAMBDA (⍵ &OPTIONAL ⍺)
                (DECLARE (IGNORABLE ⍺))
                (PROGN
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 8)))))
              (ENCLOSE OMEGA) (ENCLOSE ALPHA))))))
APRIL> (april (set (:space *workspace3*) (:compile-only)) "gg←{{3+⍵} 8+⍵}")
(LET* ((#:G1120
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 8)))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
  (DISCLOSE NIL))
APRIL> (april (set (:space *workspace3*) (:compile-only)) "gg←{8+⍵}")
(LET* ((#:G1120
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 8)))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
  (DISCLOSE
   (SETQ #:G1120
           (LAMBDA (OMEGA &OPTIONAL ALPHA)
             (FUNCALL
              (LAMBDA (⍵ &OPTIONAL ⍺)
                (DECLARE (IGNORABLE ⍺))
                (PROGN
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 8)))))
              (ENCLOSE OMEGA) (ENCLOSE ALPHA))))))
APRIL> (april (set (:space *workspace3*) (:compile-only)) "gg←{{3+⍵} 8+⍵}")
(LET* ((#:G1120
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 8)))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
  (DISCLOSE NIL))
APRIL> (april (set (:space *workspace3*) (:compile-only)) "{3+⍵} 5")
(LET* ((#:G1120
        (LAMBDA (OMEGA &OPTIONAL ALPHA)
          (FUNCALL
           (LAMBDA (⍵ &OPTIONAL ⍺)
             (DECLARE (IGNORABLE ⍺))
             (PROGN
              (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 8)))))
           (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE (VECTOR 5)))))
APRIL> (vex::parse "{3+⍵} 5" (vex::=vex-string *apl-idiom* nil))
; Evaluation aborted on #<UNBOUND-VARIABLE *APL-IDIOM* {1008F68DD3}>.
APRIL> (vex::parse "{3+⍵} 5" (vex::=vex-string *april-idiom* nil))
((5
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100911894B}>)))
T
T
APRIL> (vex::parse "gg←{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* nil))
; Evaluation aborted on #<TYPE-ERROR expected-type: HASH-TABLE datum: NIL>.
APRIL> (vex::parse "gg←{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))
NIL
T
T
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))
NIL
NIL
NIL
APRIL> (vex::parse "gg←{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))
NIL
T
T
APRIL> (vex::parse "{3+⍵} 8+⍵" (vex::=vex-string *april-idiom* (make-hash-table)))
((⍵ (:FN #\+) 8
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10093511DB}>)))
T
T
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))
NIL
NIL
NIL
APRIL> (vex::parse "{3+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10094A550B}>)))
T
T
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))
NIL
NIL
NIL
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 03:40:05 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.429
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))
NIL
NIL
NIL
APRIL> (vex::parse "{3+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10084DDE7B}>)))
T
T
WARNING: redefining VEX::=VEX-STRING in DEFUN
APRIL> (asdf:load-system 'april)
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 03:40:24 PM):
; compiling (IN-PACKAGE #:VEX)
; compiling (DEFCLASS IDIOM ...)
; compiling (DEFGENERIC OF-STATE ...)
; compiling (DEFMETHOD OF-STATE ...)
; compiling (DEFGENERIC OF-UTILITIES ...)
; compiling (DEFMETHOD OF-UTILITIES ...)
; compiling (DEFGENERIC OF-FUNCTIONS ...)
; compiling (DEFMETHOD OF-FUNCTIONS ...)
; compiling (DEFGENERIC OF-OPERATORS ...)
; compiling (DEFMETHOD OF-OPERATORS ...)
; compiling (DEFGENERIC OF-OVERLOADED? ...)
; compiling (DEFMETHOD OF-OVERLOADED? ...)
; compiling (DEFMETHOD MAKE-LOAD-FORM ...)
; compiling (DEFMACRO BOOLEAN-OP ...)
; compiling (DEFMACRO REVERSE-OP ...)
; compiling (DEFMACRO REVERSE-BOOLEAN-OP ...)
; compiling (DEFMACRO VEX-SPEC ...)
; compiling (DEFUN DERIVE-OPGLYPHS ...)
; compiling (DEFUN =VEX-STRING ...)
; compiling (DEFUN VEX-EXPRESSION ...)
; compiling (DEFUN VEX-PROGRAM ...)

; /Users/owner/.cache/common-lisp/sbcl-1.4.2-macosx-x64/Users/owner/Documents/src/april/vex/vex-tmp9V47YWQF.fasl written
; compilation finished in 0:00:00.549
WARNING: redefining VEX::=VEX-STRING in DEFUN
; compiling file "/Users/owner/Documents/src/april/package.lisp" (written 09 MAR 2018 09:34:08 AM):
; compiling (DEFPACKAGE #:APRIL ...)

; /Users/owner/.cache/common-lisp/sbcl-1.4.2-macosx-x64/Users/owner/Documents/src/april/package-tmp9BN22RMA.fasl written
; compilation finished in 0:00:00.009
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 01:16:32 AM):
; compiling (IN-PACKAGE #:APRIL)
; compiling (DEFUN ARRAY-TO-NESTED-VECTOR ...)
; compiling (DEFUN IS-SINGLETON ...)
; compiling (DEFUN APPLY-SCALAR-MONADIC ...)
; compiling (DEFUN APPLY-SCALAR-DYADIC ...)
; compiling (DEFMACRO MEDIATE-OPERATION ...)
; compiling (DEFUN NUMERIC-STRING-P ...)
; compiling (DEFUN PARSE-APL-NUMBER-STRING ...)
; compiling (DEFUN FORMAT-VALUE ...)
; compiling (DEFUN FORMAT-ARRAY ...)
; compiling (DEFUN FORMAT-FUNCTION ...)
; compiling (DEFUN ENCLOSE ...)
; compiling (DEFUN DISCLOSE ...)
; compiling (DEFUN PROCESS-OUTPUT-VECTOR ...)
; compiling (DEFUN ASSEMBLE-VALUE ...)
; compiling (DEFUN ASSEMBLE-OPERATION ...)
; compiling (DEFUN LEFT-INVERT-MATRIX ...)
; compiling (DEFUN COMPOSE-STAGE ...)
; compiling (DEFUN OVER-OPERATOR-TEMPLATE ...)
; compiling (VEX-SPEC APRIL ...)

; /Users/owner/.cache/common-lisp/sbcl-1.4.2-macosx-x64/Users/owner/Documents/src/april/april-tmp1CXFJSK9.fasl written
; compilation finished in 0:00:00.438
T
APRIL> (vex::parse "{3+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1003F5E09B}>)))
T
T
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 03:40:38 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.255
APRIL> (vex::parse "{3+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL "") 
(:T ((3)) "") 
(:T (((:FN #\+) 3)) "") 
(:T NIL "") 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1002DE174B}>)))
T
T
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL "") 
(:T ((3)) "") 
(:T (((:FN #\+) 3)) "") 
(:T NIL "") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1002E0C00B}>)))
 "") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1002E0C00B}>)))
 "") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1002E0C00B}>)))
 "") 
NIL
NIL
NIL
WARNING: redefining VEX::=VEX-STRING in DEFUN
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL "" 3 "+⍵") 
(:T ((3)) "" (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) "" ⍵ "") 
(:T NIL ""
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100348747B}>)
 "8+⍵}") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100348747B}>)))
 "" 8 "+⍵}") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100348747B}>)))
 "" (:FN #\+) "⍵}") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100348747B}>)))
 "" ⍵ "}") 
NIL
NIL
NIL
APRIL> (vex::parse "{3+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL "" 3 "+⍵") 
(:T ((3)) "" (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) "" ⍵ "") 
(:T NIL ""
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10034C5C6B}>)
 "") 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10034C5C6B}>)))
T
T
APRIL> (vex::parse "{3+⍵} 9" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL "" 3 "+⍵") 
(:T ((3)) "" (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) "" ⍵ "") 
(:T NIL ""
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10034DC17B}>)
 "9") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10034DC17B}>)))
 "" 9 "") 
((9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10034DC17B}>)))
T
T
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL "" 3 "+⍵") 
(:T ((3)) "" (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) "" ⍵ "") 
(:T NIL ""
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1003509B5B}>)
 "8+⍵}") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003509B5B}>)))
 "" 8 "+⍵}") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003509B5B}>)))
 "" (:FN #\+) "⍵}") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003509B5B}>)))
 "" ⍵ "}") 
NIL
NIL
NIL
WARNING: redefining VEX::=VEX-STRING in DEFUN
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1003BEF63B}>)
 "8+⍵}") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003BEF63B}>)))
 8 "+⍵}") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003BEF63B}>)))
 (:FN #\+) "⍵}") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003BEF63B}>)))
 ⍵ "}") 
NIL
NIL
NIL
APRIL> 
; No valueWARNING: redefining VEX::=VEX-STRING in DEFUN

APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
((⍵ (:FN #\+) 3)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100456549B}>)
 "8+⍵}") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100456549B}>)))
 8 "+⍵}") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100456549B}>)))
 (:FN #\+) "⍵}") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100456549B}>)))
 ⍵ "}") 
NIL
NIL
NIL
APRIL> (vex::parse "{3+⍵} 9" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
((⍵ (:FN #\+) 3)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10045CA63B}>)
 "9") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10045CA63B}>)))
 9 "") 
((9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10045CA63B}>))) 
((9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10045CA63B}>)))
T
T
APRIL> (vex::parse "(1+(3+5))" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL 1 "+(3+5)") 
(:T ((1)) (:FN #\+) "(3+5)") 
(:T NIL 3 "+5") 
(:T ((3)) (:FN #\+) "5") 
(:T (((:FN #\+) 3)) 5 "") 
((5 (:FN #\+) 3)) 
(:T (((:FN #\+) 1)) ((5 (:FN #\+) 3)) "") 
((((5 (:FN #\+) 3)) (:FN #\+) 1)) 
(:T NIL ((((5 (:FN #\+) 3)) (:FN #\+) 1)) "") 
((((((5 (:FN #\+) 3)) (:FN #\+) 1)))) 
((((((5 (:FN #\+) 3)) (:FN #\+) 1))))
T
T
APRIL> (vex::parse "{3+⍵} 9" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
((⍵ (:FN #\+) 3)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1004618B9B}>)
 "9") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1004618B9B}>)))
 9 "") 
((9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1004618B9B}>))) 
((9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1004618B9B}>)))
T
T
APRIL> (vex::parse "((3+5)+1)" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL 3 "+5") 
(:T ((3)) (:FN #\+) "5") 
(:T (((:FN #\+) 3)) 5 "") 
((5 (:FN #\+) 3)) 
(:T NIL ((5 (:FN #\+) 3)) "+1)") 
(:T ((((5 (:FN #\+) 3)))) (:FN #\+) "1)") 
(:T (((:FN #\+) ((5 (:FN #\+) 3)))) 1 ")") 
NIL
NIL
NIL
APRIL> (vex::parse "( (3+5)+1)" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL 3 "+5") 
(:T ((3)) (:FN #\+) "5") 
(:T (((:FN #\+) 3)) 5 "") 
((5 (:FN #\+) 3)) 
(:T NIL ((5 (:FN #\+) 3)) "+1") 
(:T ((((5 (:FN #\+) 3)))) (:FN #\+) "1") 
(:T (((:FN #\+) ((5 (:FN #\+) 3)))) 1 "") 
((1 (:FN #\+) ((5 (:FN #\+) 3)))) 
(:T NIL ((1 (:FN #\+) ((5 (:FN #\+) 3)))) "") 
((((1 (:FN #\+) ((5 (:FN #\+) 3)))))) 
((((1 (:FN #\+) ((5 (:FN #\+) 3))))))
T
T
APRIL> (vex::parse "{ {3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
((⍵ (:FN #\+) 3)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100474C02B}>)
 "8+⍵") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100474C02B}>)))
 8 "+⍵") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100474C02B}>)))
 (:FN #\+) "⍵") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100474C02B}>)))
 ⍵ "") 
((⍵ (:FN #\+) 8
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100474C02B}>))) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10047564CB}>)
 "") 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10047564CB}>))) 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10047564CB}>)))
T
T
APRIL> (vex::parse "{ {3+⍵} 8+⍵} 9" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
((⍵ (:FN #\+) 3)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100478688B}>)
 "8+⍵") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100478688B}>)))
 8 "+⍵") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100478688B}>)))
 (:FN #\+) "⍵") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100478688B}>)))
 ⍵ "") 
((⍵ (:FN #\+) 8
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100478688B}>))) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1004790D4B}>)
 "9") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1004790D4B}>)))
 9 "") 
((9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1004790D4B}>))) 
((9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1004790D4B}>)))
T
T
APRIL> (april "{ {3+⍵} 8+⍵} 9")

(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
((⍵ (:FN #\+) 3)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10047DA4DB}>)
 "8+⍵") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10047DA4DB}>)))
 8 "+⍵") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10047DA4DB}>)))
 (:FN #\+) "⍵") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10047DA4DB}>)))
 ⍵ "") 
((⍵ (:FN #\+) 8
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10047DA4DB}>))) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10047E499B}>)
 "9") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10047E499B}>)))
 9 "") 
((9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10047E499B}>))) 
20
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 04:04:47 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.345
WARNING: redefining VEX::=VEX-STRING in DEFUN
APRIL> (vex::parse "{ {3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100352ACBB}>)
 "8+⍵") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100352ACBB}>)))
 8 "+⍵") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100352ACBB}>)))
 (:FN #\+) "⍵") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100352ACBB}>)))
 ⍵ "") 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100353492B}>)
 "") 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100353492B}>)))
T
T
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 04:07:10 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.230
APRIL> (vex::parse "{ {3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:IN " {3+⍵} 8+⍵") 
(:IN "3+⍵") 
(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10062D309B}>)
 "8+⍵") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10062D309B}>)))
 8 "+⍵") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1006370C8B}>)))
 (:FN #\+) "⍵") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1006370C8B}>)))
 ⍵ "") 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1001954F3B}>)
 "") 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1001954F3B}>)))
T
T
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:IN "{3+⍵} 8+⍵}") 
(:IN "3+⍵") 
(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1001A51D6B}>)
 "8+⍵}") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1001A51D6B}>)))
 8 "+⍵}") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1001A51D6B}>)))
 (:FN #\+) "⍵}") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1001A51D6B}>)))
 ⍵ "}") 
NIL
NIL
NIL
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 04:08:33 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.179
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:IN "{3+⍵} 8+⍵}") 
(:IN "3+⍵") 
(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1003ACFFCB}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1003ACFFCB}>)
 "8+⍵}") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003ACFFCB}>)))
 8 "+⍵}") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003ACFFCB}>)))
 (:FN #\+) "⍵}") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003ACFFCB}>)))
 ⍵ "}") 
NIL
NIL
NIL
APRIL> (vex::parse "{ {3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:IN " {3+⍵} 8+⍵") 
(:IN "3+⍵") 
(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100505D39B}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100505D39B}>)
 "8+⍵") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100505D39B}>)))
 8 "+⍵") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100505D39B}>)))
 (:FN #\+) "⍵") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100505D39B}>)))
 ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10050675EB}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10050675EB}>)
 "") 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10050675EB}>)))
T
T
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:IN "{3+⍵} 8+⍵}") 
(:IN "3+⍵") 
(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10050952CB}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10050952CB}>)
 "8+⍵}") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10050952CB}>)))
 8 "+⍵}") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10050952CB}>)))
 (:FN #\+) "⍵}") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10050952CB}>)))
 ⍵ "}") 
NIL
NIL
NIL
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 04:12:04 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.203
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:C #\{) 
(:C #\{) 
(:C #\3) 
(:C #\+) 
(:C #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C #\}) 
(:C #\ ) 
(:C #\8) 
(:C #\+) 
(:C #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C #\}) 
(:IN "{3+⍵} 8+⍵}") 
(:C #\3) 
(:C #\3) 
(:C #\+) 
(:C #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C #\}) 
(:IN "3+⍵") 
(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1003DB1A4B}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1003DB1A4B}>)
 "8+⍵}") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003DB1A4B}>)))
 8 "+⍵}") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003DB1A4B}>)))
 (:FN #\+) "⍵}") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003DB1A4B}>)))
 ⍵ "}") 
NIL
NIL
NIL
APRIL> (vex::parse "{ {3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:C #\ ) 
(:C #\ ) 
(:C #\{) 
(:C #\3) 
(:C #\+) 
(:C #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C #\}) 
(:C #\ ) 
(:C #\8) 
(:C #\+) 
(:C #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C #\}) 
(:IN " {3+⍵} 8+⍵") 
(:C #\3) 
(:C #\3) 
(:C #\+) 
(:C #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C #\}) 
(:IN "3+⍵") 
(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1003E00DFB}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1003E00DFB}>)
 "8+⍵") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003E00DFB}>)))
 8 "+⍵") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003E00DFB}>)))
 (:FN #\+) "⍵") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1003E00DFB}>)))
 ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1003E0B06B}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1003E0B06B}>)
 "") 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1003E0B06B}>)))
T
T
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 04:16:13 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.268
APRIL> (setq bla 1)
; in: SETQ BLA
;     (SETQ APRIL::BLA 1)
; 
; caught WARNING:
;   undefined variable: BLA
; 
; compilation unit finished
;   Undefined variable:
;     BLA
;   caught 1 WARNING condition
1
APRIL> (incf bla)
; in: INCF BLA
;     (INCF APRIL::BLA)
; ==>
;   (SETQ APRIL::BLA (+ 1 APRIL::BLA))
; 
; caught WARNING:
;   undefined variable: BLA
; 
; compilation unit finished
;   Undefined variable:
;     BLA
;   caught 1 WARNING condition
2
APRIL> (incf bla)
; in: INCF BLA
;     (INCF APRIL::BLA)
; ==>
;   (SETQ APRIL::BLA (+ 1 APRIL::BLA))
; 
; caught WARNING:
;   undefined variable: BLA
; 
; compilation unit finished
;   Undefined variable:
;     BLA
;   caught 1 WARNING condition
3
APRIL> (incf bla)
; in: INCF BLA
;     (INCF APRIL::BLA)
; ==>
;   (SETQ APRIL::BLA (+ 1 APRIL::BLA))
; 
; caught WARNING:
;   undefined variable: BLA
; 
; compilation unit finished
;   Undefined variable:
;     BLA
;   caught 1 WARNING condition
4
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 04:16:43 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.259
APRIL> (vex::parse "{{3+⍵} 8+⍵}" (vex::=vex-string *april-idiom* (make-hash-table)))

(:C 1 #\{) 
(:C 1 #\{) 
(:C 2 #\3) 
(:C 2 #\+) 
(:C 2 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 2 #\}) 
(:C 1 #\ ) 
(:C 1 #\8) 
(:C 1 #\+) 
(:C 1 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 1 #\}) 
(:IN "{3+⍵} 8+⍵") 
(:C 1 #\3) 
(:C 1 #\3) 
(:C 1 #\+) 
(:C 1 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 1 #\}) 
(:IN "3+⍵") 
(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005E6268B}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005E6268B}>)
 "8+⍵") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1005E6268B}>)))
 8 "+⍵") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1005E6268B}>)))
 (:FN #\+) "⍵") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1005E6268B}>)))
 ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005E6D2FB}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005E6D2FB}>)
 "") 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1005E6D2FB}>)))
T
T
APRIL> (april "{{3+⍵} 8+⍵} 9")

(:C 1 #\{) 
(:C 1 #\{) 
(:C 2 #\3) 
(:C 2 #\+) 
(:C 2 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 2 #\}) 
(:C 1 #\ ) 
(:C 1 #\8) 
(:C 1 #\+) 
(:C 1 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 1 #\}) 
(:IN "{3+⍵} 8+⍵") 
(:C 1 #\3) 
(:C 1 #\3) 
(:C 1 #\+) 
(:C 1 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 1 #\}) 
(:IN "3+⍵") 
(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005EC9E8B}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005EC9E8B}>)
 "8+⍵") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1005EC9E8B}>)))
 8 "+⍵") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1005EC9E8B}>)))
 (:FN #\+) "⍵") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1005EC9E8B}>)))
 ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005ED402B}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005ED402B}>)
 "9") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1005ED402B}>)))
 9 "") 
20
APRIL> (april "{{3+⍵} 8+⍵} 9")

(:C 1 #\{) 
(:C 1 #\{) 
(:C 2 #\3) 
(:C 2 #\+) 
(:C 2 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 2 #\}) 
(:C 1 #\ ) 
(:C 1 #\8) 
(:C 1 #\+) 
(:C 1 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 1 #\}) 
(:IN "{3+⍵} 8+⍵") 
(:C 1 #\3) 
(:C 1 #\3) 
(:C 1 #\+) 
(:C 1 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 1 #\}) 
(:IN "3+⍵") 
(:T NIL 3 "+⍵") 
(:T ((3)) (:FN #\+) "⍵") 
(:T (((:FN #\+) 3)) ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005FA1F8B}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005FA1F8B}>)
 "8+⍵") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1005FA1F8B}>)))
 8 "+⍵") 
(:T
 ((8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1005FA1F8B}>)))
 (:FN #\+) "⍵") 
(:T
 (((:FN #\+) 8
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1005FA1F8B}>)))
 ⍵ "") 
(:ENC
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005FAC2BB}>)) 
(:T NIL
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1005FAC2BB}>)
 "9") 
(:T
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1005FAC2BB}>)))
 9 "") 
20
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 04:24:57 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.313
APRIL> (april "{{3+⍵} 8+⍵} 9")

(:C 1 #\{) 
(:C 1 #\{) 
(:C 2 #\3) 
(:C 2 #\+) 
(:C 2 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 2 #\}) 
(:C 1 #\ ) 
(:C 1 #\8) 
(:C 1 #\+) 
(:C 1 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 1 #\}) 
(:IN "{3+⍵} 8+⍵") 
(:C 1 #\3) 
(:C 1 #\3) 
(:C 1 #\+) 
(:C 1 #\APL_FUNCTIONAL_SYMBOL_OMEGA) 
(:C 1 #\}) 
(:IN "3+⍵") 
20
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 04:25:19 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.263
APRIL> (april "{{3+⍵} 8+⍵} 9")

(:IN "{3+⍵} 8+⍵") 
(:IN "3+⍵") 
20
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 04:25:27 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.202
APRIL> (april "{{3+⍵} 8+⍵} 9")
20
APRIL> (april (set (:space *workspace4*)) "directions←{×1↓¯1↓(⍵,0)-0,⍵}")

(:SC "⍵,0") 
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {1002FA00AB}>
APRIL> (april (set (:space *workspace4*)) "peaks←{{0,(1↓¯1↓⍵),0}|×(⍵,0)-0,⍵}")

(:SC "1↓¯1↓⍵") 
(:SC "⍵,0") ; in:
            ;      LET* ((#:G1123
            ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
            ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
            ;        (#:G1124 :UNDEFINED))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124 :UNDEFINED))
;       (APRIL::DISCLOSE (SETQ #:G1124 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1123 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {1002FA101B}>
APRIL> (april (set (:space *workspace4*)) "i←18 21 24 25 34 36 38 30 28 27 24 21 25 27 29 27 31 33 35 36 32 31 28 31 33 39 42 38 37")
; in:
;      LET* ((#:G1123
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1124
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1125 :UNDEFINED))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1125 :UNDEFINED))
;       (APRIL::DISCLOSE
;        (SETQ #:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))))
; 
; caught STYLE-WARNING:
;   The variable #:G1123 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1124 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#(18 21 24 25 34 36 38 30 28 27 24 21 25 27 29 27 31 33 35 36 32 31 28 31 33 39
  42 38 37)
APRIL> (april (set (:space *workspace4*)) "peaks directions i")
#(0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 0 1 0 0 1 0 0 0 1 0 0)
APRIL> (april (set (:space *workspace4*)) "distances←{⍵×⍳⍴⍵}")
; in:
;      LET* ((#:G1123
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1124
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1126 :UNDEFINED))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1126 :UNDEFINED))
;       (APRIL::DISCLOSE (SETQ #:G1126 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1123 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1124 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1125 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {1002FA46CB}>
APRIL> (april (set (:space *workspace4*)) "relative←{(×⍵)\\(⍵~0)-0,¯1↓⍵~0}")

(:SC "×⍵") 
(:SC "⍵~0") ; in:
            ;      LET* ((#:G1123
            ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
            ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
            ;        (#:G1124
            ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
            ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
            ;        (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
            ;        (#:G1126
            ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
            ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
            ;        (#:G1127 :UNDEFINED))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1126
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1127 :UNDEFINED))
;       (APRIL::DISCLOSE (SETQ #:G1127 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1123 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1124 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1125 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1126 is defined but never used.
; 
; compilation unit finished
;   caught 4 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {1002FA622B}>
APRIL> (april (set (:space *workspace4*)) "distances peaks directions i")
; in:
;      LET* ((#:G1123
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1124
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1126
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1127
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1126
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1127
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE
;        (FUNCALL #:G1126 (FUNCALL #:G1124 (FUNCALL #:G1123 #:G1125)))))
; 
; caught STYLE-WARNING:
;   The variable #:G1127 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(0 0 0 0 0 0 7 0 0 0 0 12 0 0 15 16 0 0 0 20 0 0 23 0 0 0 27 0 0)
APRIL> (april (set (:space *workspace4*)) "relative distances peaks directions i")
#(0 0 0 0 0 0 7 0 0 0 0 5 0 0 3 1 0 0 0 4 0 0 3 0 0 0 4 0 0)
APRIL> (april (set (:space *workspace4*)) "smoothonce←{0 1⌽¨⊂1=(⍺=relative ⍵)\⍳⍴(⍺=relative ⍵)~0}")

(:SC "⍺=relative ⍵") 
(:SC "⍺=relative ⍵") ; in:
                     ;      LET* ((#:G1123
                     ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
                     ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
                     ;        (#:G1124
                     ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
                     ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
                     ;        (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
                     ;        (#:G1126
                     ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
                     ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
                     ;        (#:G1127
                     ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
                     ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
                     ;        (#:G1128 :UNDEFINED))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1126
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1127
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1128 :UNDEFINED))
;       (APRIL::DISCLOSE (SETQ #:G1128 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1123 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1124 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1125 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1126 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1127 is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {100327016B}>
APRIL> (april (set (:space *workspace4*)) "smoothonce distances peaks directions i")
; in:
;      LET* ((#:G1123
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1124
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1126
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1127
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1128
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1126
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1127
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1128
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1128 (FUNCALL #:G1126 (FUNCALL #:G1124 #)))))
; 
; caught STYLE-WARNING:
;   The variable #:G1127 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNDEFINED-FUNCTION NIL {100473E793}>.
APRIL> (april (set (:space *workspace4*)) "1 smoothonce distances peaks directions i")
; in:
;      LET* ((#:G1123
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1124
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1126
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1127
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1128
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1126
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1127
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1128
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE
;        (FUNCALL #:G1128 (FUNCALL #:G1126 (FUNCALL #:G1124 #)) (VECTOR 1))))
; 
; caught STYLE-WARNING:
;   The variable #:G1127 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNDEFINED-FUNCTION NIL {10054E1203}>.
APRIL> (april (set (:space *workspace4*)) "distances peaks directions i")
; in:
;      LET* ((#:G1123
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1124
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1126
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1127
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1128
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1126
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1127
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1128
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE
;        (FUNCALL #:G1126 (FUNCALL #:G1124 (FUNCALL #:G1123 #:G1125)))))
; 
; caught STYLE-WARNING:
;   The variable #:G1127 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1128 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#(0 0 0 0 0 0 7 0 0 0 0 12 0 0 15 16 0 0 0 20 0 0 23 0 0 0 27 0 0)
APRIL> (april (set (:space *workspace4*)) "relative distances peaks directions i")
; in:
;      LET* ((#:G1123
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1124
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1126
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1127
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1128
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1126
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1127
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1128
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (FUNCALL #:G1127 (FUNCALL #:G1126 (FUNCALL #:G1124 #)))))
; 
; caught STYLE-WARNING:
;   The variable #:G1128 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(0 0 0 0 0 0 7 0 0 0 0 5 0 0 3 1 0 0 0 4 0 0 3 0 0 0 4 0 0)
APRIL> (april (set (:space *workspace4*)) "1 smoothonce relative distances peaks directions i")
; Evaluation aborted on #<UNDEFINED-FUNCTION NIL {100413F973}>.
APRIL> (april (set (:space *workspace4*)) "smoothonce←{0 1⌽¨⊂1=(⍺=⍵)\⍳⍴(⍺=⍵)~0}")

(:SC "⍺=⍵") 
(:SC "⍺=⍵") ; in:
            ;      LET* ((#:G1123
            ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
            ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
            ;        (#:G1124
            ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
            ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
            ;        (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
            ;        (#:G1126
            ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
            ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
            ;        (#:G1127
            ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
            ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
            ;        (#:G1128
            ;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
            ;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1126
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1127
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1128
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE (SETQ #:G1128 (LAMBDA # #))))
; 
; caught STYLE-WARNING:
;   The variable #:G1123 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1124 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1125 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1126 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G1127 is defined but never used.
; 
; compilation unit finished
;   caught 5 STYLE-WARNING conditions
#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {1004AF815B}>
APRIL> (april (set (:space *workspace4*)) "1 smoothonce distances peaks directions i")
; in:
;      LET* ((#:G1123
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1124
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;        (#:G1126
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1127
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
;        (#:G1128
;         (LAMBDA (OMEGA &OPTIONAL ALPHA)
;           (FUNCALL (LAMBDA # # #) (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
;     (LET* ((#:G1123
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1124
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1125 (VECTOR 18 21 24 25 34 36 38 30 28 27 24 ...))
;            (#:G1126
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1127
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G1128
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #))))
;       (APRIL::DISCLOSE
;        (FUNCALL #:G1128 (FUNCALL #:G1126 (FUNCALL #:G1124 #)) (VECTOR 1))))
; 
; caught STYLE-WARNING:
;   The variable #:G1127 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(NIL NIL)
APRIL> (april "g←{3+⍵} ◊ {g 5+⍵} 9")
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ {5+⍵} 9")
14
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 5+⍵} 9")
(LET* ((#:G1133 :UNDEFINED))
  (SETQ #:G1133
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (PROGN
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G1134 :UNDEFINED))
        (DISCLOSE
         (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR (DISCLOSE #:G1134) 5)))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 9")
(LET* ((#:G1135 :UNDEFINED))
  (SETQ #:G1135
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (PROGN
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G1135 (VECTOR 9))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 9+3")
(LET* ((#:G1136 :UNDEFINED))
  (SETQ #:G1136
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (PROGN
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL #:G1136 (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) (VECTOR 9)))))
APRIL> (vex::parse "g←{3+⍵} ◊ g 9+3" (vex::=vex-string *april-idiom* (make-hash-table)))
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100626068B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G1137)
 (3 (:FN #\+) 9 #:G1137))
T
T
APRIL> (vex::parse "g←{3+⍵} ◊ {g 5+⍵} 9" (vex::=vex-string *april-idiom* (make-hash-table)))
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100628A3FB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G1138)
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100626F90B}>)))
T
T
APRIL> (april (test))
1..226

[←] Assign
  [32m✓ [90m55 is expected to be 55[0m 
[0m
  [32m✓ [90m#3A(((7 7 7 7) (5 6 7 8) (9 1 2 3)) ((7 7 7 7) (8 9 1 2) (3 4 5 6))) is expected to be #3A(((7 7 7 7) (5 6 7 8) (9 1 2 3)) ((7 7 7 7) (8 9 1 2) (3 4 5 6)))[0m [31m(193ms)[0m
[0m

[⊣] Empty / Left
  [32m✓ [90m#() is expected to be #()[0m 
[0m
  [32m✓ [90m55 is expected to be 55[0m 
[0m

[⊢] Identity / Right
  [32m✓ [90m77 is expected to be 77[0m 
[0m
  [32m✓ [90m77 is expected to be 77[0m 
[0m

[+] Identity or Negate Imaginary / Add
  [32m✓ [90m5 is expected to be 5[0m 
[0m
  [32m✓ [90m#C(5 -2) is expected to be #C(5 -2)[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m#(2 3 4) is expected to be #(2 3 4)[0m 
[0m

[-] Negate / Subtract
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(5 4 3) is expected to be #(5 4 3)[0m 
[0m

[×] Direction / Multiply
  [32m✓ [90m#(1 1 0 -1 1 -1) is expected to be #(1 1 0 -1 1 -1)[0m 
[0m
  [32m✓ [90m6 is expected to be 6[0m 
[0m
  [32m✓ [90m#(32 45) is expected to be #(32 45)[0m 
[0m

[÷] Reciprocal / Divide
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m#(2 4 6) is expected to be #(2 4 6)[0m 
[0m
  [32m✓ [90m#(1/2 1/4 1/8) is expected to be #(1/2 1/4 1/8)[0m 
[0m

[⋆] Exponential / Power
  [32m✓ [90m7389 is expected to be 7389[0m 
[0m
  [32m✓ [90m16 is expected to be 16[0m 
[0m
  [32m✓ [90m4 is expected to be 4[0m 
[0m

[⍟] Natural Logarithm / Logarithm
  [32m✓ [90m1609 is expected to be 1609[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m

[|] Magnitude / Residue
  [32m✓ [90m55 is expected to be 55[0m 
[0m
  [32m✓ [90m33 is expected to be 33[0m 
[0m
  [32m✓ [90m7 is expected to be 7[0m 
[0m

[!] Factorial / Binomial
  [32m✓ [90m120 is expected to be 120[0m 
[0m
  [32m✓ [90m792 is expected to be 792[0m 
[0m

[⌈] Ceiling / Maximum
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m#(3 3 3 3 4 5) is expected to be #(3 3 3 3 4 5)[0m 
[0m

[⌊] Floor / Minimum
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(0 1 2 3 3 3) is expected to be #(0 1 2 3 3 3)[0m 
[0m

[○] Pi Times / Circular
  [32m✓ [90m314159 is expected to be 314159[0m 
[0m
(:SC "⌊1000×1÷2⋆÷2") 
  [32m✓ [90m1 is expected to be 1[0m 
[0m

[~] Not / Without
  [32m✓ [90m#(0 1 0) is expected to be #(0 1 0)[0m 
[0m
  [32m✓ [90m#(1 2 4 6 7) is expected to be #(1 2 4 6 7)[0m 
[0m
  [32m✓ [90m"MCNI" is expected to be "MCNI"[0m 
[0m

[<] Less
  [32m✓ [90m#(0 0 0 1 1) is expected to be #(0 0 0 1 1)[0m 
[0m

[≤] Less or Equal
  [32m✓ [90m#(0 0 1 1 1) is expected to be #(0 0 1 1 1)[0m 
[0m

[=] Equal
  [32m✓ [90m#(0 0 1 0 0) is expected to be #(0 0 1 0 0)[0m 
[0m

[≥] Greater or Equal
  [32m✓ [90m#(1 1 1 0 0) is expected to be #(1 1 1 0 0)[0m 
[0m

[>] Greater
  [32m✓ [90m#(1 1 0 0 0) is expected to be #(1 1 0 0 0)[0m 
[0m

[≠] Not Equal
  [32m✓ [90m#(1 1 0 1 1) is expected to be #(1 1 0 1 1)[0m 
[0m

[≡] Depth / Match
(:SC "2 3") 
(:SC "4 5 (6 7)") 
(:SC "6 7") 
(:SC "8") 
  [32m✓ [90m3 is expected to be 3[0m 
[0m

[≢] First Dimension / Not Match
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[∧] And
  [32m✓ [90m#(0 0 0 1) is expected to be #(0 0 0 1)[0m 
[0m

[⍲] Nand
  [32m✓ [90m#(1 1 1 0) is expected to be #(1 1 1 0)[0m 
[0m

[∨] Or
  [32m✓ [90m#(0 1 1 1) is expected to be #(0 1 1 1)[0m 
[0m

[⍱] Nor
  [32m✓ [90m#(1 0 0 0) is expected to be #(1 0 0 0)[0m 
[0m

[⍳] Index / Index Of
  [32m✓ [90m#(1 2 3 4 5) is expected to be #(1 2 3 4 5)[0m 
[0m
  [32m✓ [90m#(2 2 1 2 2) is expected to be #(2 2 1 2 2)[0m 
[0m

[⍴] Shape / Reshape
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m#(3 5) is expected to be #(3 5)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2)) is expected to be #2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2))[0m 
[0m

[⌷] At Axes
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m7 is expected to be 7[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(4 5 1 2) is expected to be #(4 5 1 2)[0m 
[0m

[∊] Enlist / Membership
  [32m✓ [90m#(1 2 3 4 5 6 7 8) is expected to be #(1 2 3 4 5 6 7 8)[0m 
[0m
  [32m✓ [90m#(1 1 0) is expected to be #(1 1 0)[0m 
[0m

[⍷] Find
(:SC "2 2⍴6 7 1 2") 
  [32m✓ [90m#3A(((0 0 0 0) (0 1 0 0) (0 0 0 0)) ((0 0 1 0) (0 0 0 0) (0 0 0 0))) is expected to be #3A(((0 0 0 0) (0 1 0 0) (0 0 0 0)) ((0 0 1 0) (0 0 0 0) (0 0 0 0)))[0m 
[0m

[↑] Disclose / Take
  [32m✓ [90m#(1 2 3 4) is expected to be #(1 2 3 4)[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1))) is expected to be #3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4)) ((4 5 6 7))) is expected to be #3A(((1 2 3 4)) ((4 5 6 7)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8)) ((4 5 6 7) (8 9 1 2))) is expected to be #3A(((1 2 3 4) (5 6 7 8)) ((4 5 6 7) (8 9 1 2)))[0m 
[0m
  [32m✓ [90m#3A(((1 2) (5 6) (9 1)) ((4 5) (8 9) (3 4))) is expected to be #3A(((1 2) (5 6) (9 1)) ((4 5) (8 9) (3 4)))[0m 
[0m

[↓] Split / Drop
  [32m✓ [90m#(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3)) is expected to be #(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3))[0m 
[0m
  [32m✓ [90m#3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3))) is expected to be #3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((4 5 6 7) (8 9 1 2) (3 4 5 6))) is expected to be #3A(((4 5 6 7) (8 9 1 2) (3 4 5 6)))[0m 
[0m
  [32m✓ [90m#3A(((5 6 7 8) (9 1 2 3)) ((8 9 1 2) (3 4 5 6))) is expected to be #3A(((5 6 7 8) (9 1 2 3)) ((8 9 1 2) (3 4 5 6)))[0m 
[0m
  [32m✓ [90m#3A(((9 1 2 3)) ((3 4 5 6))) is expected to be #3A(((9 1 2 3)) ((3 4 5 6)))[0m 
[0m
  [32m✓ [90m#3A(((3 4) (7 8) (2 3)) ((6 7) (1 2) (5 6))) is expected to be #3A(((3 4) (7 8) (2 3)) ((6 7) (1 2) (5 6)))[0m 
[0m
  [32m✓ [90m#(1 2 3 4 5 6 7) is expected to be #(1 2 3 4 5 6 7)[0m 
[0m

[,] Ravel / Catenate or Laminate
  [32m✓ [90m#(1 2 3 4 5 6 7 8 9 1 2 3) is expected to be #(1 2 3 4 5 6 7 8 9 1 2 3)[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4)) ((5 6 7 8)) ((9 1 2 3))) is expected to be #3A(((1 2 3 4)) ((5 6 7 8)) ((9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((1) (2) (3) (4)) ((5) (6) (7) (8)) ((9) (1) (2) (3))) is expected to be #3A(((1) (2) (3) (4)) ((5) (6) (7) (8)) ((9) (1) (2) (3)))[0m 
[0m
  [32m✓ [90m#2A((1 2 3) (4 5 6) (7 8 9) (10 11 12) (1 2 3) (4 5 6)) is expected to be #2A((1 2 3) (4 5 6) (7 8 9) (10 11 12) (1 2 3) (4 5 6))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8 9) (10 11 12 1 2 3 4 5 6)) is expected to be #2A((1 2 3 4 5 6 7 8 9) (10 11 12 1 2 3 4 5 6))[0m 
[0m
  [32m✓ [90m#(1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6)[0m 
[0m
  [32m✓ [90m#2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3)) is expected to be #2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
(:SC "3 6⍴⍳6") 
  [32m✓ [90m#2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3)) is expected to be #2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3))[0m 
[0m
(:SC "5 4⍴⍳6") 
  [32m✓ [90m#2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3)) is expected to be #2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3))[0m 
[0m
  [32m✓ [90m#(1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6)[0m 
[0m
  [32m✓ [90m#(1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (1 2 3 4)) is expected to be #2A((1 2 3 4) (1 2 3 4))[0m 
[0m
  [32m✓ [90m#2A((1 1) (2 2) (3 3) (4 4)) is expected to be #2A((1 1) (2 2) (3 3) (4 4))[0m 
[0m
(:SC "2 3⍴⍳9") 
  [32m✓ [90m#3A(((1 2 3) (4 5 6)) ((1 2 3) (4 5 6))) is expected to be #3A(((1 2 3) (4 5 6)) ((1 2 3) (4 5 6)))[0m 
[0m
(:SC "2 3⍴⍳9") 
  [32m✓ [90m#3A(((1 1) (2 2) (3 3)) ((4 4) (5 5) (6 6))) is expected to be #3A(((1 1) (2 2) (3 3)) ((4 4) (5 5) (6 6)))[0m 
[0m
  [32m✓ [90m#2A((#\U #\N #\D #\E #\R) (#\- #\- #\- #\- #\-)) is expected to be #2A((#\U #\N #\D #\E #\R) (#\- #\- #\- #\- #\-))[0m 
[0m
  [32m✓ [90m#2A((#\H #\.) (#\E #\.) (#\L #\.) (#\L #\.) (#\O #\.)) is expected to be #2A((#\H #\.) (#\E #\.) (#\L #\.) (#\L #\.) (#\O #\.))[0m 
[0m

[⍪] Table / Catenate First
  [32m✓ [90m#2A((#\M) (#\A) (#\K) (#\E)) is expected to be #2A((#\M) (#\A) (#\K) (#\E))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24)) is expected to be #2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24))[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3)) is expected to be #2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3))[0m 
[0m
(:SC "5 4⍴⍳6") 
  [32m✓ [90m#2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3)) is expected to be #2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3))[0m 
[0m
(:SC "3 6⍴⍳6") 
  [32m✓ [90m#2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3)) is expected to be #2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3))[0m 
[0m

[/] Replicate
  [32m✓ [90m#(3 3 3 3 3) is expected to be #(3 3 3 3 3)[0m 
[0m
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
  [32m✓ [90m#(1 1 1) is expected to be #(1 1 1)[0m 
[0m
  [32m✓ [90m#(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5)) is expected to be #(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5))[0m 
[0m
  [32m✓ [90m#2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)) is expected to be #2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6)) is expected to be #2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6))[0m 
[0m

[⌿] Replicate First
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6)) is expected to be #2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6))[0m 
[0m
  [32m✓ [90m#2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)) is expected to be #2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5))[0m 
[0m

[\] Expand
  [32m✓ [90m".  ...    ....." is expected to be ".  ...    ....."[0m 
[0m
  [32m✓ [90m#2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9)) is expected to be #2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9))[0m 
[0m
  [32m✓ [90m#2A((4 5 6) (0 0 0) (7 8 9)) is expected to be #2A((4 5 6) (0 0 0) (7 8 9))[0m 
[0m

[⍀] Expand First
  [32m✓ [90m#(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3) is expected to be #(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3)[0m 
[0m
  [32m✓ [90m#2A((4 5 6) (0 0 0) (7 8 9)) is expected to be #2A((4 5 6) (0 0 0) (7 8 9))[0m 
[0m

[⊂] Enclose / Partition
  [32m✓ [90m#(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5))) is expected to be #(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5)))[0m 
[0m
  [32m✓ [90m#2A(("GRAY" "GOLD" "BLUE") ("SILK" "WOOL" "YARN")) is expected to be #2A(("GRAY" "GOLD" "BLUE") ("SILK" "WOOL" "YARN"))[0m 
[0m
  [32m✓ [90m#2A(("GGB" "ROL" "ALU" "YDE") ("SWY" "IOA" "LOR" "KLN")) is expected to be #2A(("GGB" "ROL" "ALU" "YDE") ("SWY" "IOA" "LOR" "KLN"))[0m 
[0m
  [32m✓ [90m#2A(("GS" "RI" "AL" "YK") ("GW" "OO" "LO" "DL") ("BY" "LA" "UR" "EN")) is expected to be #2A(("GS" "RI" "AL" "YK") ("GW" "OO" "LO" "DL") ("BY" "LA" "UR" "EN"))[0m 
[0m
  [32m✓ [90m#(#2A((#\G #\R #\A #\Y) (#\G #\O #\L #\D) (#\B #\L #\U #\E))
      #2A((#\S #\I #\L #\K) (#\W #\O #\O #\L) (#\Y #\A #\R #\N))) is expected to be #(#2A((#\G #\R #\A #\Y) (#\G #\O #\L #\D) (#\B #\L #\U #\E))
      #2A((#\S #\I #\L #\K) (#\W #\O #\O #\L) (#\Y #\A #\R #\N)))[0m 
[0m
  [32m✓ [90m#(#2A((#\G #\R #\A #\Y) (#\S #\I #\L #\K))
      #2A((#\G #\O #\L #\D) (#\W #\O #\O #\L))
      #2A((#\B #\L #\U #\E) (#\Y #\A #\R #\N))) is expected to be #(#2A((#\G #\R #\A #\Y) (#\S #\I #\L #\K))
      #2A((#\G #\O #\L #\D) (#\W #\O #\O #\L))
      #2A((#\B #\L #\U #\E) (#\Y #\A #\R #\N)))[0m 
[0m
  [32m✓ [90m#(#2A((#\G #\G #\B) (#\S #\W #\Y)) #2A((#\R #\O #\L) (#\I #\O #\A))
      #2A((#\A #\L #\U) (#\L #\O #\R)) #2A((#\Y #\D #\E) (#\K #\L #\N))) is expected to be #(#2A((#\G #\G #\B) (#\S #\W #\Y)) #2A((#\R #\O #\L) (#\I #\O #\A))
      #2A((#\A #\L #\U) (#\L #\O #\R)) #2A((#\Y #\D #\E) (#\K #\L #\N)))[0m 
[0m
  [32m✓ [90m#(#(1 2) #(3 4 5) #(6 7 8 9)) is expected to be #(#(1 2) #(3 4 5) #(6 7 8 9))[0m 
[0m

[⍧] Partitioned Enclose
  [32m✓ [90m#(#(2 3 4) #(5) #(6 7 8 9)) is expected to be #(#(2 3 4) #(5) #(6 7 8 9))[0m 
[0m
  [32m✓ [90m#(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5))) is expected to be #(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5)))[0m 
[0m
  [32m✓ [90m#(#2A((9 1 2 3 4 5 6 7) (8 9 1 2 3 4 5 6)) #2A((7 8 9 1 2 3 4 5))) is expected to be #(#2A((9 1 2 3 4 5 6 7) (8 9 1 2 3 4 5 6)) #2A((7 8 9 1 2 3 4 5)))[0m 
[0m

[⊃] Mix / Pick
(:SC "1") 
(:SC "1 2") 
(:SC "1 2 3") 
  [32m✓ [90m#2A((1 0 0) (1 2 0) (1 2 3)) is expected to be #2A((1 0 0) (1 2 0) (1 2 3))[0m 
[0m
(:SC "1") 
(:SC "1 2") 
(:SC "1 2 3") 
  [32m✓ [90m#2A((1 1 1) (0 2 2) (0 0 3)) is expected to be #2A((1 1 1) (0 2 2) (0 0 3))[0m 
[0m
(:SC "2 3⍴⍳5") 
(:SC "4 2⍴⍳8") 
  [32m✓ [90m#3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0))) is expected to be #3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0)))[0m 
[0m
(:SC "2 3⍴⍳5") 
(:SC "4 2⍴⍳8") 
  [32m✓ [90m#3A(((1 4 0 0) (1 3 5 7)) ((2 5 0 0) (2 4 6 8)) ((3 1 0 0) (0 0 0 0))) is expected to be #3A(((1 4 0 0) (1 3 5 7)) ((2 5 0 0) (2 4 6 8)) ((3 1 0 0) (0 0 0 0)))[0m 
[0m
(:SC "2 3⍴⍳5") 
(:SC "4 2⍴⍳8") 
  [32m✓ [90m#3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0))) is expected to be #3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0)))[0m 
[0m
(:SC "1") 
(:SC "1 2") 
(:SC "3 4") 
(:SC "1 2 3") 
  [32m✓ [90m#4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3)))) is expected to be #4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))))[0m 
[0m
(:SC "1 2 3") 
(:SC "4 5 6") 
(:SC "7 8 9") 
  [32m✓ [90m#(4 5 6) is expected to be #(4 5 6)[0m 
[0m
(:SC "2 2") 
(:SC "1 2 3") 
(:SC "4 5 6") 
(:SC "7 8 9") 
  [32m✓ [90m5 is expected to be 5[0m 
[0m

[∪] Unique / Union
  [32m✓ [90m#(1 2 3 4 5 8 9 10 11 7 12) is expected to be #(1 2 3 4 5 8 9 10 11 7 12)[0m 
[0m
  [32m✓ [90m"MISP" is expected to be "MISP"[0m 
[0m
  [32m✓ [90m#(3 10 14 18 11 9 4 5 8) is expected to be #(3 10 14 18 11 9 4 5 8)[0m 
[0m
  [32m✓ [90m"STEELABR" is expected to be "STEELABR"[0m 
[0m
  [32m✓ [90m#("APRIL" "MAY" "JUNE") is expected to be #("APRIL" "MAY" "JUNE")[0m 
[0m

[∩] Intersection
  [32m✓ [90m"TRE" is expected to be "TRE"[0m 
[0m
  [32m✓ [90m"SEE" is expected to be "SEE"[0m 
[0m
  [32m✓ [90m#(1 4) is expected to be #(1 4)[0m 
[0m

[⌽] Reverse / Rotate
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
  [32m✓ [90m#2A((4 3 2 1) (8 7 6 5) (3 2 1 9)) is expected to be #2A((4 3 2 1) (8 7 6 5) (3 2 1 9))[0m 
[0m
  [32m✓ [90m#2A((3 4 1 2) (7 8 5 6) (2 3 9 1)) is expected to be #2A((3 4 1 2) (7 8 5 6) (2 3 9 1))[0m 
[0m

[⊖] Reverse First / Rotate First
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
  [32m✓ [90m#2A((9 1 2 3) (5 6 7 8) (1 2 3 4)) is expected to be #2A((9 1 2 3) (5 6 7 8) (1 2 3 4))[0m 
[0m
  [32m✓ [90m#2A((5 6 7 8) (9 1 2 3) (1 2 3 4)) is expected to be #2A((5 6 7 8) (9 1 2 3) (1 2 3 4))[0m 
[0m

[⍉] Transpose / Permute
  [32m✓ [90m#3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6))) is expected to be #3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6)))[0m 
[0m
  [32m✓ [90m#3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6))) is expected to be #3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6)))[0m 
[0m

[⌹] Matrix Inverse / Matrix Divide
  [32m✓ [90m#(1/30 1/15 1/10 2/15) is expected to be #(1/30 1/15 1/10 2/15)[0m 
[0m
  [32m✓ [90m#2A((-1/32 9/64) (1/8 -1/16)) is expected to be #2A((-1/32 9/64) (1/8 -1/16))[0m 
[0m
  [32m✓ [90m#2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42)) is expected to be #2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42))[0m 
[0m
  [32m✓ [90m#(193/90 739/90 229/45) is expected to be #(193/90 739/90 229/45)[0m 
[0m
(:SC "3 2⍴1 2 3 6 9 10") 
  [32m✓ [90m#2A((1 2) (2 4) (6 4)) is expected to be #2A((1 2) (2 4) (6 4))[0m 
[0m

[⍋] Grade Up / Grade Up By
  [32m✓ [90m#(5 7 2 3 6 1 4) is expected to be #(5 7 2 3 6 1 4)[0m 
[0m
  [32m✓ [90m#(1 4 2 5 3) is expected to be #(1 4 2 5 3)[0m 
[0m
  [32m✓ [90m"adeggijnouw" is expected to be "adeggijnouw"[0m 
[0m
(:SC "2 5⍴'ABCDEabcde'") 
  [32m✓ [90m#(1 3 2 6 4 5) is expected to be #(1 3 2 6 4 5)[0m 
[0m

[⍒] Grade Down / Grade Down By
  [32m✓ [90m#(7 3 1 5 6 4 2) is expected to be #(7 3 1 5 6 4 2)[0m 
[0m
  [32m✓ [90m#(2 4 1 3 5) is expected to be #(2 4 1 3 5)[0m 
[0m
  [32m✓ [90m"wuonjiggeda" is expected to be "wuonjiggeda"[0m 
[0m
(:SC "2 5⍴'ABCDEabcde'") 
  [32m✓ [90m#(5 4 6 2 3 1) is expected to be #(5 4 6 2 3 1)[0m 
[0m

[⊤] Encode
  [32m✓ [90m#(2 0 10) is expected to be #(2 0 10)[0m 
[0m
  [32m✓ [90m#(0 0 6 4) is expected to be #(0 0 6 4)[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1)) is expected to be #2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1))[0m 
[0m

[⊥] Decode
  [32m✓ [90m2671 is expected to be 2671[0m 
[0m
  [32m✓ [90m101 is expected to be 101[0m 
[0m
  [32m✓ [90m#(98 75 67) is expected to be #(98 75 67)[0m 
[0m

[⍎] Evaluate
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[←] Assign Result Of
  [32m✓ [90m#(8 7 6) is expected to be #(8 7 6)[0m 
[0m
  [32m✓ [90m#(3 7 1) is expected to be #(3 7 1)[0m 
[0m

[/] Reduce
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m#(10 26 42) is expected to be #(10 26 42)[0m 
[0m
  [32m✓ [90m#(15 18 21 24) is expected to be #(15 18 21 24)[0m 
[0m
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m

[⌿] Reduce First
  [32m✓ [90m#(15 18 21 24) is expected to be #(15 18 21 24)[0m 
[0m
  [32m✓ [90m#(207 330 495 708) is expected to be #(207 330 495 708)[0m 
[0m
  [32m✓ [90m#(10 26 42) is expected to be #(10 26 42)[0m 
[0m

[\] Scan
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
  [32m✓ [90m#2A((1 3 6 10) (5 11 18 26) (9 19 30 42)) is expected to be #2A((1 3 6 10) (5 11 18 26) (9 19 30 42))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (6 8 10 12) (15 18 21 24)) is expected to be #2A((1 2 3 4) (6 8 10 12) (15 18 21 24))[0m 
[0m

[⍀] Scan First
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (6 8 10 12) (15 18 21 24)) is expected to be #2A((1 2 3 4) (6 8 10 12) (15 18 21 24))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (20 30 42 56) (288 450 660 924)) is expected to be #2A((1 2 3 4) (20 30 42 56) (288 450 660 924))[0m 
[0m
  [32m✓ [90m#2A((1 3 6 10) (5 11 18 26) (9 19 30 42)) is expected to be #2A((1 3 6 10) (5 11 18 26) (9 19 30 42))[0m 
[0m

[.] Inner/Outer Product
  [32m✓ [90m24 is expected to be 24[0m 
[0m
  [32m✓ [90m145 is expected to be 145[0m 
[0m
  [32m✓ [90m#(17 41 55) is expected to be #(17 41 55)[0m 
[0m
(:SC "3 3⍴3 1 4 1 5 9 2 6 5") 
  [32m✓ [90m#(25 53 42) is expected to be #(25 53 42)[0m 
[0m
  [32m✓ [90m#2A((24 34 44 54) (25 35 45 55) (26 36 46 56)) is expected to be #2A((24 34 44 54) (25 35 45 55) (26 36 46 56))[0m 
[0m
  [32m✓ [90m#2A((0 -1 -2) (1 0 -1) (2 1 0)) is expected to be #2A((0 -1 -2) (1 0 -1) (2 1 0))[0m 
[0m
  [32m✓ [90m#2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3))) is expected to be #2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3)))[0m 
[0m
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
  [32m✓ [90m#(#(2 3 1) #(3 1 2) #(1 2 3)) is expected to be #(#(2 3 1) #(3 1 2) #(1 2 3))[0m 
[0m

[¨] Each
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
  [32m✓ [90m#(#(2 3 4 5 1) #(5 1 2 3 4)) is expected to be #(#(2 3 4 5 1) #(5 1 2 3 4))[0m 
[0m

[⍨] Commute
  [32m✓ [90m5 is expected to be 5[0m 
[0m
  [32m✓ [90m20 is expected to be 20[0m 
[0m

[∘] Compose
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
(:SC "÷∘5") 
  [32m✓ [90m6 is expected to be 6[0m 
[0m
(:SC "+∘*∘0.5") 
  [32m✓ [90m#(56487 176487 266487) is expected to be #(56487 176487 266487)[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m
(:SC "0.5∘+∘*") 
  [32m✓ [90m#(148 2981 162755) is expected to be #(148 2981 162755)[0m 
[0m
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m
  [32m✓ [90m#(3 15 36) is expected to be #(3 15 36)[0m 
[0m

[⍣] Power
  [32m✓ [90m11 is expected to be 11[0m 
[0m
(:SC "{2+⍵}⍣3") 
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m10 is expected to be 10[0m 
[0m

Basic function definition and use, with comments.
  [32m✓ [90m#(8 10 12 14 16) is expected to be #(8 10 12 14 16)[0m 
[0mMonadic inline function.
  [32m✓ [90m#(6 7 8) is expected to be #(6 7 8)[0m 
[0mDyadic inline function.
  [32m✓ [90m#(6 14 24) is expected to be #(6 14 24)[0m 
[0mVariable-referenced values, including an element within an array, in a vector.
  [32m✓ [90m#(1 2 9 3 5) is expected to be #(1 2 9 3 5)[0m 
[0mAssignment of an element within an array.
  [32m✓ [90m#2A((1 20 3) (4 5 6)) is expected to be #2A((1 20 3) (4 5 6))[0m 
[0mSelection from an array with multiple elided dimensions.
(:SC "2 3 3 4 5⍴⍳9") 
  [32m✓ [90m#2A((6 2 7 3) (3 8 4 9) (9 5 1 6)) is expected to be #2A((6 2 7 3) (3 8 4 9) (9 5 1 6))[0m 
[0mElided assignment.
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 0 7) (8 9 0 2) (3 4 0 6))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 0 7) (8 9 0 2) (3 4 0 6)))[0m 
[0mElided assignment of applied function's results.
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 16 7) (8 9 11 2) (3 4 15 6))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 16 7) (8 9 11 2) (3 4 15 6)))[0m 
[0mElision and indexed array elements.
(:SC "6 8⍴⍳9") 
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8) (7 8 9 1 2 3 4 5)) is expected to be #2A((1 2 3 4 5 6 7 8) (7 8 9 1 2 3 4 5))[0m 
[0mAs above but more complex.
(:SC "6 8 5⍴⍳9") 
  [32m✓ [90m#3A(((2 1) (7 6) (3 2) (8 7) (4 3) (9 8) (5 4) (1 9))
        ((5 4) (1 9) (6 5) (2 1) (7 6) (3 2) (8 7) (4 3))) is expected to be #3A(((2 1) (7 6) (3 2) (8 7) (4 3) (9 8) (5 4) (1 9))
        ((5 4) (1 9) (6 5) (2 1) (7 6) (3 2) (8 7) (4 3)))[0m 
[0mIndices of indices.
(:SC "6 8 5⍴⍳9") 
  [32m✓ [90m#2A((7 6) (8 7) (4 3)) is expected to be #2A((7 6) (8 7) (4 3))[0m 
[0mOperation over portions of an array.
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8)
        (19 1 2 3 4 15 16 17)
        (8 9 1 2 3 4 5 6)
        (17 8 9 1 2 13 14 15)) is expected to be #2A((1 2 3 4 5 6 7 8)
        (19 1 2 3 4 15 16 17)
        (8 9 1 2 3 4 5 6)
        (17 8 9 1 2 13 14 15))[0m 
[0m
[32m✓ 226 tests completed[0m [90m(1649ms)[0m
T
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 05:16:22 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.229
APRIL> (april (test))
1..226

[←] Assign
  [32m✓ [90m55 is expected to be 55[0m 
[0m
  [32m✓ [90m#3A(((7 7 7 7) (5 6 7 8) (9 1 2 3)) ((7 7 7 7) (8 9 1 2) (3 4 5 6))) is expected to be #3A(((7 7 7 7) (5 6 7 8) (9 1 2 3)) ((7 7 7 7) (8 9 1 2) (3 4 5 6)))[0m 
[0m

[⊣] Empty / Left
  [32m✓ [90m#() is expected to be #()[0m 
[0m
  [32m✓ [90m55 is expected to be 55[0m 
[0m

[⊢] Identity / Right
  [32m✓ [90m77 is expected to be 77[0m 
[0m
  [32m✓ [90m77 is expected to be 77[0m 
[0m

[+] Identity or Negate Imaginary / Add
  [32m✓ [90m5 is expected to be 5[0m 
[0m
  [32m✓ [90m#C(5 -2) is expected to be #C(5 -2)[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m#(2 3 4) is expected to be #(2 3 4)[0m 
[0m

[-] Negate / Subtract
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(5 4 3) is expected to be #(5 4 3)[0m 
[0m

[×] Direction / Multiply
  [32m✓ [90m#(1 1 0 -1 1 -1) is expected to be #(1 1 0 -1 1 -1)[0m 
[0m
  [32m✓ [90m6 is expected to be 6[0m 
[0m
  [32m✓ [90m#(32 45) is expected to be #(32 45)[0m 
[0m

[÷] Reciprocal / Divide
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m#(2 4 6) is expected to be #(2 4 6)[0m 
[0m
  [32m✓ [90m#(1/2 1/4 1/8) is expected to be #(1/2 1/4 1/8)[0m 
[0m

[⋆] Exponential / Power
  [32m✓ [90m7389 is expected to be 7389[0m 
[0m
  [32m✓ [90m16 is expected to be 16[0m 
[0m
  [32m✓ [90m4 is expected to be 4[0m 
[0m

[⍟] Natural Logarithm / Logarithm
  [32m✓ [90m1609 is expected to be 1609[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m

[|] Magnitude / Residue
  [32m✓ [90m55 is expected to be 55[0m 
[0m
  [32m✓ [90m33 is expected to be 33[0m 
[0m
  [32m✓ [90m7 is expected to be 7[0m 
[0m

[!] Factorial / Binomial
  [32m✓ [90m120 is expected to be 120[0m 
[0m
  [32m✓ [90m792 is expected to be 792[0m 
[0m

[⌈] Ceiling / Maximum
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m#(3 3 3 3 4 5) is expected to be #(3 3 3 3 4 5)[0m 
[0m

[⌊] Floor / Minimum
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(0 1 2 3 3 3) is expected to be #(0 1 2 3 3 3)[0m 
[0m

[○] Pi Times / Circular
  [32m✓ [90m314159 is expected to be 314159[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m

[~] Not / Without
  [32m✓ [90m#(0 1 0) is expected to be #(0 1 0)[0m 
[0m
  [32m✓ [90m#(1 2 4 6 7) is expected to be #(1 2 4 6 7)[0m 
[0m
  [32m✓ [90m"MCNI" is expected to be "MCNI"[0m 
[0m

[<] Less
  [32m✓ [90m#(0 0 0 1 1) is expected to be #(0 0 0 1 1)[0m 
[0m

[≤] Less or Equal
  [32m✓ [90m#(0 0 1 1 1) is expected to be #(0 0 1 1 1)[0m 
[0m

[=] Equal
  [32m✓ [90m#(0 0 1 0 0) is expected to be #(0 0 1 0 0)[0m 
[0m

[≥] Greater or Equal
  [32m✓ [90m#(1 1 1 0 0) is expected to be #(1 1 1 0 0)[0m 
[0m

[>] Greater
  [32m✓ [90m#(1 1 0 0 0) is expected to be #(1 1 0 0 0)[0m 
[0m

[≠] Not Equal
  [32m✓ [90m#(1 1 0 1 1) is expected to be #(1 1 0 1 1)[0m 
[0m

[≡] Depth / Match
  [32m✓ [90m3 is expected to be 3[0m 
[0m

[≢] First Dimension / Not Match
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[∧] And
  [32m✓ [90m#(0 0 0 1) is expected to be #(0 0 0 1)[0m 
[0m

[⍲] Nand
  [32m✓ [90m#(1 1 1 0) is expected to be #(1 1 1 0)[0m 
[0m

[∨] Or
  [32m✓ [90m#(0 1 1 1) is expected to be #(0 1 1 1)[0m 
[0m

[⍱] Nor
  [32m✓ [90m#(1 0 0 0) is expected to be #(1 0 0 0)[0m 
[0m

[⍳] Index / Index Of
  [32m✓ [90m#(1 2 3 4 5) is expected to be #(1 2 3 4 5)[0m 
[0m
  [32m✓ [90m#(2 2 1 2 2) is expected to be #(2 2 1 2 2)[0m 
[0m

[⍴] Shape / Reshape
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m#(3 5) is expected to be #(3 5)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2)) is expected to be #2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2))[0m 
[0m

[⌷] At Axes
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m7 is expected to be 7[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(4 5 1 2) is expected to be #(4 5 1 2)[0m 
[0m

[∊] Enlist / Membership
  [32m✓ [90m#(1 2 3 4 5 6 7 8) is expected to be #(1 2 3 4 5 6 7 8)[0m 
[0m
  [32m✓ [90m#(1 1 0) is expected to be #(1 1 0)[0m 
[0m

[⍷] Find
  [32m✓ [90m#3A(((0 0 0 0) (0 1 0 0) (0 0 0 0)) ((0 0 1 0) (0 0 0 0) (0 0 0 0))) is expected to be #3A(((0 0 0 0) (0 1 0 0) (0 0 0 0)) ((0 0 1 0) (0 0 0 0) (0 0 0 0)))[0m 
[0m

[↑] Disclose / Take
  [32m✓ [90m#(1 2 3 4) is expected to be #(1 2 3 4)[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1))) is expected to be #3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4)) ((4 5 6 7))) is expected to be #3A(((1 2 3 4)) ((4 5 6 7)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8)) ((4 5 6 7) (8 9 1 2))) is expected to be #3A(((1 2 3 4) (5 6 7 8)) ((4 5 6 7) (8 9 1 2)))[0m 
[0m
  [32m✓ [90m#3A(((1 2) (5 6) (9 1)) ((4 5) (8 9) (3 4))) is expected to be #3A(((1 2) (5 6) (9 1)) ((4 5) (8 9) (3 4)))[0m 
[0m

[↓] Split / Drop
  [32m✓ [90m#(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3)) is expected to be #(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3))[0m 
[0m
  [32m✓ [90m#3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3))) is expected to be #3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((4 5 6 7) (8 9 1 2) (3 4 5 6))) is expected to be #3A(((4 5 6 7) (8 9 1 2) (3 4 5 6)))[0m 
[0m
  [32m✓ [90m#3A(((5 6 7 8) (9 1 2 3)) ((8 9 1 2) (3 4 5 6))) is expected to be #3A(((5 6 7 8) (9 1 2 3)) ((8 9 1 2) (3 4 5 6)))[0m 
[0m
  [32m✓ [90m#3A(((9 1 2 3)) ((3 4 5 6))) is expected to be #3A(((9 1 2 3)) ((3 4 5 6)))[0m 
[0m
  [32m✓ [90m#3A(((3 4) (7 8) (2 3)) ((6 7) (1 2) (5 6))) is expected to be #3A(((3 4) (7 8) (2 3)) ((6 7) (1 2) (5 6)))[0m 
[0m
  [32m✓ [90m#(1 2 3 4 5 6 7) is expected to be #(1 2 3 4 5 6 7)[0m 
[0m

[,] Ravel / Catenate or Laminate
  [32m✓ [90m#(1 2 3 4 5 6 7 8 9 1 2 3) is expected to be #(1 2 3 4 5 6 7 8 9 1 2 3)[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4)) ((5 6 7 8)) ((9 1 2 3))) is expected to be #3A(((1 2 3 4)) ((5 6 7 8)) ((9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((1) (2) (3) (4)) ((5) (6) (7) (8)) ((9) (1) (2) (3))) is expected to be #3A(((1) (2) (3) (4)) ((5) (6) (7) (8)) ((9) (1) (2) (3)))[0m 
[0m
  [32m✓ [90m#2A((1 2 3) (4 5 6) (7 8 9) (10 11 12) (1 2 3) (4 5 6)) is expected to be #2A((1 2 3) (4 5 6) (7 8 9) (10 11 12) (1 2 3) (4 5 6))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8 9) (10 11 12 1 2 3 4 5 6)) is expected to be #2A((1 2 3 4 5 6 7 8 9) (10 11 12 1 2 3 4 5 6))[0m 
[0m
  [32m✓ [90m#(1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6)[0m 
[0m
  [32m✓ [90m#2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3)) is expected to be #2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3)) is expected to be #2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3)) is expected to be #2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3))[0m [33m(39ms)[0m
[0m
  [32m✓ [90m#(1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6)[0m 
[0m
  [32m✓ [90m#(1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (1 2 3 4)) is expected to be #2A((1 2 3 4) (1 2 3 4))[0m 
[0m
  [32m✓ [90m#2A((1 1) (2 2) (3 3) (4 4)) is expected to be #2A((1 1) (2 2) (3 3) (4 4))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3) (4 5 6)) ((1 2 3) (4 5 6))) is expected to be #3A(((1 2 3) (4 5 6)) ((1 2 3) (4 5 6)))[0m 
[0m
  [32m✓ [90m#3A(((1 1) (2 2) (3 3)) ((4 4) (5 5) (6 6))) is expected to be #3A(((1 1) (2 2) (3 3)) ((4 4) (5 5) (6 6)))[0m [33m(50ms)[0m
[0m
  [32m✓ [90m#2A((#\U #\N #\D #\E #\R) (#\- #\- #\- #\- #\-)) is expected to be #2A((#\U #\N #\D #\E #\R) (#\- #\- #\- #\- #\-))[0m 
[0m
  [32m✓ [90m#2A((#\H #\.) (#\E #\.) (#\L #\.) (#\L #\.) (#\O #\.)) is expected to be #2A((#\H #\.) (#\E #\.) (#\L #\.) (#\L #\.) (#\O #\.))[0m 
[0m

[⍪] Table / Catenate First
  [32m✓ [90m#2A((#\M) (#\A) (#\K) (#\E)) is expected to be #2A((#\M) (#\A) (#\K) (#\E))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24)) is expected to be #2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24))[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3)) is expected to be #2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3)) is expected to be #2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3)) is expected to be #2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3))[0m 
[0m

[/] Replicate
  [32m✓ [90m#(3 3 3 3 3) is expected to be #(3 3 3 3 3)[0m 
[0m
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
  [32m✓ [90m#(1 1 1) is expected to be #(1 1 1)[0m 
[0m
  [32m✓ [90m#(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5)) is expected to be #(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5))[0m 
[0m
  [32m✓ [90m#2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)) is expected to be #2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6)) is expected to be #2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6))[0m 
[0m

[⌿] Replicate First
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6)) is expected to be #2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6))[0m 
[0m
  [32m✓ [90m#2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)) is expected to be #2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5))[0m 
[0m

[\] Expand
  [32m✓ [90m".  ...    ....." is expected to be ".  ...    ....."[0m 
[0m
  [32m✓ [90m#2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9)) is expected to be #2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9))[0m 
[0m
  [32m✓ [90m#2A((4 5 6) (0 0 0) (7 8 9)) is expected to be #2A((4 5 6) (0 0 0) (7 8 9))[0m 
[0m

[⍀] Expand First
  [32m✓ [90m#(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3) is expected to be #(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3)[0m 
[0m
  [32m✓ [90m#2A((4 5 6) (0 0 0) (7 8 9)) is expected to be #2A((4 5 6) (0 0 0) (7 8 9))[0m 
[0m

[⊂] Enclose / Partition
  [32m✓ [90m#(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5))) is expected to be #(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5)))[0m [33m(47ms)[0m
[0m
  [32m✓ [90m#2A(("GRAY" "GOLD" "BLUE") ("SILK" "WOOL" "YARN")) is expected to be #2A(("GRAY" "GOLD" "BLUE") ("SILK" "WOOL" "YARN"))[0m 
[0m
  [32m✓ [90m#2A(("GGB" "ROL" "ALU" "YDE") ("SWY" "IOA" "LOR" "KLN")) is expected to be #2A(("GGB" "ROL" "ALU" "YDE") ("SWY" "IOA" "LOR" "KLN"))[0m 
[0m
  [32m✓ [90m#2A(("GS" "RI" "AL" "YK") ("GW" "OO" "LO" "DL") ("BY" "LA" "UR" "EN")) is expected to be #2A(("GS" "RI" "AL" "YK") ("GW" "OO" "LO" "DL") ("BY" "LA" "UR" "EN"))[0m 
[0m
  [32m✓ [90m#(#2A((#\G #\R #\A #\Y) (#\G #\O #\L #\D) (#\B #\L #\U #\E))
      #2A((#\S #\I #\L #\K) (#\W #\O #\O #\L) (#\Y #\A #\R #\N))) is expected to be #(#2A((#\G #\R #\A #\Y) (#\G #\O #\L #\D) (#\B #\L #\U #\E))
      #2A((#\S #\I #\L #\K) (#\W #\O #\O #\L) (#\Y #\A #\R #\N)))[0m 
[0m
  [32m✓ [90m#(#2A((#\G #\R #\A #\Y) (#\S #\I #\L #\K))
      #2A((#\G #\O #\L #\D) (#\W #\O #\O #\L))
      #2A((#\B #\L #\U #\E) (#\Y #\A #\R #\N))) is expected to be #(#2A((#\G #\R #\A #\Y) (#\S #\I #\L #\K))
      #2A((#\G #\O #\L #\D) (#\W #\O #\O #\L))
      #2A((#\B #\L #\U #\E) (#\Y #\A #\R #\N)))[0m 
[0m
  [32m✓ [90m#(#2A((#\G #\G #\B) (#\S #\W #\Y)) #2A((#\R #\O #\L) (#\I #\O #\A))
      #2A((#\A #\L #\U) (#\L #\O #\R)) #2A((#\Y #\D #\E) (#\K #\L #\N))) is expected to be #(#2A((#\G #\G #\B) (#\S #\W #\Y)) #2A((#\R #\O #\L) (#\I #\O #\A))
      #2A((#\A #\L #\U) (#\L #\O #\R)) #2A((#\Y #\D #\E) (#\K #\L #\N)))[0m 
[0m
  [32m✓ [90m#(#(1 2) #(3 4 5) #(6 7 8 9)) is expected to be #(#(1 2) #(3 4 5) #(6 7 8 9))[0m 
[0m

[⍧] Partitioned Enclose
  [32m✓ [90m#(#(2 3 4) #(5) #(6 7 8 9)) is expected to be #(#(2 3 4) #(5) #(6 7 8 9))[0m 
[0m
  [32m✓ [90m#(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5))) is expected to be #(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5)))[0m 
[0m
  [32m✓ [90m#(#2A((9 1 2 3 4 5 6 7) (8 9 1 2 3 4 5 6)) #2A((7 8 9 1 2 3 4 5))) is expected to be #(#2A((9 1 2 3 4 5 6 7) (8 9 1 2 3 4 5 6)) #2A((7 8 9 1 2 3 4 5)))[0m 
[0m

[⊃] Mix / Pick
  [32m✓ [90m#2A((1 0 0) (1 2 0) (1 2 3)) is expected to be #2A((1 0 0) (1 2 0) (1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 1 1) (0 2 2) (0 0 3)) is expected to be #2A((1 1 1) (0 2 2) (0 0 3))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0))) is expected to be #3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0)))[0m 
[0m
  [32m✓ [90m#3A(((1 4 0 0) (1 3 5 7)) ((2 5 0 0) (2 4 6 8)) ((3 1 0 0) (0 0 0 0))) is expected to be #3A(((1 4 0 0) (1 3 5 7)) ((2 5 0 0) (2 4 6 8)) ((3 1 0 0) (0 0 0 0)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0))) is expected to be #3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0)))[0m 
[0m
  [32m✓ [90m#4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3)))) is expected to be #4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))))[0m 
[0m
  [32m✓ [90m#(4 5 6) is expected to be #(4 5 6)[0m 
[0m
  [32m✓ [90m5 is expected to be 5[0m 
[0m

[∪] Unique / Union
  [32m✓ [90m#(1 2 3 4 5 8 9 10 11 7 12) is expected to be #(1 2 3 4 5 8 9 10 11 7 12)[0m 
[0m
  [32m✓ [90m"MISP" is expected to be "MISP"[0m 
[0m
  [32m✓ [90m#(3 10 14 18 11 9 4 5 8) is expected to be #(3 10 14 18 11 9 4 5 8)[0m 
[0m
  [32m✓ [90m"STEELABR" is expected to be "STEELABR"[0m 
[0m
  [32m✓ [90m#("APRIL" "MAY" "JUNE") is expected to be #("APRIL" "MAY" "JUNE")[0m 
[0m

[∩] Intersection
  [32m✓ [90m"TRE" is expected to be "TRE"[0m 
[0m
  [32m✓ [90m"SEE" is expected to be "SEE"[0m 
[0m
  [32m✓ [90m#(1 4) is expected to be #(1 4)[0m 
[0m

[⌽] Reverse / Rotate
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
  [32m✓ [90m#2A((4 3 2 1) (8 7 6 5) (3 2 1 9)) is expected to be #2A((4 3 2 1) (8 7 6 5) (3 2 1 9))[0m 
[0m
  [32m✓ [90m#2A((3 4 1 2) (7 8 5 6) (2 3 9 1)) is expected to be #2A((3 4 1 2) (7 8 5 6) (2 3 9 1))[0m 
[0m

[⊖] Reverse First / Rotate First
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
  [32m✓ [90m#2A((9 1 2 3) (5 6 7 8) (1 2 3 4)) is expected to be #2A((9 1 2 3) (5 6 7 8) (1 2 3 4))[0m 
[0m
  [32m✓ [90m#2A((5 6 7 8) (9 1 2 3) (1 2 3 4)) is expected to be #2A((5 6 7 8) (9 1 2 3) (1 2 3 4))[0m 
[0m

[⍉] Transpose / Permute
  [32m✓ [90m#3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6))) is expected to be #3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6)))[0m 
[0m
  [32m✓ [90m#3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6))) is expected to be #3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6)))[0m 
[0m

[⌹] Matrix Inverse / Matrix Divide
  [32m✓ [90m#(1/30 1/15 1/10 2/15) is expected to be #(1/30 1/15 1/10 2/15)[0m 
[0m
  [32m✓ [90m#2A((-1/32 9/64) (1/8 -1/16)) is expected to be #2A((-1/32 9/64) (1/8 -1/16))[0m 
[0m
  [32m✓ [90m#2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42)) is expected to be #2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42))[0m 
[0m
  [32m✓ [90m#(193/90 739/90 229/45) is expected to be #(193/90 739/90 229/45)[0m 
[0m
  [32m✓ [90m#2A((1 2) (2 4) (6 4)) is expected to be #2A((1 2) (2 4) (6 4))[0m 
[0m

[⍋] Grade Up / Grade Up By
  [32m✓ [90m#(5 7 2 3 6 1 4) is expected to be #(5 7 2 3 6 1 4)[0m 
[0m
  [32m✓ [90m#(1 4 2 5 3) is expected to be #(1 4 2 5 3)[0m 
[0m
  [32m✓ [90m"adeggijnouw" is expected to be "adeggijnouw"[0m 
[0m
  [32m✓ [90m#(1 3 2 6 4 5) is expected to be #(1 3 2 6 4 5)[0m 
[0m

[⍒] Grade Down / Grade Down By
  [32m✓ [90m#(7 3 1 5 6 4 2) is expected to be #(7 3 1 5 6 4 2)[0m 
[0m
  [32m✓ [90m#(2 4 1 3 5) is expected to be #(2 4 1 3 5)[0m 
[0m
  [32m✓ [90m"wuonjiggeda" is expected to be "wuonjiggeda"[0m 
[0m
  [32m✓ [90m#(5 4 6 2 3 1) is expected to be #(5 4 6 2 3 1)[0m 
[0m

[⊤] Encode
  [32m✓ [90m#(2 0 10) is expected to be #(2 0 10)[0m 
[0m
  [32m✓ [90m#(0 0 6 4) is expected to be #(0 0 6 4)[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1)) is expected to be #2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1))[0m 
[0m

[⊥] Decode
  [32m✓ [90m2671 is expected to be 2671[0m 
[0m
  [32m✓ [90m101 is expected to be 101[0m 
[0m
  [32m✓ [90m#(98 75 67) is expected to be #(98 75 67)[0m 
[0m

[⍎] Evaluate
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[←] Assign Result Of
  [32m✓ [90m#(8 7 6) is expected to be #(8 7 6)[0m 
[0m
  [32m✓ [90m#(3 7 1) is expected to be #(3 7 1)[0m 
[0m

[/] Reduce
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m#(10 26 42) is expected to be #(10 26 42)[0m 
[0m
  [32m✓ [90m#(15 18 21 24) is expected to be #(15 18 21 24)[0m 
[0m
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m

[⌿] Reduce First
  [32m✓ [90m#(15 18 21 24) is expected to be #(15 18 21 24)[0m 
[0m
  [32m✓ [90m#(207 330 495 708) is expected to be #(207 330 495 708)[0m 
[0m
  [32m✓ [90m#(10 26 42) is expected to be #(10 26 42)[0m 
[0m

[\] Scan
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
  [32m✓ [90m#2A((1 3 6 10) (5 11 18 26) (9 19 30 42)) is expected to be #2A((1 3 6 10) (5 11 18 26) (9 19 30 42))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (6 8 10 12) (15 18 21 24)) is expected to be #2A((1 2 3 4) (6 8 10 12) (15 18 21 24))[0m 
[0m

[⍀] Scan First
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (6 8 10 12) (15 18 21 24)) is expected to be #2A((1 2 3 4) (6 8 10 12) (15 18 21 24))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (20 30 42 56) (288 450 660 924)) is expected to be #2A((1 2 3 4) (20 30 42 56) (288 450 660 924))[0m 
[0m
  [32m✓ [90m#2A((1 3 6 10) (5 11 18 26) (9 19 30 42)) is expected to be #2A((1 3 6 10) (5 11 18 26) (9 19 30 42))[0m 
[0m

[.] Inner/Outer Product
  [32m✓ [90m24 is expected to be 24[0m 
[0m
  [32m✓ [90m145 is expected to be 145[0m 
[0m
  [32m✓ [90m#(17 41 55) is expected to be #(17 41 55)[0m 
[0m
  [32m✓ [90m#(25 53 42) is expected to be #(25 53 42)[0m 
[0m
  [32m✓ [90m#2A((24 34 44 54) (25 35 45 55) (26 36 46 56)) is expected to be #2A((24 34 44 54) (25 35 45 55) (26 36 46 56))[0m 
[0m
  [32m✓ [90m#2A((0 -1 -2) (1 0 -1) (2 1 0)) is expected to be #2A((0 -1 -2) (1 0 -1) (2 1 0))[0m 
[0m
  [32m✓ [90m#2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3))) is expected to be #2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3)))[0m 
[0m
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
  [32m✓ [90m#(#(2 3 1) #(3 1 2) #(1 2 3)) is expected to be #(#(2 3 1) #(3 1 2) #(1 2 3))[0m 
[0m

[¨] Each
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
  [32m✓ [90m#(#(2 3 4 5 1) #(5 1 2 3 4)) is expected to be #(#(2 3 4 5 1) #(5 1 2 3 4))[0m 
[0m

[⍨] Commute
  [32m✓ [90m5 is expected to be 5[0m 
[0m
  [32m✓ [90m20 is expected to be 20[0m 
[0m

[∘] Compose
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m6 is expected to be 6[0m 
[0m
  [32m✓ [90m#(56487 176487 266487) is expected to be #(56487 176487 266487)[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m#(148 2981 162755) is expected to be #(148 2981 162755)[0m 
[0m
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m
  [32m✓ [90m#(3 15 36) is expected to be #(3 15 36)[0m 
[0m

[⍣] Power
  [32m✓ [90m11 is expected to be 11[0m 
[0m
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m10 is expected to be 10[0m 
[0m

Basic function definition and use, with comments.
  [32m✓ [90m#(8 10 12 14 16) is expected to be #(8 10 12 14 16)[0m 
[0mMonadic inline function.
  [32m✓ [90m#(6 7 8) is expected to be #(6 7 8)[0m 
[0mDyadic inline function.
  [32m✓ [90m#(6 14 24) is expected to be #(6 14 24)[0m 
[0mVariable-referenced values, including an element within an array, in a vector.
  [32m✓ [90m#(1 2 9 3 5) is expected to be #(1 2 9 3 5)[0m 
[0mAssignment of an element within an array.
  [32m✓ [90m#2A((1 20 3) (4 5 6)) is expected to be #2A((1 20 3) (4 5 6))[0m 
[0mSelection from an array with multiple elided dimensions.
  [32m✓ [90m#2A((6 2 7 3) (3 8 4 9) (9 5 1 6)) is expected to be #2A((6 2 7 3) (3 8 4 9) (9 5 1 6))[0m 
[0mElided assignment.
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 0 7) (8 9 0 2) (3 4 0 6))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 0 7) (8 9 0 2) (3 4 0 6)))[0m 
[0mElided assignment of applied function's results.
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 16 7) (8 9 11 2) (3 4 15 6))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 16 7) (8 9 11 2) (3 4 15 6)))[0m 
[0mElision and indexed array elements.
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8) (7 8 9 1 2 3 4 5)) is expected to be #2A((1 2 3 4 5 6 7 8) (7 8 9 1 2 3 4 5))[0m 
[0mAs above but more complex.
  [32m✓ [90m#3A(((2 1) (7 6) (3 2) (8 7) (4 3) (9 8) (5 4) (1 9))
        ((5 4) (1 9) (6 5) (2 1) (7 6) (3 2) (8 7) (4 3))) is expected to be #3A(((2 1) (7 6) (3 2) (8 7) (4 3) (9 8) (5 4) (1 9))
        ((5 4) (1 9) (6 5) (2 1) (7 6) (3 2) (8 7) (4 3)))[0m 
[0mIndices of indices.
  [32m✓ [90m#2A((7 6) (8 7) (4 3)) is expected to be #2A((7 6) (8 7) (4 3))[0m 
[0mOperation over portions of an array.
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8)
        (19 1 2 3 4 15 16 17)
        (8 9 1 2 3 4 5 6)
        (17 8 9 1 2 13 14 15)) is expected to be #2A((1 2 3 4 5 6 7 8)
        (19 1 2 3 4 15 16 17)
        (8 9 1 2 3 4 5 6)
        (17 8 9 1 2 13 14 15))[0m 
[0m
[32m✓ 226 tests completed[0m [90m(1511ms)[0m
T
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 06:34:29 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.679
APRIL> (april "g←{3+⍵} ◊ {5+⍵} 9")

(:XX ⍵) 
(:XX (:FN #\+)) 
(:XX 5) 
(:XX NIL) 
(:XX ⍵) 
(:XX (:FN #\+)) 
(:XX 3) 
(:XX NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100651B54B}>)) 
(:XX (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:XX #:G3444) 
(:XX NIL) 
(:XX 9) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100650E30B}>)) 
(:XX NIL) 
14
APRIL> (april "g←{3+⍵} ◊ {g 5+⍵} 9")

(:XX ⍵) 
(:XX (:FN #\+)) 
(:XX 5) 
(:XX #:G3446) 
(:XX NIL) 
(:XX ⍵) 
(:XX (:FN #\+)) 
(:XX 3) 
(:XX NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10065A618B}>)) 
(:XX (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:XX #:G3445) 
(:XX NIL) 
(:XX 9) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1006598F3B}>)) 
(:XX NIL) ; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (vex::parse "g←{3+⍵} ◊ {g 5+⍵} 9" (vex::=vex-string *april-idiom* (make-hash-table)))

(:XX ⍵) 
(:XX (:FN #\+)) 
(:XX 5) 
(:XX #:G3448) 
(:XX NIL) 
(:XX ⍵) 
(:XX (:FN #\+)) 
(:XX 3) 
(:XX NIL) 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10068DE39B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3447)
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10068D115B}>)))
T
T
APRIL> (april "g←{3+⍵} ◊ {g 5+⍵} 9")

(:XX ⍵) 
(:XX (:FN #\+)) 
(:XX 5) 
(:XX #:G3450) 
(:XX NIL) 
(:XX ⍵) 
(:XX (:FN #\+)) 
(:XX 3) 
(:XX NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100695135B}>)) 
(:XX (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:XX #:G3449) 
(:XX NIL) 
(:XX 9) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1006943FDB}>)) 
(:XX NIL) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 06:37:23 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.585
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ {g 5+⍵} 9")

(:XX ⍵ NIL) 
(:XX (:FN #\+) NIL) 
(:XX 5 NIL) 
(:XX #:G3452 NIL) 
(:XX NIL NIL) 
(:XX ⍵ NIL) 
(:XX (:FN #\+) NIL) 
(:XX 3 NIL) 
(:XX NIL NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100246D21B}>)
 NIL) 
(:XX (:OP :LATERAL #\LEFTWARDS_ARROW) NIL) 
(:XX #:G3451 NIL) 
(:XX NIL NIL) 
(:XX 9 NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100245FE8B}>)
 NIL) 
(:XX NIL NIL) ; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ {5+⍵} 9")

(:XX ⍵ NIL) 
(:XX (:FN #\+) NIL) 
(:XX 5 NIL) 
(:XX NIL NIL) 
(:XX ⍵ NIL) 
(:XX (:FN #\+) NIL) 
(:XX 3 NIL) 
(:XX NIL NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10026A7A7B}>)
 NIL) 
(:XX (:OP :LATERAL #\LEFTWARDS_ARROW) NIL) 
(:XX #:G3453 NIL) 
(:XX NIL NIL) 
(:XX 9 NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100269271B}>)
 NIL) 
(:XX NIL NIL) 
14
APRIL> (april "g←{3+⍵} ◊ g 9")

(:XX ⍵ NIL) 
(:XX (:FN #\+) NIL) 
(:XX 3 NIL) 
(:XX NIL NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100272CAFB}>)
 NIL) 
(:XX (:OP :LATERAL #\LEFTWARDS_ARROW) NIL) 
(:XX #:G3454 NIL) 
(:XX NIL NIL) 
(:XX 9 NIL) 
(:XX #:G3454
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:XX NIL NIL) 
12
APRIL> (april "g←{3+⍵} ◊ {g 5+⍵} 9")

(:XX ⍵ NIL) 
(:XX (:FN #\+) NIL) 
(:XX 5 NIL) 
(:XX #:G3456 NIL) 
(:XX NIL NIL) 
(:XX ⍵ NIL) 
(:XX (:FN #\+) NIL) 
(:XX 3 NIL) 
(:XX NIL NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100279E54B}>)
 NIL) 
(:XX (:OP :LATERAL #\LEFTWARDS_ARROW) NIL) 
(:XX #:G3455 NIL) 
(:XX NIL NIL) 
(:XX 9 NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10027911EB}>)
 NIL) 
(:XX NIL NIL) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 07:05:36 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.294
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ {g 5+⍵} 9")

(:STR "g") 
(:STR "g") 
(:STR "5") 
(:STR "⍵") 
(:XX ⍵ NIL) 
(:XX (:FN #\+) NIL) 
(:XX 5 NIL) 
(:XX #:G3458 NIL) 
(:XX NIL NIL) 
(:STR "9") 
(:STR "3") 
(:STR "⍵") 
(:XX ⍵ NIL) 
(:XX (:FN #\+) NIL) 
(:XX 3 NIL) 
(:XX NIL NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1007B6C9FB}>)
 NIL) 
(:XX (:OP :LATERAL #\LEFTWARDS_ARROW) NIL) 
(:XX #:G3457 NIL) 
(:XX NIL NIL) 
(:XX 9 NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1007B5CEDB}>)
 NIL) 
(:XX NIL NIL) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 07:06:34 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.233
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ {g 5+⍵} 9")

(:STR "g" #:G3459) 
(:STR "g" #:G3460) 
(:STR "5" 5) 
(:STR "⍵" ⍵) 
(:XX ⍵ NIL) 
(:XX (:FN #\+) NIL) 
(:XX 5 NIL) 
(:XX #:G3460 NIL) 
(:XX NIL NIL) 
(:STR "9" 9) 
(:STR "3" 3) 
(:STR "⍵" ⍵) 
(:XX ⍵ NIL) 
(:XX (:FN #\+) NIL) 
(:XX 3 NIL) 
(:XX NIL NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1006DEB0CB}>)
 NIL) 
(:XX (:OP :LATERAL #\LEFTWARDS_ARROW) NIL) 
(:XX #:G3459 NIL) 
(:XX NIL NIL) 
(:XX 9 NIL) 
(:XX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1006DDB26B}>)
 NIL) 
(:XX NIL NIL) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 07:08:18 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.319
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ {g 5+⍵} 9")

(:ELEM "g" NIL) 
(:STR "g" #:G3461) 
(:ELEM "g" #:G3461) 
(:ELEM "g" NIL) 
(:STR "g" #:G3462) 
(:ELEM "g" #:G3462) 
(:STR "5" 5) 
(:STR "⍵" ⍵) 
(:STR "9" 9) 
(:STR "3" 3) 
(:STR "⍵" ⍵) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 07:10:23 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.415
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ {g 5+⍵} 9")

(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1001DA2FB3}> NIL) 
(:STR "g" #:G3463) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1001DA2FB3}> #:G3463) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1001DE0673}> NIL) 
(:STR "g" #:G3464) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1001DE0673}> #:G3464) 
(:STR "5" 5) 
(:STR "⍵" ⍵) 
(:STR "9" 9) 
(:STR "3" 3) 
(:STR "⍵" ⍵) ; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (vex::parse "g←{3+⍵} ◊ {g 5+⍵} 9" (vex::=vex-string *april-idiom* (make-hash-table)))

(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10020B4333}> NIL) 
(:STR "g" #:G3465) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10020B4333}> #:G3465) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10020B7F63}> NIL) 
(:STR "g" #:G3466) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10020B7F63}> #:G3466) 
(:STR "5" 5) 
(:STR "⍵" ⍵) 
(:STR "9" 9) 
(:STR "3" 3) 
(:STR "⍵" ⍵) 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10020CFD4B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3465)
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10020C334B}>)))
T
T
APRIL> (april " {g 5+⍵} 9 ◊ g←{3+⍵}")

(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10020D9613}> NIL) 
(:STR "g" #:G3467) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10020D9613}> #:G3467) 
(:STR "5" 5) 
(:STR "⍵" ⍵) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10020D4D63}> NIL) 
(:STR "g" #:G3468) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10020D4D63}> #:G3468) 
(:STR "3" 3) 
(:STR "⍵" ⍵) 
(:STR "9" 9) ; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ {g 5+⍵} 9")

(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10023AB293}> NIL) 
(:STR "g" #:G3469) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10023AB293}> #:G3469) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10023B3113}> NIL) 
(:STR "g" #:G3470) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10023B3113}> #:G3470) 
(:STR "5" 5) 
(:STR "⍵" ⍵) 
(:STR "9" 9) 
(:STR "3" 3) 
(:STR "⍵" ⍵) ; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "2+2 ◊ 1+1")

(:STR "2" 2) 
(:STR "1" 1) 
(:STR "1" 1) 
(:STR "2" 2) 
2
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 07:14:04 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.171
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 07:10:23 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.435
APRIL> (april "2+2 ◊ 1+1")
2
APRIL> (april "g←5 ◊ 1+g 9")

(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1002AE6AE3}> NIL) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1002AE6AE3}> #:G3471) 
#(6 10)
APRIL> (april "g←5 ◊ e←2 ◊ 1+g e 9")

(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1002B2C4F3}> NIL) 
(:ELEM "e" #<HASH-TABLE :TEST EQ :COUNT 1 {1002B2C4F3}> NIL) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 2 {1002B2C4F3}> #:G3472) 
(:ELEM "e" #<HASH-TABLE :TEST EQ :COUNT 2 {1002B2C4F3}> #:G3473) 
#(6 3 10)
APRIL> (april "g←{3+⍵} ◊ e←2 ◊ {g 5+⍵} 9")

(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1002B7A3D3}> NIL) 
(:ELEM "e" #<HASH-TABLE :TEST EQ :COUNT 1 {1002B7A3D3}> NIL) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1002B8B023}> NIL) ; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ e←2 ◊ {e+⍵} 9")

(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1002DB32C3}> NIL) 
(:ELEM "e" #<HASH-TABLE :TEST EQ :COUNT 1 {1002DB32C3}> NIL) 
(:ELEM "e" #<HASH-TABLE :TEST EQ :COUNT 0 {1002DBBE33}> NIL) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 07:17:08 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.398
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ e←2 ◊ {e+⍵} 9")

(:EL "g") 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1003853353}> NIL) 
(:EL "e") 
(:ELEM "e" #<HASH-TABLE :TEST EQ :COUNT 1 {1003853353}> NIL) 
(:EL "e") 
(:ELEM "e" #<HASH-TABLE :TEST EQ :COUNT 0 {1003892933}> NIL) 
(:EL "⍵") 
(:EL "9") 
(:EL "2") 
(:EL "3") 
(:EL "⍵") 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 07:18:23 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.304
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ e←2 ◊ {e+⍵} 9")

(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1006E9E923}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1006E9ECA3}> NIL) 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {1006E9E923}>) 
(:ELEM "e" #<HASH-TABLE :TEST EQ :COUNT 1 {1006E9ECA3}> NIL) 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {1006EA8B03}>) 
(:ELEM "e" #<HASH-TABLE :TEST EQ :COUNT 0 {1006EA8E83}> NIL) 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1006EA8B03}>) 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1006E9E923}>) 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1006E9E923}>) 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1006EB8F83}>) 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1006EB8F83}>) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 07:22:15 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.243
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ e←2 ◊ {e+⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10032BEE03}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10032BF183}> NIL) 
(:STR "e") 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {10032BEE03}>) 
(:ELEM "e" #<HASH-TABLE :TEST EQ :COUNT 1 {10032BF183}> NIL) 
(:STR "e") 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {10032D43A3}>) 
(:ELEM "e" #<HASH-TABLE :TEST EQ :COUNT 0 {10032D4723}> NIL) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10032D43A3}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10032BEE03}>) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {10032BEE03}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10032E8563}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10032E8563}>) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 07:23:08 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.417
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ e←2 ◊ {e+⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1006A86E03}>) 
(:STR "e") 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {1006A86E03}>) 
(:STR "e") 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {1006A90D13}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1006A90D13}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1006A86E03}>) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1006A86E03}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1006AA2B53}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1006AA2B53}>) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 07:23:40 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.388
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←{3+⍵} ◊ e←2 ◊ {e+⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100748AFA3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100748B323}>) 
(:STR "e") 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {100748AFA3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100748B323}>) 
(:STR "e") 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {10074CA933}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10074CACB3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10074CA933}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10074CACB3}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {100748AFA3}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {100748B323}>) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {100748AFA3}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {100748B323}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10074DCE43}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10074DD1C3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10074DCE43}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10074DD1C3}>) ; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: :UNDEFINED>.
APRIL> (april "g←4 ◊ e←2 ◊ (1+g+(e+5))")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10076D3223}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10076D35A3}>) 
(:STR "e") 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {10076D3223}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076D35A3}>) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {10076D3223}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10076D35A3}>) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10076D3223}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10076D35A3}>) 
(:STR "e") 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {10076D3223}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10076D35A3}>) 
(:STR "5") 
(:EL "5" #<HASH-TABLE :TEST EQ :COUNT 3 {10076D3223}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10076D35A3}>) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {10076D3223}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10076D35A3}>) 
(:STR "4") 
(:EL "4" #<HASH-TABLE :TEST EQ :COUNT 3 {10076D3223}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10076D35A3}>) 
12
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 07:33:58 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.419
APRIL> (april "g←{3+⍵} ◊ e←2 ◊ {e+⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1005476E23}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10054771A3}>) 
(:STR "e") 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {1005476E23}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10054771A3}>) 
(:STR "e") 
(:EL "e" #<HASH-TABLE :TEST EQ :COUNT 3 {1005476E23}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10054771A3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1005476E23}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10054771A3}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1005476E23}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10054771A3}>) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1005476E23}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10054771A3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1005476E23}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10054771A3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1005476E23}>
 #<HASH-TABLE :TEST EQ :COUNT 2 {10054771A3}>) ; in: LET* ((#:G3497 :UNDEFINED) (#:G3498 :UNDEFINED))
;     (LET* ((#:G3497 NIL) (#:G3498 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 3))))
; 
; caught STYLE-WARNING:
;   The variable #:G3497 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G3498 is defined but never used.

;     (LET* ((#:G3497 NIL) (#:G3498 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵
;                 (APRIL::DISCLOSE #:G3498))))
; 
; caught STYLE-WARNING:
;   The variable #:G3497 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: NIL>.
APRIL> (vex::parse "g←{3+⍵} ◊ {g 5+⍵} 9" (vex::=vex-string *april-idiom* (make-hash-table)))

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQL :COUNT 0 {10068AAF43}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQL :COUNT 3 {10068AAF43}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068AD6C3}>) 
(:STR "5") 
(:EL "5" #<HASH-TABLE :TEST EQL :COUNT 3 {10068AAF43}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068AD6C3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQL :COUNT 3 {10068AAF43}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068AD6C3}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQL :COUNT 3 {10068AAF43}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068AD6C3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQL :COUNT 3 {10068AAF43}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068AD6C3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQL :COUNT 3 {10068AAF43}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068AD6C3}>) 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10068C88DB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3499)
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10068BAC0B}>)))
T
T
APRIL> (april "g←{3+⍵} ◊ {g 5+⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10068CDB93}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10068CDF13}>) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10068CDB93}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068CDF13}>) 
(:STR "5") 
(:EL "5" #<HASH-TABLE :TEST EQ :COUNT 3 {10068CDB93}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068CDF13}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10068CDB93}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068CDF13}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10068CDB93}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068CDF13}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10068CDB93}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068CDF13}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10068CDB93}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10068CDF13}>) ; in: LET* ((#:G3500 :UNDEFINED))
;     (LET* ((#:G3500 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 3))))
; 
; caught STYLE-WARNING:
;   The variable #:G3500 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: NIL>.
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 5+⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1006B2BA53}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1006B2BDD3}>) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1006B2BA53}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006B2BDD3}>) 
(:STR "5") 
(:EL "5" #<HASH-TABLE :TEST EQ :COUNT 3 {1006B2BA53}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006B2BDD3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1006B2BA53}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006B2BDD3}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1006B2BA53}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006B2BDD3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1006B2BA53}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006B2BDD3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1006B2BA53}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006B2BDD3}>) 
(LET* ((#:G3501 :UNDEFINED))
  (SETQ #:G3501
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3501 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3501 NIL))
        (DISCLOSE
         (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR (DISCLOSE #:G3501) 5)))))
    (ENCLOSE (VECTOR 9)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 07:41:53 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.372
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 5+⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10076FEDB3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10076FF133}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10076FF133}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10076FEDB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076FF133}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10076FF133}> #:G3502) 
(:STR "5") 
(:EL "5" #<HASH-TABLE :TEST EQ :COUNT 3 {10076FEDB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076FF133}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10076FEDB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076FF133}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10076FEDB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076FF133}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10076FEDB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076FF133}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10076FEDB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076FF133}>) 
(LET* ((#:G3502 :UNDEFINED))
  (SETQ #:G3502
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3502 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3502 NIL))
        (DISCLOSE
         (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR (DISCLOSE #:G3502) 5)))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 5} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007727E53}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10077401E3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10077401E3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007727E53}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10077401E3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10077401E3}> #:G3503) 
(:STR "5") 
(:EL "5" #<HASH-TABLE :TEST EQ :COUNT 3 {1007727E53}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10077401E3}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1007727E53}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10077401E3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1007727E53}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10077401E3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007727E53}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10077401E3}>) 
(LET* ((#:G3503 :UNDEFINED))
  (SETQ #:G3503
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3503 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3503 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3503) 5))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007764903}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007764C83}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1007764C83}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007764903}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007764C83}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1007764C83}> #:G3504) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007764903}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007764C83}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1007764903}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007764C83}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1007764903}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007764C83}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007764903}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007764C83}>) 
(LET* ((#:G3504 :UNDEFINED))
  (SETQ #:G3504
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3504 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3504 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3504) ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:space *ws1*) (:compile-only)) "g←{3+⍵} ◊ {g ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10078215C3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007821A63}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1007821A63}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10078215C3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007821A63}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1007821A63}> #:G3505) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10078215C3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007821A63}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10078215C3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007821A63}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10078215C3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007821A63}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10078215C3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007821A63}>) 
(LET* ((#:G3505 :UNDEFINED))
  (SETQ #:G3505
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3505 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3505 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3505) ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> *ws1*
#<HASH-TABLE :TEST EQ :COUNT 3 {10078215C3}>
APRIL> (vex::parse "g←{3+⍵} ◊ {g 5+⍵} 9" (vex::=vex-string *april-idiom* (make-hash-table)))

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQL :COUNT 0 {1007920F13}> NIL) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1007923693}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQL :COUNT 3 {1007920F13}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007923693}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1007923693}> #:G3506) 
(:STR "5") 
(:EL "5" #<HASH-TABLE :TEST EQL :COUNT 3 {1007920F13}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007923693}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQL :COUNT 3 {1007920F13}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007923693}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQL :COUNT 3 {1007920F13}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007923693}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQL :COUNT 3 {1007920F13}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007923693}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQL :COUNT 3 {1007920F13}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007923693}>) 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100793FCDB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3506)
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10079320CB}>)))
T
T
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007945653}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10079459D3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10079459D3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007945653}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10079459D3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10079459D3}> #:G3507) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1007945653}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10079459D3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1007945653}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10079459D3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007945653}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10079459D3}>) 
(LET* ((#:G3507 :UNDEFINED))
  (SETQ #:G3507
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3507 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3507 (VECTOR 9))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 07:49:39 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.560
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10084EAD33}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10084EB0B3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10084EB0B3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10084EAD33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10084EB0B3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10084EB0B3}> #:G3522) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10084EAD33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10084EB0B3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10084EAD33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10084EB0B3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10084EAD33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10084EB0B3}>) 
(:CON
 (LET* ((#:G3522 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(LET* ((#:G3522 :UNDEFINED))
  (SETQ #:G3522
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3522 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3522 (VECTOR 9))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 07:51:08 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.397
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F77EF3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008F8B323}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1008F8B323}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F77EF3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008F8B323}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1008F8B323}> #:G3523) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F77EF3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008F8B323}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F77EF3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008F8B323}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F77EF3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008F8B323}>) 
(:CON
 (LET* ((#:G3523 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:HH #:G3523) 
(LET* ((#:G3523 :UNDEFINED))
  (SETQ #:G3523
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3523 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3523 (VECTOR 9))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100AA8CE03}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100AA8D183}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {100AA8D183}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100AA8CE03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AA8D183}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {100AA8D183}> #:G3524) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100AA8CE03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AA8D183}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {100AA8CE03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AA8D183}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {100AA8CE03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AA8D183}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100AA8CE03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AA8D183}>) 
(:CON
 (LET* ((#:G3524 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:CON
 (LET* ((#:G3524 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3524) ⍵)))) 
(LET* ((#:G3524 :UNDEFINED))
  (SETQ #:G3524
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3524 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3524 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3524) ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100AABBF13}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100AABC293}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {100AABC293}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100AABBF13}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AABC293}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {100AABC293}> #:G3525) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {100AABBF13}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AABC293}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {100AABBF13}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AABC293}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100AABBF13}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AABC293}>) 
(:CON
 (LET* ((#:G3525 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:HH #:G3525) 
(LET* ((#:G3525 :UNDEFINED))
  (SETQ #:G3525
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3525 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3525 (VECTOR 9))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100AAEA553}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100AAEA8D3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {100AAEA8D3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100AAEA553}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AAEA8D3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {100AAEA8D3}> #:G3526) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100AAEA553}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AAEA8D3}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {100AAEA553}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AAEA8D3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {100AAEA553}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AAEA8D3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100AAEA553}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100AAEA8D3}>) 
(:CON
 (LET* ((#:G3526 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:CON
 (LET* ((#:G3526 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3526) ⍵)))) 
(LET* ((#:G3526 :UNDEFINED))
  (SETQ #:G3526
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3526 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3526 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3526) ⍵))))
    (ENCLOSE (VECTOR 9)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 08:13:54 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.393
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100655E953}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100655ECD3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {100655ECD3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100655E953}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100655ECD3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {100655ECD3}> #:G3527) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100655E953}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100655ECD3}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {100655E953}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100655ECD3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {100655E953}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100655ECD3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100655E953}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100655ECD3}>) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3527 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:HD
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100665EC9B}>)) 
(:CON
 (LET* ((#:G3527 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3527) ⍵)))) 
(LET* ((#:G3527 :UNDEFINED))
  (SETQ #:G3527
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3527 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3527 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3527) ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10066B17A3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10066B1B23}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10066B1B23}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10066B17A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10066B1B23}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10066B1B23}> #:G3528) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10066B17A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10066B1B23}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10066B17A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10066B1B23}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10066B17A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10066B1B23}>) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3528 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:HD #:G3528) 
(:HH #:G3528) 
(LET* ((#:G3528 :UNDEFINED))
  (SETQ #:G3528
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3528 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3528 (VECTOR 9))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1006702F33}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10067032B3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10067032B3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1006702F33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10067032B3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10067032B3}> #:G3529) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1006702F33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10067032B3}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1006702F33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10067032B3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1006702F33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10067032B3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1006702F33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10067032B3}>) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3529 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:HD
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10067132AB}>)) 
(:CON
 (LET* ((#:G3529 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3529) ⍵)))) 
(LET* ((#:G3529 :UNDEFINED))
  (SETQ #:G3529
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3529 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3529 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3529) ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (vex::parse "g←{3+⍵} ◊ {g 5+⍵} 9" (vex::=vex-string *april-idiom* (make-hash-table)))

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQL :COUNT 0 {100672EBB3}> NIL) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1006731453}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQL :COUNT 3 {100672EBB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006731453}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1006731453}> #:G3530) 
(:STR "5") 
(:EL "5" #<HASH-TABLE :TEST EQL :COUNT 3 {100672EBB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006731453}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQL :COUNT 3 {100672EBB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006731453}>) 
(:HD (:FN #\+)) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQL :COUNT 3 {100672EBB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006731453}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQL :COUNT 3 {100672EBB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006731453}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQL :COUNT 3 {100672EBB3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006731453}>) 
(:HD (:FN #\+)) 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100674F23B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3530)
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1006740AAB}>)))
T
T
APRIL> (vex::parse "g←{3+⍵} ◊ g 9" (vex::=vex-string *april-idiom* (make-hash-table)))

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQL :COUNT 0 {1006755243}> NIL) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10067579C3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQL :COUNT 1 {1006755243}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10067579C3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10067579C3}> #:G3531) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQL :COUNT 1 {1006755243}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10067579C3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQL :COUNT 3 {1006755243}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10067579C3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQL :COUNT 3 {1006755243}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10067579C3}>) 
(:HD (:FN #\+)) 
(((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100677292B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3531)
 (9 #:G3531))
T
T
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 08:17:14 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.206
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1006777403}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1006777783}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1006777783}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1006777403}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006777783}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1006777783}> #:G3532) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1006777403}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006777783}>) 
(:EXX (⍵ #:G3532)) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1006777403}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006777783}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1006777403}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006777783}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1006777403}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1006777783}>) 
(:EXX (⍵ (:FN #\+) 3)) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3532 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008EA2FEB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3532)) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008E923EB}>))) 
(:HD
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1008E923EB}>)) 
(:CON
 (LET* ((#:G3532 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3532) ⍵)))) 
(LET* ((#:G3532 :UNDEFINED))
  (SETQ #:G3532
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3532 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3532 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3532) ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 3 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008EB3D33}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008EB40B3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1008EB40B3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008EB3D33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008EB40B3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1008EB40B3}> #:G3533) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1008EB3D33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008EB40B3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1008EB3D33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008EB40B3}>) 
(:EXX (⍵ 3 #:G3533)) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1008EB3D33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008EB40B3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1008EB3D33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008EB40B3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1008EB3D33}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008EB40B3}>) 
(:EXX (⍵ (:FN #\+) 3)) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3533 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008F06AFB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3533)) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008EF72FB}>))) 
(:HD
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1008EF72FB}>)) 
(:CON
 (LET* ((#:G3533 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3533) 3 ⍵)))) 
(LET* ((#:G3533 :UNDEFINED))
  (SETQ #:G3533
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3533 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3533 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3533) 3 ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F32333}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008F326B3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1008F326B3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F32333}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008F326B3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1008F326B3}> #:G3534) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F32333}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008F326B3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F32333}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008F326B3}>) 
(:EXX (⍵ 2 #:G3534)) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F32333}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008F326B3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F32333}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008F326B3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1008F32333}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008F326B3}>) 
(:EXX (⍵ (:FN #\+) 3)) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3534 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008F64E9B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3534)) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008F55A1B}>))) 
(:HD
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1008F55A1B}>)) 
(:CON
 (LET* ((#:G3534 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3534) 2 ⍵)))) 
(LET* ((#:G3534 :UNDEFINED))
  (SETQ #:G3534
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3534 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3534 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3534) 2 ⍵))))
    (ENCLOSE (VECTOR 9)))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 08:18:38 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.225
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D05BE3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007D05F63}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1007D05F63}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D05BE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007D05F63}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1007D05F63}> #:G3535) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D05BE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007D05F63}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D05BE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007D05F63}>) 
(:EXX (⍵ 2 #:G3535) (VECTOR (DISCLOSE #:G3535) 2 ⍵) NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D05BE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007D05F63}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D05BE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007D05F63}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D05BE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007D05F63}>) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3535 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007D3CF4B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3535)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3535 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3535)) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007D2C06B}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007D2C06B}>))) 
(:HD
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1007D2C06B}>)) 
(:CON
 (LET* ((#:G3535 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3535) 2 ⍵)))) 
(LET* ((#:G3535 :UNDEFINED))
  (SETQ #:G3535
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3535 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3535 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3535) 2 ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D5A963}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007D5ACE3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1007D5ACE3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D5A963}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007D5ACE3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1007D5ACE3}> #:G3536) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D5A963}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007D5ACE3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D5A963}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007D5ACE3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007D5A963}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007D5ACE3}>) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3536 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007D93FBB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3536)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3536 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3536)) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:EXX (9 #:G3536) (VECTOR 9) (#:G3536)) 
(:HD #:G3536) 
(:HH #:G3536) 
(LET* ((#:G3536 :UNDEFINED))
  (SETQ #:G3536
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3536 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3536 (VECTOR 9))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ 5 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007DA42D3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007DA4653}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1007DA4653}> NIL) 
(:STR "5") 
(:EL "5" #<HASH-TABLE :TEST EQ :COUNT 3 {1007DA42D3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007DA4653}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1007DA42D3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007DA4653}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1007DA42D3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007DA4653}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007DA42D3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007DA4653}>) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3537 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007E24B7B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3537)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3537 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3537)) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:EXX (9 5) (VECTOR 5 9) NIL) 
(LET* ((#:G3537 :UNDEFINED))
  (SETQ #:G3537
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3537 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (VECTOR 5 9)))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E32CC3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007E33043}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1007E33043}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E32CC3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007E33043}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1007E33043}> #:G3538) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E32CC3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007E33043}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E32CC3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007E33043}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E32CC3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007E33043}>) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3538 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007E5C22B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3538)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3538 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3538)) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:EXX (9 #:G3538) (VECTOR 9) (#:G3538)) 
(:HD #:G3538) 
(:HH #:G3538) 
(LET* ((#:G3538 :UNDEFINED))
  (SETQ #:G3538
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3538 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3538 (VECTOR 9))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E6B963}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007E6BCE3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1007E6BCE3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E6B963}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007E6BCE3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1007E6BCE3}> #:G3539) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E6B963}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007E6BCE3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E6B963}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007E6BCE3}>) 
(:EXX (⍵ 2 #:G3539) (VECTOR (DISCLOSE #:G3539) 2 ⍵) NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E6B963}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007E6BCE3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E6B963}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007E6BCE3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007E6B963}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007E6BCE3}>) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3539 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007EA6D7B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3539)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3539 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3539)) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007E9749B}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007E9749B}>))) 
(:HD
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {1007E9749B}>)) 
(:CON
 (LET* ((#:G3539 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3539) 2 ⍵)))) 
(LET* ((#:G3539 :UNDEFINED))
  (SETQ #:G3539
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3539 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3539 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3539) 2 ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EBA6A3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007EBAA23}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1007EBAA23}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EBA6A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007EBAA23}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1007EBAA23}> #:G3540) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EBA6A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007EBAA23}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EBA6A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007EBAA23}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EBA6A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007EBAA23}>) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3540 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007EE386B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3540)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3540 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3540)) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:EXX (9 #:G3540) (VECTOR 9) (#:G3540)) 
(:HD #:G3540) 
(:HH #:G3540) 
(LET* ((#:G3540 :UNDEFINED))
  (SETQ #:G3540
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3540 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3540 (VECTOR 9))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 1 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EF3783}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007EF3B03}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1007EF3B03}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EF3783}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007EF3B03}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1007EF3B03}> #:G3541) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EF3783}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007EF3B03}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EF3783}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007EF3B03}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EF3783}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007EF3B03}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EF3783}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007EF3B03}>) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:HD (:FN #\+)) 
(:CON
 (LET* ((#:G3541 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007F274CB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3541)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3541 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3541)) 
(:HD (:OP :LATERAL #\LEFTWARDS_ARROW)) 
(:EXX (9 1 #:G3541) (VECTOR 1 9) (#:G3541)) 
(:HD #:G3541) 
(:HH #:G3541) 
(LET* ((#:G3541 :UNDEFINED))
  (SETQ #:G3541
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3541 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3541 (VECTOR 1 9))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 08:24:35 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.372
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 1 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A833B3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008A83733}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1008A83733}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A833B3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A83733}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1008A83733}> #:G3542) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A833B3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A83733}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A833B3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A83733}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A833B3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A83733}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A833B3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A83733}>) 
NIL 
T 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
NIL 
T 
NIL 
(:CON
 (LET* ((#:G3542 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
T 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008AD538B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3542)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3542 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3542)) 
NIL 
T 
NIL 
NIL 
(LAMBDA (OMEGA &OPTIONAL ALPHA)
  (FUNCALL
   (LAMBDA (⍵ &OPTIONAL ⍺)
     (DECLARE (IGNORABLE ⍺))
     (LET* ((#:G3542 NIL))
       (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
   (ENCLOSE OMEGA) (ENCLOSE ALPHA))) 
(:EXX (9 1 #:G3542) (VECTOR 1 9) (#:G3542)) 
T 
(:HH #:G3542) 
(LET* ((#:G3542 :UNDEFINED))
  (SETQ #:G3542
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3542 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3542 (VECTOR 1 9))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008AE5CE3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008AE6063}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1008AE6063}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008AE5CE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008AE6063}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1008AE6063}> #:G3543) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1008AE5CE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008AE6063}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1008AE5CE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008AE6063}>) 
NIL 
NIL 
NIL 
T 
(:EXX (⍵ 2 #:G3543) (VECTOR (DISCLOSE #:G3543) 2 ⍵) NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1008AE5CE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008AE6063}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1008AE5CE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008AE6063}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1008AE5CE3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008AE6063}>) 
NIL 
T 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
NIL 
T 
NIL 
(:CON
 (LET* ((#:G3543 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
T 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008B185FB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3543)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3543 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3543)) 
NIL 
T 
NIL 
(9) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008B0968B}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008B0968B}>))) 
T 
(:CON
 (LET* ((#:G3543 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3543) 2 ⍵)))) 
(LET* ((#:G3543 :UNDEFINED))
  (SETQ #:G3543
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3543 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3543 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3543) 2 ⍵))))
    (ENCLOSE (VECTOR 9)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 08:25:28 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.342
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100939B4B3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100939B833}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {100939B833}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100939B4B3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100939B833}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {100939B833}> #:G3544) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {100939B4B3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100939B833}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100939B4B3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100939B833}>) 
(:EXP (⍵ 2 #:G3544)) 
(:EXP (2 #:G3544)) 
(:EXP (#:G3544)) 
(:EXP NIL) 
(:EXX (⍵ 2 #:G3544) (VECTOR (DISCLOSE #:G3544) 2 ⍵) NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {100939B4B3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100939B833}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {100939B4B3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100939B833}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100939B4B3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100939B833}>) 
(:EXP (⍵ (:FN #\+) 3)) 
(:EXP ((:FN #\+) 3)) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3)) 
(:EXP NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10093F880B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3544)) 
(:CON
 (LET* ((#:G3544 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3544)) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10093F880B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3544)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3544 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3544)) 
(:EXP (#:G3544)) 
(:EXP NIL) 
(:EXP
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10093E6DDB}>))) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10093E6DDB}>))) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10093E6DDB}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10093E6DDB}>))) 
(:EXP NIL) 
(:CON
 (LET* ((#:G3544 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3544) 2 ⍵)))) 
(LET* ((#:G3544 :UNDEFINED))
  (SETQ #:G3544
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3544 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3544 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3544) 2 ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 1 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1009413D03}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1009414083}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1009414083}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1009413D03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1009414083}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1009414083}> #:G3545) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1009413D03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1009414083}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1009413D03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1009414083}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1009413D03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1009414083}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1009413D03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1009414083}>) 
(:EXP (⍵ (:FN #\+) 3)) 
(:EXP ((:FN #\+) 3)) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3)) 
(:EXP NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100946080B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3545)) 
(:CON
 (LET* ((#:G3545 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3545)) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100946080B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3545)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3545 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3545)) 
(:EXP (#:G3545)) 
(:EXP NIL) 
(:EXP (9 1 #:G3545)) 
(:EXP (1 #:G3545)) 
(:EXP (#:G3545)) 
(:EXX (9 1 #:G3545) (VECTOR 1 9) (#:G3545)) 
(:EXP NIL) 
(:HH #:G3545) 
(LET* ((#:G3545 :UNDEFINED))
  (SETQ #:G3545
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3545 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3545 (VECTOR 1 9))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 08:34:44 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.708
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 1 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100227E943}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100227ECC3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {100227ECC3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100227E943}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100227ECC3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {100227ECC3}> #:G3546) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {100227E943}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100227ECC3}>) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {100227E943}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100227ECC3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {100227E943}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100227ECC3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100227E943}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100227ECC3}>) 
(:EXP (⍵ (:FN #\+) 3) NIL) 
(:EXP ((:FN #\+) 3) NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) NIL) 
(:EXP NIL NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10022A4E4B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3546)
 NIL) 
(:CON
 (LET* ((#:G3546 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3546) NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10022A4E4B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3546)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3546 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3546)) 
(:EXP (#:G3546) NIL) 
(:EXP NIL NIL) 
(:EXP (9 1 #:G3546) NIL) 
(:EXP (1 #:G3546) NIL) 
(:EXP (#:G3546)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3546 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:EXX (9 1 #:G3546) (VECTOR 1 9) (#:G3546)) 
(:EXP NIL NIL) 
(:HH #:G3546) 
(LET* ((#:G3546 :UNDEFINED))
  (SETQ #:G3546
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3546 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3546 (VECTOR 1 9))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10022BC083}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10022BC403}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10022BC403}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10022BC083}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10022BC403}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10022BC403}> #:G3547) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {10022BC083}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10022BC403}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10022BC083}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10022BC403}>) 
(:EXP (⍵ 2 #:G3547) NIL) 
(:EXP (2 #:G3547) NIL) 
(:EXP (#:G3547) NIL) 
(:EXP NIL NIL) 
(:EXX (⍵ 2 #:G3547) (VECTOR (DISCLOSE #:G3547) 2 ⍵) NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10022BC083}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10022BC403}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10022BC083}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10022BC403}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10022BC083}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10022BC403}>) 
(:EXP (⍵ (:FN #\+) 3) NIL) 
(:EXP ((:FN #\+) 3) NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) NIL) 
(:EXP NIL NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1002303DAB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3547)
 NIL) 
(:CON
 (LET* ((#:G3547 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3547) NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1002303DAB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3547)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3547 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3547)) 
(:EXP (#:G3547) NIL) 
(:EXP NIL NIL) 
(:EXP
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10022F22DB}>))
 NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10022F22DB}>))
 NIL) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10022F22DB}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10022F22DB}>))) 
(:EXP NIL NIL) 
(:CON
 (LET* ((#:G3547 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3547) 2 ⍵)))) 
(LET* ((#:G3547 :UNDEFINED))
  (SETQ #:G3547
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3547 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3547 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3547) 2 ⍵))))
    (ENCLOSE (VECTOR 9)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 08:36:10 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.360
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10076BAF03}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB283}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB283}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10076BAF03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076BB283}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10076BB283}> #:G3548) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {10076BAF03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076BB283}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10076BAF03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076BB283}>) 
(:EXP (⍵ 2 #:G3548) #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:EXP (2 #:G3548) #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:EXP (#:G3548) #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:EXX (⍵ 2 #:G3548) (VECTOR (DISCLOSE #:G3548) 2 ⍵) NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10076BAF03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076BB283}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10076BAF03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076BB283}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10076BAF03}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076BB283}>) 
(:EXP (⍵ (:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:EXP ((:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100771923B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3548)
 #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:CON
 (LET* ((#:G3548 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3548)
 #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100771923B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3548)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3548 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3548)) 
(:EXP (#:G3548) #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {10076BB983}> NIL) 
(:EXP
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10077070CB}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076BB983}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10077070CB}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {10076BB983}> NIL) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10077070CB}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10077070CB}>))) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {10076BB983}> NIL) 
(:CON
 (LET* ((#:G3548 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3548) 2 ⍵)))) 
(LET* ((#:G3548 :UNDEFINED))
  (SETQ #:G3548
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3548 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3548 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3548) 2 ⍵))))
    (ENCLOSE (VECTOR 9)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 08:38:12 PM):

; file: /Users/owner/Documents/src/april/april.lisp
; in: VEX-SPEC APRIL
;     (IF (AND (LISTP APRIL::OMEGA)
;              (OR (EQL 'LAMBDA (FIRST APRIL::OMEGA))
;                  (AND (LISTP #) (EQL 'LAMBDA #))))
;         (PRINT (LIST :OM APRIL::OMEGA))
;         (SETF (GETHASH SYMBOL (GETHASH :FUNCTIONS APRIL::META)) APRIL::OMEGA)
;         (SETF (GETHASH SYMBOL (GETHASH :VALUES APRIL::META)) APRIL::OMEGA))
; 
; caught ERROR:
;   error while parsing arguments to special operator IF:
;     too many elements in
;       ((AND (LISTP OMEGA)
;             (OR (EQL 'LAMBDA (FIRST OMEGA))
;                 (AND (LISTP (SECOND OMEGA)) (EQL 'LAMBDA (CAADR OMEGA)))))
;        (PRINT (LIST :OM OMEGA))
;        (SETF (GETHASH SYMBOL (GETHASH :FUNCTIONS META)) OMEGA)
;        (SETF (GETHASH SYMBOL (GETHASH :VALUES META)) OMEGA))
;     to satisfy lambda list
;       (SB-C::TEST SB-C::THEN &OPTIONAL SB-C::ELSE):
;     between 2 and 3 expected, but got 4

;     (VEX:VEX-SPEC APRIL:APRIL
;                   (APRIL::STATE :COUNT-FROM 1 :DISCLOSE-OUTPUT T :ATOMIC-VECTOR
;                    (CONCATENATE 'STRING
;                                 "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`"
;                                 "abcdefghijklmnopqrstuvwxyz{|}~¥€⇄∧∼≬⋆⋸⌸⌺⌼⌾⍁¡⍣⍅⎕⍞⌹⍆⍤⍇⍈⍊⊤λ⍍⍏£⊥⍶⌶⍐⍑χ≢⍖⍗"
;                                 "⍘⍚⍛⌈⍜⍢∪⍨⍕⍎⍬⍪∣│┤⍟∆∇→╣║╗╝←⌊┐└┴┬├─┼↑↓╔╚╩╦╠═╬≡⍸⍷∵⌷⍂⌻⊢⊣◊┘┌█▄▌▐▀"
;                                 "⍺⍹⊂⊃⍝⍲⍴⍱⌽⊖○∨⍳⍉∈∩⌿⍀≥≤≠×÷⍙∘⍵⍫⍋⍒¯¨"))
;                   (APRIL::UTILITIES :MATCH-BLANK-CHARACTER
;                    (LAMBDA (CHAR) (MEMBER CHAR (LIST #\  #\Tab)))
;                    :MATCH-NEWLINE-CHARACTER
;                    (LAMBDA (CHAR)
;                      (MEMBER CHAR (LIST #\LOZENGE #\Newline #\Return)))
;                    :MATCH-TOKEN-CHARACTER
;                    (LAMBDA (CHAR) (OR (ALPHANUMERICP CHAR) (MEMBER CHAR #)))
;                    :PREP-CODE-STRING
;                    (LAMBDA (STRING)
;                      (CL-PPCRE:REGEX-REPLACE-ALL
;                       (CONCATENATE 'STRING
;                                    "^\\s{0,}⍝(.*)[\\r\\n]|(?<=[\\r\\n])\\s{0,}⍝(.*)[\\r\\n]"
;                                    "|(?<=[\\r\\n])\\s{0,}⍝(.*)[\\r\\n]"
;                                    "|(?<=[^\\r\\n])\\s{0,}⍝(.*)(?=[\\r\\n])")
;                       STRING ""))
;                    :PROCESS-AXIS-STRING
;                    (LAMBDA (STRING) (CL-PPCRE:SPLIT #\; STRING)) :FORMAT-VALUE
;                    ...)
;                   (APRIL::FUNCTIONS
;                    (APRIL::← (APRIL::HAS :TITLE "Assign")
;                     (VEX:DYADIC (APRIL::MACRO #))
;                     (APRIL::TESTS (PROVE.TEST:IS "x←55 ◊ x" 55)
;                      (PROVE.TEST:IS "x←2 3 4⍴⍳9 ◊ x[;1;]←7 ◊ x" #3A#)))
;                    (APRIL::⊣ (APRIL::HAS :TITLES ("Empty" "Left"))
;                     (VEX:AMBIVALENT (VEX:ARGS :ANY #) (VEX:ARGS :ANY :ANY #))
;                     (APRIL::TESTS (PROVE.TEST:IS "⊣77" #)
;                      (PROVE.TEST:IS "55⊣77" 55)))
;                    (APRIL::⊢ (APRIL::HAS :TITLES ("Identity" "Right"))
;                     (VEX:AMBIVALENT (VEX:ARGS :ANY #) (VEX:ARGS :ANY :ANY #))
;                     (APRIL::TESTS (PROVE.TEST:IS "⊢77" 77)
;                      (PROVE.TEST:IS "55⊢77" 77)))
;                    (+ (APRIL::HAS :TITLES ("Identity or Negate Imaginary" "Add"))
;                       (VEX:AMBIVALENT :ASYMMETRIC-SCALAR (LAMBDA # #) +)
;                       (APRIL::TESTS (PROVE.TEST:IS "+5" 5)
;                        (PROVE.TEST:IS "+5J2" #C(5 -2)) (PROVE.TEST:IS "1+1" 2)
;                        (PROVE.TEST:IS "1+1 2 3" #)))
;                    (- (APRIL::HAS :TITLES ("Negate" "Subtract"))
;                       (VEX:AMBIVALENT :SYMMETRIC-SCALAR (VEX:REVERSE-OP -))
;                       (APRIL::TESTS (PROVE.TEST:IS "2-1" 1)
;                        (PROVE.TEST:IS "7-2 3 4" #)))
;                    (APRIL::× (APRIL::HAS :TITLES ("Direction" "Multiply"))
;                     (VEX:AMBIVALENT :ASYMMETRIC-SCALAR SIGNUM *)
;                     (APRIL::TESTS (PROVE.TEST:IS "×20 5 0 ¯5 5 ¯9" #)
;                      (PROVE.TEST:IS "2×3" 6) (PROVE.TEST:IS "4 5×8 9" #)))
;                    (APRIL::÷ (APRIL::HAS :TITLES ("Reciprocal" "Divide"))
;                     (VEX:AMBIVALENT :SYMMETRIC-SCALAR (VEX:REVERSE-OP /))
;                     (APRIL::TESTS (PROVE.TEST:IS "6÷2" 3)
;                      (PROVE.TEST:IS "12÷6 3 2" #) (PROVE.TEST:IS "÷2 4 8" #)))
;                    (APRIL::⋆ (APRIL::HAS :TITLES ("Exponential" "Power"))
;                     (VEX:AMBIVALENT :ASYMMETRIC-SCALAR EXP (VEX:REVERSE-OP EXPT))
;                     (APRIL::TESTS (PROVE.TEST:IS "⌊1000×⋆2" 7389)
;                      (PROVE.TEST:IS "2⋆4" 16) (PROVE.TEST:IS "⌊16⋆÷2" 4)))
;                    (* (APRIL::HAS :TITLES ("Exponential" "Power"))
;                       (VEX:AMBIVALENT :ASYMMETRIC-SCALAR EXP
;                        (VEX:REVERSE-OP EXPT)))
;                    (APRIL::⍟
;                     (APRIL::HAS :TITLES ("Natural Logarithm" "Logarithm"))
;                     (VEX:AMBIVALENT :SYMMETRIC-SCALAR LOG)
;                     (APRIL::TESTS (PROVE.TEST:IS "⌊1000×⍟5" 1609)
;                      (PROVE.TEST:IS "⌊2⍟8" 3)))
;                    (APRIL::|\|| (APRIL::HAS :TITLES ("Magnitude" "Residue"))
;                     (VEX:AMBIVALENT :ASYMMETRIC-SCALAR ABS MOD)
;                     (APRIL::TESTS (PROVE.TEST:IS "|55" 55)
;                      (PROVE.TEST:IS "|¯33" 33) (PROVE.TEST:IS "8|39" 7)))
;                    ...)
;                   (APRIL::OPERATORS
;                    (APRIL::← (APRIL::HAS :TITLE "Assign Result Of")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "a←3 2 1 ◊ a+←5 ◊ a" #)
;                      (PROVE.TEST:IS "a←3 2 1 ◊ a[2]+←5 ◊ a" #)))
;                    (/ (APRIL::HAS :TITLE "Reduce")
;                       (APRIL::LATERAL (LAMBDA # # #))
;                       (APRIL::TESTS (PROVE.TEST:IS "+/1 2 3 4 5" 15)
;                        (PROVE.TEST:IS "+/3 4⍴⍳12" #)
;                        (PROVE.TEST:IS "+/[1]3 4⍴⍳12" #)
;                        (PROVE.TEST:IS "fn←{⍺+⍵} ◊ fn/1 2 3 4 5" 15)
;                        (PROVE.TEST:IS "⌊10000×{⍺+÷⍵}/40/1" 16180)))
;                    (APRIL::⌿ (APRIL::HAS :TITLE "Reduce First")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "+⌿3 4⍴⍳12" #)
;                      (PROVE.TEST:IS "{⍺×⍵+3}⌿3 4⍴⍳12" #)
;                      (PROVE.TEST:IS "+⌿[2]3 4⍴⍳12" #)))
;                    (APRIL::|\\| (APRIL::HAS :TITLE "Scan")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "+\\1 2 3 4 5" #)
;                      (PROVE.TEST:IS "+\\3 4⍴⍳12" #2A#)
;                      (PROVE.TEST:IS "+\\[1]3 4⍴⍳12" #2A#)))
;                    (APRIL::⍀ (APRIL::HAS :TITLE "Scan First")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "+⍀1 2 3 4 5" #)
;                      (PROVE.TEST:IS "+⍀3 4⍴⍳12" #2A#)
;                      (PROVE.TEST:IS "{⍺×⍵+3}⍀3 4⍴⍳12" #2A#)
;                      (PROVE.TEST:IS "+⍀[2]3 4⍴⍳12" #2A#)))
;                    (APRIL::|.| (APRIL::HAS :TITLE "Inner/Outer Product")
;                     (APRIL::PIVOTAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "2+.×3 4 5" 24)
;                      (PROVE.TEST:IS "2 3 4+.×8 15 21" 145)
;                      (PROVE.TEST:IS "2 3 4+.×3 3⍴3 1 4 1 5 9 2 6 5" #)
;                      (PROVE.TEST:IS "(3 3⍴3 1 4 1 5 9 2 6 5)+.×2 3 4" #)
;                      (PROVE.TEST:IS "4 5 6∘.+20 30 40 50" #2A#)
;                      (PROVE.TEST:IS "1 2 3∘.-1 2 3" #2A#)
;                      (PROVE.TEST:IS "1 2 3∘.⍴1 2 3" #2A#)
;                      (PROVE.TEST:IS "1 2 3∘.⍴⊂1 2 3" #)
;                      (PROVE.TEST:IS "1 2 3∘.⌽⊂1 2 3" #)))
;                    (APRIL::|¨| (APRIL::HAS :TITLE "Each")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "⍳¨1 2 3" #)
;                      (PROVE.TEST:IS "1 ¯1⌽¨⊂1 2 3 4 5" #)))
;                    (APRIL::̈ (APRIL::HAS :TITLE "Each")
;                     (APRIL::LATERAL (LAMBDA # # #)))
;                    (APRIL::⍨ (APRIL::HAS :TITLE "Commute")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "5-⍨10" 5)
;                      (PROVE.TEST:IS "+⍨10" 20)))
;                    (APRIL::∘ (APRIL::HAS :TITLE "Compose")
;                     (APRIL::PIVOTAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "fn←⍴∘⍴ ◊ fn 2 3 4⍴⍳9" 3)
;                      (PROVE.TEST:IS "⍴∘⍴2 3 4⍴⍳9" 3)
;                      (PROVE.TEST:IS "⍴∘⍴∘⍴2 3 4⍴⍳9" 1)
;                      (PROVE.TEST:IS "(÷∘5) 30" 6)
;                      (PROVE.TEST:IS "⌊10000×(+∘*∘0.5)4 16 25" #)
;                      (PROVE.TEST:IS "fn←5∘- ◊ fn 2" 3)
;                      (PROVE.TEST:IS "⌊(0.5∘+∘*)5 8 12" #)
;                      (PROVE.TEST:IS "⌊10000×+∘÷/40/1" 16180)
;                      (PROVE.TEST:IS "+/∘⍳¨2 5 8" #)))
;                    (APRIL::⍣ (APRIL::HAS :TITLE "Power")
;                     (APRIL::PIVOTAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "fn←{2+⍵}⍣3 ◊ fn 5" 11)
;                      (PROVE.TEST:IS "({2+⍵}⍣3) 9" 15)
;                      (PROVE.TEST:IS "fn←{2+⍵}⍣{10>⍵} ◊ fn 2" 10))))
;                   (APRIL::GENERAL-TESTS
;                    (APRIL::WITH :TITLE
;                     "Basic function definition and use, with comments." :IN
;                     ("⍝ This code starts with a comment.
;                               f1←{⍵+3} ◊ f2←{⍵×2} ⍝ A comment after the functions are defined.
;                               ⍝ This is another comment.
;                               f2 f1 1 2 3 4 5")
;                     :EX #(8 10 12 14 16))
;                    (APRIL::WITH :TITLE "Monadic inline function." :IN
;                     ("{⍵+3} 3 4 5") :EX #(6 7 8))
;                    (APRIL::WITH :TITLE "Dyadic inline function." :IN
;                     ("1 2 3 {⍺×⍵+3} 3 4 5") :EX #(6 14 24))
;                    (APRIL::WITH :TITLE
;                     "Variable-referenced values, including an element within an array, in a vector."
;                     :IN ("a←9 ◊ b←2 3 4⍴⍳9 ◊ 1 2 a 3 b[1;2;1]") :EX #(1 2 9 3 5))
;                    (APRIL::WITH :TITLE
;                     "Assignment of an element within an array." :IN
;                     ("a←2 3⍴⍳9 ◊ a[1;2]←20 ◊ a") :EX #2A((1 20 3) (4 5 6)))
;                    (APRIL::WITH :TITLE
;                     "Selection from an array with multiple elided dimensions."
;                     :IN ("(2 3 3 4 5⍴⍳9)[2;;3;;2]") :EX
;                     #2A((6 2 7 3) (3 8 4 9) (9 5 1 6)))
;                    (APRIL::WITH :TITLE "Elided assignment." :IN
;                     ("a←2 3 4⍴⍳9 ◊ a[2;;3]←0 ◊ a") :EX #3A((# # #) (# # #)))
;                    (APRIL::WITH :TITLE
;                     "Elided assignment of applied function's results." :IN
;                     ("a←2 3 4⍴⍳9 ◊ a[2;;3]+←10 ◊ a") :EX #3A((# # #) (# # #)))
;                    (APRIL::WITH :TITLE "Elision and indexed array elements." :IN
;                     ("(6 8⍴⍳9)[1 4;]") :EX
;                     #2A((1 2 3 4 5 6 7 8) (7 8 9 1 2 3 4 5)))
;                    (APRIL::WITH :TITLE "As above but more complex." :IN
;                     ("(6 8 5⍴⍳9)[1 4;;2 1]") :EX
;                     #3A((# # # # # # # #) (# # # # # # # #)))
;                    (APRIL::WITH :TITLE "Indices of indices." :IN
;                     ("(6 8 5⍴⍳9)[1 4;;2 1][1;2 4 5;]") :EX
;                     #2A((7 6) (8 7) (4 3)))
;                    ...))
; --> PROGN SETF PROGN SETF LET* LET* LET SETF PROGN SETF LET* 
; ==>
;   #'(LAMBDA (APRIL::META APRIL::AXES APRIL::OMEGA APRIL::ALPHA)
;       (DECLARE (IGNORABLE APRIL::AXES))
;       (IF (AND (LISTP APRIL::ALPHA)
;                (EQL 'APLESQUE:AREF-ELIDING (FIRST APRIL::ALPHA)))
;           (APPEND APRIL::ALPHA (LIST :SET APRIL::OMEGA))
;           (LET ((SYMBOL #))
;             (IF (AND # #)
;                 (PRINT #)
;                 (SETF #)
;                 (SETF #))
;             `(SETQ ,SYMBOL ,APRIL::OMEGA))))
; 
; caught STYLE-WARNING:
;   The variable META is defined but never used.
; 
; compilation unit finished
;   caught 1 ERROR condition
;   caught 1 STYLE-WARNING condition


; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.379
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 08:38:12 PM):

; file: /Users/owner/Documents/src/april/april.lisp
; in: VEX-SPEC APRIL
;     (IF (AND (LISTP APRIL::OMEGA)
;              (OR (EQL 'LAMBDA (FIRST APRIL::OMEGA))
;                  (AND (LISTP #) (EQL 'LAMBDA #))))
;         (PRINT (LIST :OM APRIL::OMEGA))
;         (SETF (GETHASH SYMBOL (GETHASH :FUNCTIONS APRIL::META)) APRIL::OMEGA)
;         (SETF (GETHASH SYMBOL (GETHASH :VALUES APRIL::META)) APRIL::OMEGA))
; 
; caught ERROR:
;   error while parsing arguments to special operator IF:
;     too many elements in
;       ((AND (LISTP OMEGA)
;             (OR (EQL 'LAMBDA (FIRST OMEGA))
;                 (AND (LISTP (SECOND OMEGA)) (EQL 'LAMBDA (CAADR OMEGA)))))
;        (PRINT (LIST :OM OMEGA))
;        (SETF (GETHASH SYMBOL (GETHASH :FUNCTIONS META)) OMEGA)
;        (SETF (GETHASH SYMBOL (GETHASH :VALUES META)) OMEGA))
;     to satisfy lambda list
;       (SB-C::TEST SB-C::THEN &OPTIONAL SB-C::ELSE):
;     between 2 and 3 expected, but got 4

;     (VEX:VEX-SPEC APRIL:APRIL
;                   (APRIL::STATE :COUNT-FROM 1 :DISCLOSE-OUTPUT T :ATOMIC-VECTOR
;                    (CONCATENATE 'STRING
;                                 "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`"
;                                 "abcdefghijklmnopqrstuvwxyz{|}~¥€⇄∧∼≬⋆⋸⌸⌺⌼⌾⍁¡⍣⍅⎕⍞⌹⍆⍤⍇⍈⍊⊤λ⍍⍏£⊥⍶⌶⍐⍑χ≢⍖⍗"
;                                 "⍘⍚⍛⌈⍜⍢∪⍨⍕⍎⍬⍪∣│┤⍟∆∇→╣║╗╝←⌊┐└┴┬├─┼↑↓╔╚╩╦╠═╬≡⍸⍷∵⌷⍂⌻⊢⊣◊┘┌█▄▌▐▀"
;                                 "⍺⍹⊂⊃⍝⍲⍴⍱⌽⊖○∨⍳⍉∈∩⌿⍀≥≤≠×÷⍙∘⍵⍫⍋⍒¯¨"))
;                   (APRIL::UTILITIES :MATCH-BLANK-CHARACTER
;                    (LAMBDA (CHAR) (MEMBER CHAR (LIST #\  #\Tab)))
;                    :MATCH-NEWLINE-CHARACTER
;                    (LAMBDA (CHAR)
;                      (MEMBER CHAR (LIST #\LOZENGE #\Newline #\Return)))
;                    :MATCH-TOKEN-CHARACTER
;                    (LAMBDA (CHAR) (OR (ALPHANUMERICP CHAR) (MEMBER CHAR #)))
;                    :PREP-CODE-STRING
;                    (LAMBDA (STRING)
;                      (CL-PPCRE:REGEX-REPLACE-ALL
;                       (CONCATENATE 'STRING
;                                    "^\\s{0,}⍝(.*)[\\r\\n]|(?<=[\\r\\n])\\s{0,}⍝(.*)[\\r\\n]"
;                                    "|(?<=[\\r\\n])\\s{0,}⍝(.*)[\\r\\n]"
;                                    "|(?<=[^\\r\\n])\\s{0,}⍝(.*)(?=[\\r\\n])")
;                       STRING ""))
;                    :PROCESS-AXIS-STRING
;                    (LAMBDA (STRING) (CL-PPCRE:SPLIT #\; STRING)) :FORMAT-VALUE
;                    ...)
;                   (APRIL::FUNCTIONS
;                    (APRIL::← (APRIL::HAS :TITLE "Assign")
;                     (VEX:DYADIC (APRIL::MACRO #))
;                     (APRIL::TESTS (PROVE.TEST:IS "x←55 ◊ x" 55)
;                      (PROVE.TEST:IS "x←2 3 4⍴⍳9 ◊ x[;1;]←7 ◊ x" #3A#)))
;                    (APRIL::⊣ (APRIL::HAS :TITLES ("Empty" "Left"))
;                     (VEX:AMBIVALENT (VEX:ARGS :ANY #) (VEX:ARGS :ANY :ANY #))
;                     (APRIL::TESTS (PROVE.TEST:IS "⊣77" #)
;                      (PROVE.TEST:IS "55⊣77" 55)))
;                    (APRIL::⊢ (APRIL::HAS :TITLES ("Identity" "Right"))
;                     (VEX:AMBIVALENT (VEX:ARGS :ANY #) (VEX:ARGS :ANY :ANY #))
;                     (APRIL::TESTS (PROVE.TEST:IS "⊢77" 77)
;                      (PROVE.TEST:IS "55⊢77" 77)))
;                    (+ (APRIL::HAS :TITLES ("Identity or Negate Imaginary" "Add"))
;                       (VEX:AMBIVALENT :ASYMMETRIC-SCALAR (LAMBDA # #) +)
;                       (APRIL::TESTS (PROVE.TEST:IS "+5" 5)
;                        (PROVE.TEST:IS "+5J2" #C(5 -2)) (PROVE.TEST:IS "1+1" 2)
;                        (PROVE.TEST:IS "1+1 2 3" #)))
;                    (- (APRIL::HAS :TITLES ("Negate" "Subtract"))
;                       (VEX:AMBIVALENT :SYMMETRIC-SCALAR (VEX:REVERSE-OP -))
;                       (APRIL::TESTS (PROVE.TEST:IS "2-1" 1)
;                        (PROVE.TEST:IS "7-2 3 4" #)))
;                    (APRIL::× (APRIL::HAS :TITLES ("Direction" "Multiply"))
;                     (VEX:AMBIVALENT :ASYMMETRIC-SCALAR SIGNUM *)
;                     (APRIL::TESTS (PROVE.TEST:IS "×20 5 0 ¯5 5 ¯9" #)
;                      (PROVE.TEST:IS "2×3" 6) (PROVE.TEST:IS "4 5×8 9" #)))
;                    (APRIL::÷ (APRIL::HAS :TITLES ("Reciprocal" "Divide"))
;                     (VEX:AMBIVALENT :SYMMETRIC-SCALAR (VEX:REVERSE-OP /))
;                     (APRIL::TESTS (PROVE.TEST:IS "6÷2" 3)
;                      (PROVE.TEST:IS "12÷6 3 2" #) (PROVE.TEST:IS "÷2 4 8" #)))
;                    (APRIL::⋆ (APRIL::HAS :TITLES ("Exponential" "Power"))
;                     (VEX:AMBIVALENT :ASYMMETRIC-SCALAR EXP (VEX:REVERSE-OP EXPT))
;                     (APRIL::TESTS (PROVE.TEST:IS "⌊1000×⋆2" 7389)
;                      (PROVE.TEST:IS "2⋆4" 16) (PROVE.TEST:IS "⌊16⋆÷2" 4)))
;                    (* (APRIL::HAS :TITLES ("Exponential" "Power"))
;                       (VEX:AMBIVALENT :ASYMMETRIC-SCALAR EXP
;                        (VEX:REVERSE-OP EXPT)))
;                    (APRIL::⍟
;                     (APRIL::HAS :TITLES ("Natural Logarithm" "Logarithm"))
;                     (VEX:AMBIVALENT :SYMMETRIC-SCALAR LOG)
;                     (APRIL::TESTS (PROVE.TEST:IS "⌊1000×⍟5" 1609)
;                      (PROVE.TEST:IS "⌊2⍟8" 3)))
;                    (APRIL::|\|| (APRIL::HAS :TITLES ("Magnitude" "Residue"))
;                     (VEX:AMBIVALENT :ASYMMETRIC-SCALAR ABS MOD)
;                     (APRIL::TESTS (PROVE.TEST:IS "|55" 55)
;                      (PROVE.TEST:IS "|¯33" 33) (PROVE.TEST:IS "8|39" 7)))
;                    ...)
;                   (APRIL::OPERATORS
;                    (APRIL::← (APRIL::HAS :TITLE "Assign Result Of")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "a←3 2 1 ◊ a+←5 ◊ a" #)
;                      (PROVE.TEST:IS "a←3 2 1 ◊ a[2]+←5 ◊ a" #)))
;                    (/ (APRIL::HAS :TITLE "Reduce")
;                       (APRIL::LATERAL (LAMBDA # # #))
;                       (APRIL::TESTS (PROVE.TEST:IS "+/1 2 3 4 5" 15)
;                        (PROVE.TEST:IS "+/3 4⍴⍳12" #)
;                        (PROVE.TEST:IS "+/[1]3 4⍴⍳12" #)
;                        (PROVE.TEST:IS "fn←{⍺+⍵} ◊ fn/1 2 3 4 5" 15)
;                        (PROVE.TEST:IS "⌊10000×{⍺+÷⍵}/40/1" 16180)))
;                    (APRIL::⌿ (APRIL::HAS :TITLE "Reduce First")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "+⌿3 4⍴⍳12" #)
;                      (PROVE.TEST:IS "{⍺×⍵+3}⌿3 4⍴⍳12" #)
;                      (PROVE.TEST:IS "+⌿[2]3 4⍴⍳12" #)))
;                    (APRIL::|\\| (APRIL::HAS :TITLE "Scan")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "+\\1 2 3 4 5" #)
;                      (PROVE.TEST:IS "+\\3 4⍴⍳12" #2A#)
;                      (PROVE.TEST:IS "+\\[1]3 4⍴⍳12" #2A#)))
;                    (APRIL::⍀ (APRIL::HAS :TITLE "Scan First")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "+⍀1 2 3 4 5" #)
;                      (PROVE.TEST:IS "+⍀3 4⍴⍳12" #2A#)
;                      (PROVE.TEST:IS "{⍺×⍵+3}⍀3 4⍴⍳12" #2A#)
;                      (PROVE.TEST:IS "+⍀[2]3 4⍴⍳12" #2A#)))
;                    (APRIL::|.| (APRIL::HAS :TITLE "Inner/Outer Product")
;                     (APRIL::PIVOTAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "2+.×3 4 5" 24)
;                      (PROVE.TEST:IS "2 3 4+.×8 15 21" 145)
;                      (PROVE.TEST:IS "2 3 4+.×3 3⍴3 1 4 1 5 9 2 6 5" #)
;                      (PROVE.TEST:IS "(3 3⍴3 1 4 1 5 9 2 6 5)+.×2 3 4" #)
;                      (PROVE.TEST:IS "4 5 6∘.+20 30 40 50" #2A#)
;                      (PROVE.TEST:IS "1 2 3∘.-1 2 3" #2A#)
;                      (PROVE.TEST:IS "1 2 3∘.⍴1 2 3" #2A#)
;                      (PROVE.TEST:IS "1 2 3∘.⍴⊂1 2 3" #)
;                      (PROVE.TEST:IS "1 2 3∘.⌽⊂1 2 3" #)))
;                    (APRIL::|¨| (APRIL::HAS :TITLE "Each")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "⍳¨1 2 3" #)
;                      (PROVE.TEST:IS "1 ¯1⌽¨⊂1 2 3 4 5" #)))
;                    (APRIL::̈ (APRIL::HAS :TITLE "Each")
;                     (APRIL::LATERAL (LAMBDA # # #)))
;                    (APRIL::⍨ (APRIL::HAS :TITLE "Commute")
;                     (APRIL::LATERAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "5-⍨10" 5)
;                      (PROVE.TEST:IS "+⍨10" 20)))
;                    (APRIL::∘ (APRIL::HAS :TITLE "Compose")
;                     (APRIL::PIVOTAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "fn←⍴∘⍴ ◊ fn 2 3 4⍴⍳9" 3)
;                      (PROVE.TEST:IS "⍴∘⍴2 3 4⍴⍳9" 3)
;                      (PROVE.TEST:IS "⍴∘⍴∘⍴2 3 4⍴⍳9" 1)
;                      (PROVE.TEST:IS "(÷∘5) 30" 6)
;                      (PROVE.TEST:IS "⌊10000×(+∘*∘0.5)4 16 25" #)
;                      (PROVE.TEST:IS "fn←5∘- ◊ fn 2" 3)
;                      (PROVE.TEST:IS "⌊(0.5∘+∘*)5 8 12" #)
;                      (PROVE.TEST:IS "⌊10000×+∘÷/40/1" 16180)
;                      (PROVE.TEST:IS "+/∘⍳¨2 5 8" #)))
;                    (APRIL::⍣ (APRIL::HAS :TITLE "Power")
;                     (APRIL::PIVOTAL (LAMBDA # # #))
;                     (APRIL::TESTS (PROVE.TEST:IS "fn←{2+⍵}⍣3 ◊ fn 5" 11)
;                      (PROVE.TEST:IS "({2+⍵}⍣3) 9" 15)
;                      (PROVE.TEST:IS "fn←{2+⍵}⍣{10>⍵} ◊ fn 2" 10))))
;                   (APRIL::GENERAL-TESTS
;                    (APRIL::WITH :TITLE
;                     "Basic function definition and use, with comments." :IN
;                     ("⍝ This code starts with a comment.
;                               f1←{⍵+3} ◊ f2←{⍵×2} ⍝ A comment after the functions are defined.
;                               ⍝ This is another comment.
;                               f2 f1 1 2 3 4 5")
;                     :EX #(8 10 12 14 16))
;                    (APRIL::WITH :TITLE "Monadic inline function." :IN
;                     ("{⍵+3} 3 4 5") :EX #(6 7 8))
;                    (APRIL::WITH :TITLE "Dyadic inline function." :IN
;                     ("1 2 3 {⍺×⍵+3} 3 4 5") :EX #(6 14 24))
;                    (APRIL::WITH :TITLE
;                     "Variable-referenced values, including an element within an array, in a vector."
;                     :IN ("a←9 ◊ b←2 3 4⍴⍳9 ◊ 1 2 a 3 b[1;2;1]") :EX #(1 2 9 3 5))
;                    (APRIL::WITH :TITLE
;                     "Assignment of an element within an array." :IN
;                     ("a←2 3⍴⍳9 ◊ a[1;2]←20 ◊ a") :EX #2A((1 20 3) (4 5 6)))
;                    (APRIL::WITH :TITLE
;                     "Selection from an array with multiple elided dimensions."
;                     :IN ("(2 3 3 4 5⍴⍳9)[2;;3;;2]") :EX
;                     #2A((6 2 7 3) (3 8 4 9) (9 5 1 6)))
;                    (APRIL::WITH :TITLE "Elided assignment." :IN
;                     ("a←2 3 4⍴⍳9 ◊ a[2;;3]←0 ◊ a") :EX #3A((# # #) (# # #)))
;                    (APRIL::WITH :TITLE
;                     "Elided assignment of applied function's results." :IN
;                     ("a←2 3 4⍴⍳9 ◊ a[2;;3]+←10 ◊ a") :EX #3A((# # #) (# # #)))
;                    (APRIL::WITH :TITLE "Elision and indexed array elements." :IN
;                     ("(6 8⍴⍳9)[1 4;]") :EX
;                     #2A((1 2 3 4 5 6 7 8) (7 8 9 1 2 3 4 5)))
;                    (APRIL::WITH :TITLE "As above but more complex." :IN
;                     ("(6 8 5⍴⍳9)[1 4;;2 1]") :EX
;                     #3A((# # # # # # # #) (# # # # # # # #)))
;                    (APRIL::WITH :TITLE "Indices of indices." :IN
;                     ("(6 8 5⍴⍳9)[1 4;;2 1][1;2 4 5;]") :EX
;                     #2A((7 6) (8 7) (4 3)))
;                    ...))
; --> PROGN SETF PROGN SETF LET* LET* LET SETF PROGN SETF LET* 
; ==>
;   #'(LAMBDA (APRIL::META APRIL::AXES APRIL::OMEGA APRIL::ALPHA)
;       (DECLARE (IGNORABLE APRIL::AXES))
;       (IF (AND (LISTP APRIL::ALPHA)
;                (EQL 'APLESQUE:AREF-ELIDING (FIRST APRIL::ALPHA)))
;           (APPEND APRIL::ALPHA (LIST :SET APRIL::OMEGA))
;           (LET ((SYMBOL #))
;             (IF (AND # #)
;                 (PRINT #)
;                 (SETF #)
;                 (SETF #))
;             `(SETQ ,SYMBOL ,APRIL::OMEGA))))
; 
; caught STYLE-WARNING:
;   The variable META is defined but never used.
; 
; compilation unit finished
;   caught 1 ERROR condition
;   caught 1 STYLE-WARNING condition


; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.411
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 05 AUG 2018 08:38:52 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.361
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1009916953}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1009916CD3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1009916CD3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1009916953}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1009916CD3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1009916CD3}> #:G3549) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1009916953}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1009916CD3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1009916953}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1009916CD3}>) 
(:EXP (⍵ 2 #:G3549) #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:EXP (2 #:G3549) #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:EXP (#:G3549) #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:EXX (⍵ 2 #:G3549) (VECTOR (DISCLOSE #:G3549) 2 ⍵) NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1009916953}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1009916CD3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1009916953}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1009916CD3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1009916953}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1009916CD3}>) 
(:EXP (⍵ (:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:EXP ((:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100993F0BB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3549)
 #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:CON
 (LET* ((#:G3549 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3549)
 #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100993F0BB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3549)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3549 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3549)) 
(:EXP (#:G3549) #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {10099173D3}> NIL) 
(:OM
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3549 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:EXP
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100992D1BB}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {10099173D3}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100992D1BB}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {10099173D3}> NIL) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100992D1BB}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100992D1BB}>))) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {10099173D3}> NIL) 
(:CON
 (LET* ((#:G3549 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3549) 2 ⍵)))) 
(LET* ((#:G3549 :UNDEFINED))
  (SETQ #:G3549
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3549 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3549 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3549) 2 ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100996D8C3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100996DC43}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {100996DC43}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100996D8C3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100996DC43}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {100996DC43}> #:G3550) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {100996D8C3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100996DC43}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100996D8C3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100996DC43}>) 
(:EXP (⍵ 2 #:G3550) #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:EXP (2 #:G3550) #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:EXP (#:G3550) #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:EXX (⍵ 2 #:G3550) (VECTOR (DISCLOSE #:G3550) 2 ⍵) NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {100996D8C3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100996DC43}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {100996D8C3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100996DC43}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100996D8C3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100996DC43}>) 
(:EXP (⍵ (:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:EXP ((:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10099B5DEB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3550)
 #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:CON
 (LET* ((#:G3550 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3550)
 #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10099B5DEB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3550)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3550 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3550)) 
(:EXP (#:G3550) #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {100996E343}> NIL) 
(:OM
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3550 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:EXP
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10099A3EEB}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {100996E343}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10099A3EEB}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {100996E343}> NIL) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10099A3EEB}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10099A3EEB}>))) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {100996E343}> NIL) 
(:CON
 (LET* ((#:G3550 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3550) 2 ⍵)))) 
(LET* ((#:G3550 :UNDEFINED))
  (SETQ #:G3550
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3550 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3550 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3550) 2 ⍵))))
    (ENCLOSE (VECTOR 9)))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 09:14:02 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.415
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A06E63}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008A071E3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1008A071E3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A06E63}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A071E3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1008A071E3}> #:G3551) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A06E63}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A071E3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A06E63}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A071E3}>) 
(555 (⍵ 2 #:G3551)) 
(:EXP (⍵ 2 #:G3551) #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(:EXP (2 #:G3551) #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(:EXP (#:G3551) #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(:EXX (⍵ 2 #:G3551) (VECTOR (DISCLOSE #:G3551) 2 ⍵) NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A06E63}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A071E3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A06E63}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A071E3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1008A06E63}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A071E3}>) 
(555 (⍵ (:FN #\+) 3)) 
(:EXP (⍵ (:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(:EXP ((:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(555
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008A4CEAB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3551)) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008A4CEAB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3551)
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(:CON
 (LET* ((#:G3551 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3551)
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008A4CEAB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3551)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3551 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3551)) 
(:EXP (#:G3551) #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1008A078E3}> NIL) 
(:OM
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3551 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(555
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008A38CCB}>))) 
(:EXP
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008A38CCB}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A078E3}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008A38CCB}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008A078E3}> NIL) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008A38CCB}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008A38CCB}>))) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {1008A078E3}> NIL) 
(:CON
 (LET* ((#:G3551 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3551) 2 ⍵)))) 
(LET* ((#:G3551 :UNDEFINED))
  (SETQ #:G3551
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3551 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3551 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3551) 2 ⍵))))
    (ENCLOSE (VECTOR 9)))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 10:11:56 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.467
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007F2A623}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2A9A3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2A9A3}> NIL) 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {1007F2A623}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007F2A9A3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1007F2A9A3}> #:G3552) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1007F2A623}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007F2A9A3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007F2A623}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007F2A9A3}>) 
(:EXP (⍵ 2 #:G3552) #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:EXP (2 #:G3552) #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:EXP (#:G3552) #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:EXX (⍵ 2 #:G3552) (VECTOR (DISCLOSE #:G3552) 2 ⍵) NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {1007F2A623}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007F2A9A3}>) 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {1007F2A623}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007F2A9A3}>) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {1007F2A623}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007F2A9A3}>) 
(:EXP (⍵ (:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:EXP ((:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007F56CEB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3552)
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:CON
 (LET* ((#:G3552 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3552)
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007F56CEB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3552)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3552 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3552)) 
(:EXP (#:G3552) #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1007F2B0A3}> NIL) 
(:OM
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3552 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:EXP
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007F4380B}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007F2B0A3}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007F4380B}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {1007F2B0A3}> NIL) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007F4380B}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007F4380B}>))) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {1007F2B0A3}> NIL) 
(:CON
 (LET* ((#:G3552 NIL))
   (DISCLOSE (VECTOR (DISCLOSE #:G3552) 2 ⍵)))) 
(LET* ((#:G3552 :UNDEFINED))
  (SETQ #:G3552
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3552 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3552 NIL))
        (DISCLOSE (VECTOR (DISCLOSE #:G3552) 2 ⍵))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april "1+1")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1007F77C93}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007FA0003}>) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1007F77C93}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007FA0003}>) 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1007FA0703}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1007FA0703}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {1007FA0703}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1007FA0703}> NIL) 
2
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:04:43 PM):

; file: /Users/owner/Documents/src/april/vex/vex.lisp
; in: DEFUN VEX-PROGRAM
;     (MAXPC:PARSE (FUNCALL (VEX::OF-UTILITIES VEX::IDIOM :PREP-CODE-STRING) REST))
; 
; caught STYLE-WARNING:
;   The function was called with one argument, but wants exactly two.

; file: /Users/owner/Documents/src/april/vex/vex.lisp
; in: DEFUN VEX-PROGRAM
;     (VEX::=VEX-STRING VEX::IDIOM VEX::META VEX::CALLBACK)
; 
; caught WARNING:
;   undefined variable: CALLBACK
; 
; compilation unit finished
;   Undefined variable:
;     CALLBACK
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition


; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.347
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:05:04 PM):

; file: /Users/owner/Documents/src/april/vex/vex.lisp
; in: DEFUN VEX-PROGRAM
;     (VEX::=VEX-STRING VEX::IDIOM VEX::META VEX::CALLBACK)
; 
; caught WARNING:
;   undefined variable: CALLBACK
; 
; compilation unit finished
;   Undefined variable:
;     CALLBACK
;   caught 1 WARNING condition

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.226
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:05:50 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.193
APRIL> (april "1+1")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1008597D23}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008617E53}>) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1008597D23}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008617E53}>) ; in: PROGN ((1))
;     ((1))
; 
; caught ERROR:
;   illegal function call
; 
; compilation unit finished
;   caught 1 ERROR condition
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:06:23 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.235
; Evaluation aborted on #<SB-INT:COMPILED-PROGRAM-ERROR {1008F569B3}>.
APRIL> (april "1+1")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1007EFD483}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007EFD803}>) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:07:13 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.252
; Evaluation aborted on #<UNDEFINED-FUNCTION NIL {1007F0BCF3}>.
APRIL> (april "1+1")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1006F26F63}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1006F272E3}>) 
(:RES "+1") 
(:RES "1") 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1006F26F63}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1006F272E3}>) ; in: PROGN ((1))
;     ((1))
; 
; caught ERROR:
;   illegal function call
; 
; compilation unit finished
;   caught 1 ERROR condition
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:09:05 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.188
; Evaluation aborted on #<SB-INT:COMPILED-PROGRAM-ERROR {1006F557E3}>.
APRIL> (april "1+1")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {10070FA3A3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10070FA723}>) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {10070FA3A3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10070FA723}>) 
NIL
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:09:20 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.192
APRIL> (april "1+1")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1008675493}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008675813}>) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1008675493}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008675813}>) 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1008675F13}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1008675F13}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {1008675F13}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1008675F13}> NIL) 
2
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:13:33 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.276
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:13:48 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.231
APRIL> (april "1+1")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {10034AFF13}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007E2FD03}>) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {10034AFF13}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1007E2FD03}>) 
(:RES "") ; in: PROGN (DISCLOSE ((1 (:FN #\+) 1)))
;     ((1 (:FN #\+) 1))
; 
; caught ERROR:
;   illegal function call
; 
; compilation unit finished
;   caught 1 ERROR condition
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:14:43 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.206
; Evaluation aborted on #<SB-INT:COMPILED-PROGRAM-ERROR {1007E63323}>.
APRIL> (april "1+1")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1006F7EF73}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1006F7F2F3}>) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1006F7EF73}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1006F7F2F3}>) 
(:EXP ((1 (:FN #\+) 1)) #<HASH-TABLE :TEST EQ :COUNT 0 {1006F7F9F3}> NIL) ; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 1>.
APRIL> (vex-expression *april-idiom* nil '((1 (:FN #\+) 1)))
; in: VEX-EXPRESSION *APRIL-IDIOM*
;     (APRIL::VEX-EXPRESSION APRIL::*APRIL-IDIOM* NIL '((1 (:FN #\+) 1)))
; 
; caught STYLE-WARNING:
;   undefined function: VEX-EXPRESSION
; 
; compilation unit finished
;   Undefined function:
;     VEX-EXPRESSION
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNDEFINED-FUNCTION VEX-EXPRESSION {1007168DF3}>.
APRIL> (vex;:vex-expression *april-idiom* nil '((1 (:FN #\+) 1)))
; Evaluation aborted on #<END-OF-FILE {1007302113}>.
APRIL> (vex::vex-expression *april-idiom* nil '((1 (:FN #\+) 1)))
; Evaluation aborted on #<TYPE-ERROR expected-type: HASH-TABLE datum: NIL>.
APRIL> (vex::vex-expression *april-idiom* (make-hash-table) '((1 (:FN #\+) 1)))
; Evaluation aborted on #<TYPE-ERROR expected-type: HASH-TABLE datum: NIL>.
APRIL> (vex::vex-expression *april-idiom* (make-hash-table) '((1 (:FN #\+) 1)))
; Evaluation aborted on #<TYPE-ERROR expected-type: HASH-TABLE datum: NIL>.
APRIL> (make-hash-table)
#<HASH-TABLE :TEST EQL :COUNT 0 {100797CA93}>
APRIL> (make-hash-table)
#<HASH-TABLE :TEST EQL :COUNT 0 {100797D953}>
APRIL> (vex::vex-expression *april-idiom* (make-hash-table) '((1 (:FN #\+) 1)))
; Evaluation aborted on #<TYPE-ERROR expected-type: HASH-TABLE datum: NIL>.
APRIL> *ws2*
; Evaluation aborted on #<UNBOUND-VARIABLE *WS2* {1007B5B2C3}>.
APRIL> *ws1*
#<HASH-TABLE :TEST EQ :COUNT 3 {1001C84B53}>
APRIL> (vex::vex-expression *april-idiom* *ws1* '((1 (:FN #\+) 1)))

(:EXP ((1 (:FN #\+) 1)) #<HASH-TABLE :TEST EQ :COUNT 1 {1001B58093}> NIL) ; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 1>.
APRIL> (vex::vex-expression *april-idiom* *ws1* '(1 (:FN #\+) 1))

(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 1 {1001B58093}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 1 {1001B58093}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 1 {1001B58093}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {1001B58093}> NIL) 
(FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:24:43 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.359
APRIL> (vex::vex-expression *april-idiom* *ws1* '(1 (:FN #\+) 1))

(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 1 {1001B58093}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 1 {1001B58093}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 1 {1001B58093}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {1001B58093}> NIL) 
(FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))
APRIL> (april "1+1")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1006A770E3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1006A77463}>) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1006A770E3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1006A77463}>) 
(:OO ((1 (:FN #\+) 1))) 
(:EXP ((1 (:FN #\+) 1)) #<HASH-TABLE :TEST EQ :COUNT 0 {1006A77B63}> NIL) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:25:09 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.256
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 1>.
APRIL> (april "1+1")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002F37423}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002F377A3}>) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002F37423}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002F377A3}>) 
(:OO ((1 (:FN #\+) 1))) 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002F37EA3}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002F37EA3}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002F37EA3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1002F37EA3}> NIL) 
(:RES "") 
2
APRIL> (april (set (:compile-only)) "1+1")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002FC3243}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002FC35C3}>) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002FC3243}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002FC35C3}>) 
(:OO ((1 (:FN #\+) 1))) 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002FC3CC3}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002FC3CC3}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002FC3CC3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1002FC3CC3}> NIL) 
(:RES "") 
(PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
APRIL> (april (set (:compile-only)) "1+1 ◊ 2+2")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002FE0AE3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002FE0E63}>) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002FE0AE3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002FE0E63}>) 
(:OO ((1 (:FN #\+) 1))) 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002FE1563}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002FE1563}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002FE1563}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1002FE1563}> NIL) 
(:RES "") 
(PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:42:32 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.322
APRIL> (april (set (:compile-only)) "1+1 ◊ 2+2")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {100300E173}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100300E4F3}>) 
(:NEX " 2+2") 
(:NEX "") 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {100300E173}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100300E4F3}>) 
(:NEX "") 
(:OO ((1 (:FN #\+) 1))) 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {100300EBF3}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {100300EBF3}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {100300EBF3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {100300EBF3}> NIL) 
(:RES "") 
(PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:56:26 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.252
APRIL> (april (set (:compile-only)) "1+1 ◊ 2+2")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002F67F33}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002F7FE93}>) 
(:NEX " 2+2") 
(:NEX "") 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002F67F33}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002F7FE93}>) 
(:NEX "") 
(:OO ((1 (:FN #\+) 1))) 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {100300FC83}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {100300FC83}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {100300FC83}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {100300FC83}> NIL) 
(:RES "") 
(PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:56:53 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.244
APRIL> (april (set (:compile-only)) "1+1 ◊ 2+2")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {100375F1D3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100375F553}>) 
(:NEX " 2+2") 
(:NEX "") 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {100375F1D3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100375F553}>) 
(:NEX "") 
(:OO ((1 (:FN #\+) 1)) "") 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {100375FC53}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {100375FC53}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {100375FC53}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {100375FC53}> NIL) 
(:RES "") 
(PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:57:11 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.275
APRIL> (april (set (:compile-only)) "1+1 ◊ 2+2")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002D071D3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002D07553}>) 
(:NEX " 2+2" NIL) 
(:NEX "" " 2+2") 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002D071D3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002D07553}>) 
(:NEX "" "") 
(:OO ((1 (:FN #\+) 1)) "") 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002D07C53}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002D07C53}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002D07C53}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1002D07C53}> NIL) 
(:RES "") 
(PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:57:53 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.234
APRIL> (april (set (:compile-only)) "1+1 ◊ 2+2")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002D21BD3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002D21F53}>) 
(:NEX " 2+2" NIL) 
(:NEX "" " 2+2") 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1002D21BD3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002D21F53}>) 
(:NEX "" "") 
(:OO ((1 (:FN #\+) 1)) "") 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002D22653}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002D22653}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {1002D22653}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1002D22653}> NIL) 
(:RES "") 
(PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 05 AUG 2018 11:58:58 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.234
APRIL> (april (set (:compile-only)) "1+1 ◊ 2+2")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1006787D83}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100680F5B3}>) 
(:NEX " 2+2" NIL) 
(:NEX "" " 2+2") 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1006787D83}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100680F5B3}>) 
(:NEX "" "") 
"" 
(:OO ((1 (:FN #\+) 1)) "") 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {100680FCB3}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {100680FCB3}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {100680FCB3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {100680FCB3}> NIL) 
(:RES "") 
(PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 12:19:33 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.389
APRIL> (april (set (:compile-only)) "1+1 ◊ 2+2")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1003405593}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1003405913}>) 
(:NEX 1 " 2+2" NIL) 
(:NEX (:FN #\+) "" " 2+2") 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1003405593}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1003405913}>) 
(:NEX 1 "" "") 
(:OO ((1 (:FN #\+) 1)) "") 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1003406013}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1003406013}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {1003406013}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1003406013}> NIL) 
(:RES "") 
(PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 12:20:10 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.211
APRIL> (april (set (:compile-only)) "1+1 ◊ 2+2")

(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1003426EC3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1003427243}>) 
(:NEX 1 " 2+2" NIL) 
(:NEX (:FN #\+) "" " 2+2") 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {1003426EC3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1003427243}>) 
(:NEX 1 "" " 2+2") 
(:OO ((1 (:FN #\+) 1)) " 2+2") 
(:EXP (1 (:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1003427943}> NIL) 
(:EXP ((:FN #\+) 1) #<HASH-TABLE :TEST EQ :COUNT 0 {1003427943}> NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXP (1) #<HASH-TABLE :TEST EQ :COUNT 0 {1003427943}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1003427943}> NIL) 
(:RES " 2+2") 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1003426EC3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1003427243}>) 
(:NEX 2 "" NIL) 
(:NEX (:FN #\+) "" NIL) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {1003426EC3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1003427243}>) 
(:NEX 2 "" NIL) 
(:OO ((2 (:FN #\+) 2)) NIL) 
(:EXP (2 (:FN #\+) 2) #<HASH-TABLE :TEST EQ :COUNT 0 {1003427943}> NIL) 
(:EXP ((:FN #\+) 2) #<HASH-TABLE :TEST EQ :COUNT 0 {1003427943}> NIL) 
(:EXX (2 (:FN #\+) 2) (VECTOR 2) ((:FN #\+) 2)) 
(:EXP (2) #<HASH-TABLE :TEST EQ :COUNT 0 {1003427943}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1003427943}> NIL) 
(:RES NIL) 
(PROGN
 (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))
 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 2) (VECTOR 2))))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 1 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10085D0893}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10085D0C13}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10085D0C13}> NIL) 
(:NEX #:G3553 " g 1 9" NIL) 
(:NEX (:OP :LATERAL #\LEFTWARDS_ARROW) "" " g 1 9") 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10085D0893}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10085D0C13}>) 
(:NEX 3 "" NIL) 
(:NEX (:FN #\+) "" NIL) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10085D0893}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10085D0C13}>) 
(:NEX ⍵ "" NIL) 
(:OO ((⍵ (:FN #\+) 3)) NIL) 
(:EXP (⍵ (:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {10085D1313}> NIL) 
(:EXP ((:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {10085D1313}> NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) #<HASH-TABLE :TEST EQ :COUNT 0 {10085D1313}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {10085D1313}> NIL) 
(:RES NIL) 
(:NEX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10085FCF5B}>)
 "" " g 1 9") 
(:OO
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10085FCF5B}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3553))
 " g 1 9") 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10085FCF5B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3553)
 #<HASH-TABLE :TEST EQ :COUNT 0 {10085D1313}> NIL) 
(:CON
 (LET* ((#:G3553 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3553)
 #<HASH-TABLE :TEST EQ :COUNT 0 {10085D1313}> NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10085FCF5B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3553)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3553 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3553)) 
(:EXP (#:G3553) #<HASH-TABLE :TEST EQ :COUNT 0 {10085D1313}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {10085D1313}> NIL) 
(:OM
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3553 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:RES " g 1 9") 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10085D0893}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10085D0C13}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10085D0C13}> #:G3553) 
(:NEX #:G3553 "" NIL) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {10085D0893}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10085D0C13}>) 
(:NEX 1 "" NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10085D0893}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10085D0C13}>) 
(:NEX 9 "" NIL) 
(:OO ((9 1 #:G3553)) NIL) 
(:EXP (9 1 #:G3553) #<HASH-TABLE :TEST EQ :COUNT 1 {10085D1313}> NIL) 
(:EXP (1 #:G3553) #<HASH-TABLE :TEST EQ :COUNT 1 {10085D1313}> NIL) 
(:EXP (#:G3553) #<HASH-TABLE :TEST EQ :COUNT 1 {10085D1313}>
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3553 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:EXX (9 1 #:G3553) (VECTOR 1 9) (#:G3553)) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {10085D1313}> NIL) 
(:HH #:G3553) 
(:RES NIL) 
(LET* ((#:G3553 :UNDEFINED))
  (SETQ #:G3553
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3553 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G3553 (VECTOR 1 9))))
APRIL> (april (set (:compile-onl)) "g←{3+⍵} ◊ g 1 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100862AB83}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100862AF03}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {100862AF03}> NIL) 
(:NEX #:G3554 " g 1 9" NIL) 
(:NEX (:OP :LATERAL #\LEFTWARDS_ARROW) "" " g 1 9") 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {100862AB83}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100862AF03}>) 
(:NEX 3 "" NIL) 
(:NEX (:FN #\+) "" NIL) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100862AB83}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100862AF03}>) 
(:NEX ⍵ "" NIL) 
(:OO ((⍵ (:FN #\+) 3)) NIL) 
(:EXP (⍵ (:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {100862B603}> NIL) 
(:EXP ((:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {100862B603}> NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) #<HASH-TABLE :TEST EQ :COUNT 0 {100862B603}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {100862B603}> NIL) 
(:RES NIL) 
(:NEX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100865E12B}>)
 "" " g 1 9") 
(:OO
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100865E12B}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3554))
 " g 1 9") 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100865E12B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3554)
 #<HASH-TABLE :TEST EQ :COUNT 0 {100862B603}> NIL) 
(:CON
 (LET* ((#:G3554 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3554)
 #<HASH-TABLE :TEST EQ :COUNT 0 {100862B603}> NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100865E12B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3554)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3554 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3554)) 
(:EXP (#:G3554) #<HASH-TABLE :TEST EQ :COUNT 0 {100862B603}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {100862B603}> NIL) 
(:OM
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3554 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:RES " g 1 9") 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100862AB83}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100862AF03}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {100862AF03}> #:G3554) 
(:NEX #:G3554 "" NIL) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {100862AB83}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100862AF03}>) 
(:NEX 1 "" NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {100862AB83}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100862AF03}>) 
(:NEX 9 "" NIL) 
(:OO ((9 1 #:G3554)) NIL) 
(:EXP (9 1 #:G3554) #<HASH-TABLE :TEST EQ :COUNT 1 {100862B603}> NIL) 
(:EXP (1 #:G3554) #<HASH-TABLE :TEST EQ :COUNT 1 {100862B603}> NIL) 
(:EXP (#:G3554) #<HASH-TABLE :TEST EQ :COUNT 1 {100862B603}>
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3554 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:EXX (9 1 #:G3554) (VECTOR 1 9) (#:G3554)) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {100862B603}> NIL) 
(:HH #:G3554) 
(:RES NIL) ; in: LET* ((#:G3554 :UNDEFINED))
;     (LET* ((#:G3554 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 3))))
; 
; caught STYLE-WARNING:
;   The variable #:G3554 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(4 12)
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10086E76D3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {10086E7A53}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {10086E7A53}> NIL) 
(:NEX #:G3555 " {g 2 ⍵} 9" NIL) 
(:NEX (:OP :LATERAL #\LEFTWARDS_ARROW) "" " {g 2 ⍵} 9") 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10086E76D3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10086E7A53}>) 
(:NEX 3 "" NIL) 
(:NEX (:FN #\+) "" NIL) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10086E76D3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10086E7A53}>) 
(:NEX ⍵ "" NIL) 
(:OO ((⍵ (:FN #\+) 3)) NIL) 
(:EXP (⍵ (:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {10086EF473}> NIL) 
(:EXP ((:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {10086EF473}> NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) #<HASH-TABLE :TEST EQ :COUNT 0 {10086EF473}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {10086EF473}> NIL) 
(:RES NIL) 
(:NEX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {100871A51B}>)
 "" " {g 2 ⍵} 9") 
(:OO
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100871A51B}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3555))
 " {g 2 ⍵} 9") 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100871A51B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3555)
 #<HASH-TABLE :TEST EQ :COUNT 0 {10086EF473}> NIL) 
(:CON
 (LET* ((#:G3555 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3555)
 #<HASH-TABLE :TEST EQ :COUNT 0 {10086EF473}> NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100871A51B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3555)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3555 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3555)) 
(:EXP (#:G3555) #<HASH-TABLE :TEST EQ :COUNT 0 {10086EF473}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {10086EF473}> NIL) 
(:OM
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3555 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:RES " {g 2 ⍵} 9") 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10086E76D3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10086E7A53}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {10086E7A53}> #:G3555) 
(:NEX #:G3555 "" NIL) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {10086E76D3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10086E7A53}>) 
(:NEX 2 "" NIL) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10086E76D3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10086E7A53}>) 
(:NEX ⍵ "" NIL) 
(:OO ((⍵ 2 #:G3555)) NIL) 
(:EXP (⍵ 2 #:G3555) #<HASH-TABLE :TEST EQ :COUNT 1 {10086EF473}> NIL) 
(:EXP (2 #:G3555) #<HASH-TABLE :TEST EQ :COUNT 1 {10086EF473}> NIL) 
(:EXP (#:G3555) #<HASH-TABLE :TEST EQ :COUNT 1 {10086EF473}>
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3555 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:EXX (⍵ 2 #:G3555) (VECTOR 2 ⍵) (#:G3555)) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {10086EF473}> NIL) 
(:HH #:G3555) 
(:RES NIL) 
(:NEX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10087439EB}>)
 "" NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10086E76D3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {10086E7A53}>) 
(:NEX 9 "" NIL) 
(:OO
 ((9
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10087439EB}>)))
 NIL) 
(:EXP
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10087439EB}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {10086EF473}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10087439EB}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {10086EF473}> NIL) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10087439EB}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10087439EB}>))) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {10086EF473}> NIL) 
(:CON
 (LET* ((#:G3555
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (LET* ((#:G3555 NIL))
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
   (DISCLOSE (FUNCALL #:G3555 (VECTOR 2 ⍵))))) 
(:RES NIL) 
(LET* ((#:G3555 :UNDEFINED))
  (SETQ #:G3555
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G3555 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3555
              (LAMBDA (OMEGA &OPTIONAL ALPHA)
                (FUNCALL
                 (LAMBDA (⍵ &OPTIONAL ⍺)
                   (DECLARE (IGNORABLE ⍺))
                   (LET* ((#:G3555 NIL))
                     (DISCLOSE
                      (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
                 (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
        (DISCLOSE (FUNCALL #:G3555 (VECTOR 2 ⍵)))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-onl)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10087677A3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008767B23}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1008767B23}> NIL) 
(:NEX #:G3556 " {g 2 ⍵} 9" NIL) 
(:NEX (:OP :LATERAL #\LEFTWARDS_ARROW) "" " {g 2 ⍵} 9") 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10087677A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008767B23}>) 
(:NEX 3 "" NIL) 
(:NEX (:FN #\+) "" NIL) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10087677A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008767B23}>) 
(:NEX ⍵ "" NIL) 
(:OO ((⍵ (:FN #\+) 3)) NIL) 
(:EXP (⍵ (:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {100876F8F3}> NIL) 
(:EXP ((:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {100876F8F3}> NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) #<HASH-TABLE :TEST EQ :COUNT 0 {100876F8F3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {100876F8F3}> NIL) 
(:RES NIL) 
(:NEX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10087A899B}>)
 "" " {g 2 ⍵} 9") 
(:OO
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10087A899B}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3556))
 " {g 2 ⍵} 9") 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10087A899B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3556)
 #<HASH-TABLE :TEST EQ :COUNT 0 {100876F8F3}> NIL) 
(:CON
 (LET* ((#:G3556 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3556)
 #<HASH-TABLE :TEST EQ :COUNT 0 {100876F8F3}> NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10087A899B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3556)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3556 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3556)) 
(:EXP (#:G3556) #<HASH-TABLE :TEST EQ :COUNT 0 {100876F8F3}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {100876F8F3}> NIL) 
(:OM
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3556 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:RES " {g 2 ⍵} 9") 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10087677A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008767B23}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1008767B23}> #:G3556) 
(:NEX #:G3556 "" NIL) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {10087677A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008767B23}>) 
(:NEX 2 "" NIL) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10087677A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008767B23}>) 
(:NEX ⍵ "" NIL) 
(:OO ((⍵ 2 #:G3556)) NIL) 
(:EXP (⍵ 2 #:G3556) #<HASH-TABLE :TEST EQ :COUNT 1 {100876F8F3}> NIL) 
(:EXP (2 #:G3556) #<HASH-TABLE :TEST EQ :COUNT 1 {100876F8F3}> NIL) 
(:EXP (#:G3556) #<HASH-TABLE :TEST EQ :COUNT 1 {100876F8F3}>
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3556 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:EXX (⍵ 2 #:G3556) (VECTOR 2 ⍵) (#:G3556)) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {100876F8F3}> NIL) 
(:HH #:G3556) 
(:RES NIL) 
(:NEX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10087D1D9B}>)
 "" NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10087677A3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008767B23}>) 
(:NEX 9 "" NIL) 
(:OO
 ((9
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10087D1D9B}>)))
 NIL) 
(:EXP
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10087D1D9B}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {100876F8F3}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10087D1D9B}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {100876F8F3}> NIL) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10087D1D9B}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10087D1D9B}>))) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {100876F8F3}> NIL) 
(:CON
 (LET* ((#:G3556
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (LET* ((#:G3556 NIL))
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
   (DISCLOSE (FUNCALL #:G3556 (VECTOR 2 ⍵))))) 
(:RES NIL) ; in: LET* ((#:G3556 :UNDEFINED))
;     (LET* ((#:G3556 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 3))))
; 
; caught STYLE-WARNING:
;   The variable #:G3556 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G3556 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#(5 #(12))
APRIL> (april (set (:compile-onl)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10088771F3}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008877573}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {1008877573}> NIL) 
(:NEX #:G3557 " {g 2 ⍵} 9" NIL) 
(:NEX (:OP :LATERAL #\LEFTWARDS_ARROW) "" " {g 2 ⍵} 9") 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {10088771F3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008877573}>) 
(:NEX 3 "" NIL) 
(:NEX (:FN #\+) "" NIL) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10088771F3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008877573}>) 
(:NEX ⍵ "" NIL) 
(:OO ((⍵ (:FN #\+) 3)) NIL) 
(:EXP (⍵ (:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {1008877C73}> NIL) 
(:EXP ((:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {1008877C73}> NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) #<HASH-TABLE :TEST EQ :COUNT 0 {1008877C73}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1008877C73}> NIL) 
(:RES NIL) 
(:NEX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10088B4D7B}>)
 "" " {g 2 ⍵} 9") 
(:OO
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10088B4D7B}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3557))
 " {g 2 ⍵} 9") 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10088B4D7B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3557)
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008877C73}> NIL) 
(:CON
 (LET* ((#:G3557 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3557)
 #<HASH-TABLE :TEST EQ :COUNT 0 {1008877C73}> NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10088B4D7B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3557)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3557 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3557)) 
(:EXP (#:G3557) #<HASH-TABLE :TEST EQ :COUNT 0 {1008877C73}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1008877C73}> NIL) 
(:OM
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3557 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:RES " {g 2 ⍵} 9") 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {10088771F3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008877573}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {1008877573}> #:G3557) 
(:NEX #:G3557 "" NIL) 
(:STR "2") 
(:EL "2" #<HASH-TABLE :TEST EQ :COUNT 3 {10088771F3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008877573}>) 
(:NEX 2 "" NIL) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {10088771F3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008877573}>) 
(:NEX ⍵ "" NIL) 
(:OO ((⍵ 2 #:G3557)) NIL) 
(:EXP (⍵ 2 #:G3557) #<HASH-TABLE :TEST EQ :COUNT 1 {1008877C73}> NIL) 
(:EXP (2 #:G3557) #<HASH-TABLE :TEST EQ :COUNT 1 {1008877C73}> NIL) 
(:EXP (#:G3557) #<HASH-TABLE :TEST EQ :COUNT 1 {1008877C73}>
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3557 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:EXX (⍵ 2 #:G3557) (VECTOR 2 ⍵) (#:G3557)) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {1008877C73}> NIL) 
(:HH #:G3557) 
(:RES NIL) 
(:NEX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10088DE14B}>)
 "" NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {10088771F3}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008877573}>) 
(:NEX 9 "" NIL) 
(:OO
 ((9
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10088DE14B}>)))
 NIL) 
(:EXP
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10088DE14B}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008877C73}> NIL) 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10088DE14B}>))
 #<HASH-TABLE :TEST EQ :COUNT 1 {1008877C73}> NIL) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10088DE14B}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10088DE14B}>))) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {1008877C73}> NIL) 
(:CON
 (LET* ((#:G3557
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (LET* ((#:G3557 NIL))
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
   (DISCLOSE (FUNCALL #:G3557 (VECTOR 2 ⍵))))) 
(:RES NIL) ; in: LET* ((#:G3557 :UNDEFINED))
;     (LET* ((#:G3557 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 3))))
; 
; caught STYLE-WARNING:
;   The variable #:G3557 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G3557 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#(5 #(12))
APRIL> (april (set (:compile-onl)) "g←{3+⍵} ◊ g 1 9")

(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100264F533}>
 #<HASH-TABLE :TEST EQ :COUNT 0 {100264F8B3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 0 {100264F8B3}> NIL) 
(:NEX #:G3558 " g 1 9" NIL) 
(:NEX (:OP :LATERAL #\LEFTWARDS_ARROW) "" " g 1 9") 
(:STR "3") 
(:EL "3" #<HASH-TABLE :TEST EQ :COUNT 3 {100264F533}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100264F8B3}>) 
(:NEX 3 "" NIL) 
(:NEX (:FN #\+) "" NIL) 
(:STR "⍵") 
(:EL "⍵" #<HASH-TABLE :TEST EQ :COUNT 3 {100264F533}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100264F8B3}>) 
(:NEX ⍵ "" NIL) 
(:OO ((⍵ (:FN #\+) 3)) NIL) 
(:EXP (⍵ (:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {1002777D23}> NIL) 
(:EXP ((:FN #\+) 3) #<HASH-TABLE :TEST EQ :COUNT 0 {1002777D23}> NIL) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXP (3) #<HASH-TABLE :TEST EQ :COUNT 0 {1002777D23}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1002777D23}> NIL) 
(:RES NIL) 
(:NEX
 (:FN
  #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
              :IN
              FORMAT-FUNCTION) {10028A2A9B}>)
 "" " g 1 9") 
(:OO
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10028A2A9B}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3558))
 " g 1 9") 
(:EXP
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10028A2A9B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3558)
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002777D23}> NIL) 
(:CON
 (LET* ((#:G3558 NIL))
   (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3))))) 
(:EXP ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3558)
 #<HASH-TABLE :TEST EQ :COUNT 0 {1002777D23}> NIL) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10028A2A9B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G3558)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3558 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G3558)) 
(:EXP (#:G3558) #<HASH-TABLE :TEST EQ :COUNT 0 {1002777D23}> NIL) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 0 {1002777D23}> NIL) 
(:OM
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3558 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:RES " g 1 9") 
(:STR "g") 
(:EL "g" #<HASH-TABLE :TEST EQ :COUNT 3 {100264F533}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100264F8B3}>) 
(:ELEM "g" #<HASH-TABLE :TEST EQ :COUNT 1 {100264F8B3}> #:G3558) 
(:NEX #:G3558 "" NIL) 
(:STR "1") 
(:EL "1" #<HASH-TABLE :TEST EQ :COUNT 3 {100264F533}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100264F8B3}>) 
(:NEX 1 "" NIL) 
(:STR "9") 
(:EL "9" #<HASH-TABLE :TEST EQ :COUNT 3 {100264F533}>
 #<HASH-TABLE :TEST EQ :COUNT 1 {100264F8B3}>) 
(:NEX 9 "" NIL) 
(:OO ((9 1 #:G3558)) NIL) 
(:EXP (9 1 #:G3558) #<HASH-TABLE :TEST EQ :COUNT 1 {1002777D23}> NIL) 
(:EXP (1 #:G3558) #<HASH-TABLE :TEST EQ :COUNT 1 {1002777D23}> NIL) 
(:EXP (#:G3558) #<HASH-TABLE :TEST EQ :COUNT 1 {1002777D23}>
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G3558 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))) 
(:EXX (9 1 #:G3558) (VECTOR 1 9) (#:G3558)) 
(:EXP NIL #<HASH-TABLE :TEST EQ :COUNT 1 {1002777D23}> NIL) 
(:HH #:G3558) 
(:RES NIL) ; in: LET* ((#:G3558 :UNDEFINED))
;     (LET* ((#:G3558 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 3))))
; 
; caught STYLE-WARNING:
;   The variable #:G3558 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(4 12)
APRIL> (asdf:load-system 'april)
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 12:23:17 AM):
; compiling (IN-PACKAGE #:VEX)
; compiling (DEFCLASS IDIOM ...)
; compiling (DEFGENERIC OF-STATE ...)
; compiling (DEFMETHOD OF-STATE ...)
; compiling (DEFGENERIC OF-UTILITIES ...)
; compiling (DEFMETHOD OF-UTILITIES ...)
; compiling (DEFGENERIC OF-FUNCTIONS ...)
; compiling (DEFMETHOD OF-FUNCTIONS ...)
; compiling (DEFGENERIC OF-OPERATORS ...)
; compiling (DEFMETHOD OF-OPERATORS ...)
; compiling (DEFGENERIC OF-OVERLOADED? ...)
; compiling (DEFMETHOD OF-OVERLOADED? ...)
; compiling (DEFMETHOD MAKE-LOAD-FORM ...)
; compiling (DEFMACRO BOOLEAN-OP ...)
; compiling (DEFMACRO REVERSE-OP ...)
; compiling (DEFMACRO REVERSE-BOOLEAN-OP ...)
; compiling (DEFMACRO VEX-SPEC ...)
; compiling (DEFUN DERIVE-OPGLYPHS ...)
; compiling (DEFUN =VEX-STRING ...)
; compiling (DEFUN VEX-EXPRESSION ...)
; compiling (DEFUN VEX-PROGRAM ...)

; /Users/owner/.cache/common-lisp/sbcl-1.4.2-macosx-x64/Users/owner/Documents/src/april/vex/vex-tmpX4BRKI0R.fasl written
; compilation finished in 0:00:00.182
; compiling file "/Users/owner/Documents/src/april/package.lisp" (written 09 MAR 2018 09:34:08 AM):
; compiling (DEFPACKAGE #:APRIL ...)

; /Users/owner/.cache/common-lisp/sbcl-1.4.2-macosx-x64/Users/owner/Documents/src/april/package-tmpQ371UGST.fasl written
; compilation finished in 0:00:00.013
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 12:23:02 AM):
; compiling (IN-PACKAGE #:APRIL)
; compiling (DEFUN ARRAY-TO-NESTED-VECTOR ...)
; compiling (DEFUN IS-SINGLETON ...)
; compiling (DEFUN APPLY-SCALAR-MONADIC ...)
; compiling (DEFUN APPLY-SCALAR-DYADIC ...)
; compiling (DEFMACRO MEDIATE-OPERATION ...)
; compiling (DEFUN NUMERIC-STRING-P ...)
; compiling (DEFUN PARSE-APL-NUMBER-STRING ...)
; compiling (DEFUN FORMAT-VALUE ...)
; compiling (DEFUN FORMAT-ARRAY ...)
; compiling (DEFUN FORMAT-FUNCTION ...)
; compiling (DEFUN ENCLOSE ...)
; compiling (DEFUN DISCLOSE ...)
; compiling (DEFUN PROCESS-OUTPUT-VECTOR ...)
; compiling (DEFUN ASSEMBLE-VALUE ...)
; compiling (DEFUN ASSEMBLE-OPERATION ...)
; compiling (DEFUN LEFT-INVERT-MATRIX ...)
; compiling (DEFUN COMPOSE-STAGE ...)
; compiling (DEFUN OVER-OPERATOR-TEMPLATE ...)
; compiling (VEX-SPEC APRIL ...)

; /Users/owner/.cache/common-lisp/sbcl-1.4.2-macosx-x64/Users/owner/Documents/src/april/april-tmp2OWI3Q7U.fasl written
; compilation finished in 0:00:00.485
T
APRIL> (april (set (:compile-onl)) "g←{3+⍵} ◊ g 1 9")
; in: LET* ((#:G3559 :UNDEFINED))
;     (LET* ((#:G3559 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 3))))
; 
; caught STYLE-WARNING:
;   The variable #:G3559 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(4 12)
APRIL> (enclose 5)
#(5)
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:14:21 AM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.604
APRIL> (april (set (:compile-onl)) "g←{3+⍵} ◊ {g 2 ⍵} 9")
; in: LET* ((#:G3560 :UNDEFINED))
;     (LET* ((#:G3560 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 3))))
; 
; caught STYLE-WARNING:
;   The variable #:G3560 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G3560 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#(5 #(12))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:14:39 AM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.356
APRIL> (april (test))
1..226

[←] Assign
  [32m✓ [90m55 is expected to be 55[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((7 7
                                                                                7
                                                                                7)
                                                                               (5 6
                                                                                7
                                                                                8)
                                                                               (9 1
                                                                                2
                                                                                3))
                                                                              ((7 7
                                                                                7
                                                                                7)
                                                                               (8 9
                                                                                1
                                                                                2)
                                                                               (3 4
                                                                                5
                                                                                6))))[0m


[⊣] Empty / Left
  [32m✓ [90m#() is expected to be #()[0m 
[0m
  [32m✓ [90m55 is expected to be 55[0m 
[0m

[⊢] Identity / Right
  [32m✓ [90m77 is expected to be 77[0m 
[0m
  [32m✓ [90m77 is expected to be 77[0m 
[0m

[+] Identity or Negate Imaginary / Add
  [32m✓ [90m5 is expected to be 5[0m 
[0m
  [32m✓ [90m#C(5 -2) is expected to be #C(5 -2)[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m#(2 3 4) is expected to be #(2 3 4)[0m 
[0m

[-] Negate / Subtract
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(5 4 3) is expected to be #(5 4 3)[0m 
[0m

[×] Direction / Multiply
  [32m✓ [90m#(1 1 0 -1 1 -1) is expected to be #(1 1 0 -1 1 -1)[0m 
[0m
  [32m✓ [90m6 is expected to be 6[0m 
[0m
  [32m✓ [90m#(32 45) is expected to be #(32 45)[0m 
[0m

[÷] Reciprocal / Divide
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m#(2 4 6) is expected to be #(2 4 6)[0m 
[0m
  [32m✓ [90m#(1/2 1/4 1/8) is expected to be #(1/2 1/4 1/8)[0m 
[0m

[⋆] Exponential / Power
  [32m✓ [90m7389 is expected to be 7389[0m 
[0m
  [32m✓ [90m16 is expected to be 16[0m 
[0m
  [32m✓ [90m4 is expected to be 4[0m 
[0m

[⍟] Natural Logarithm / Logarithm
  [32m✓ [90m1609 is expected to be 1609[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m

[|] Magnitude / Residue
  [32m✓ [90m55 is expected to be 55[0m 
[0m
  [32m✓ [90m33 is expected to be 33[0m 
[0m
  [32m✓ [90m7 is expected to be 7[0m 
[0m

[!] Factorial / Binomial
  [32m✓ [90m120 is expected to be 120[0m 
[0m
  [32m✓ [90m792 is expected to be 792[0m 
[0m

[⌈] Ceiling / Maximum
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m#(3 3 3 3 4 5) is expected to be #(3 3 3 3 4 5)[0m 
[0m

[⌊] Floor / Minimum
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(0 1 2 3 3 3) is expected to be #(0 1 2 3 3 3)[0m 
[0m

[○] Pi Times / Circular
  [32m✓ [90m314159 is expected to be 314159[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: 1)[0m


[~] Not / Without
  [32m✓ [90m#(0 1 0) is expected to be #(0 1 0)[0m 
[0m
  [32m✓ [90m#(1 2 4 6 7) is expected to be #(1 2 4 6 7)[0m 
[0m
  [32m✓ [90m"MCNI" is expected to be "MCNI"[0m 
[0m

[<] Less
  [32m✓ [90m#(0 0 0 1 1) is expected to be #(0 0 0 1 1)[0m 
[0m

[≤] Less or Equal
  [32m✓ [90m#(0 0 1 1 1) is expected to be #(0 0 1 1 1)[0m 
[0m

[=] Equal
  [32m✓ [90m#(0 0 1 0 0) is expected to be #(0 0 1 0 0)[0m [33m(43ms)[0m
[0m

[≥] Greater or Equal
  [32m✓ [90m#(1 1 1 0 0) is expected to be #(1 1 1 0 0)[0m 
[0m

[>] Greater
  [32m✓ [90m#(1 1 0 0 0) is expected to be #(1 1 0 0 0)[0m 
[0m

[≠] Not Equal
  [32m✓ [90m#(1 1 0 1 1) is expected to be #(1 1 0 1 1)[0m 
[0m

[≡] Depth / Match
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: 3)[0m


[≢] First Dimension / Not Match
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[∧] And
  [32m✓ [90m#(0 0 0 1) is expected to be #(0 0 0 1)[0m 
[0m

[⍲] Nand
  [32m✓ [90m#(1 1 1 0) is expected to be #(1 1 1 0)[0m 
[0m

[∨] Or
  [32m✓ [90m#(0 1 1 1) is expected to be #(0 1 1 1)[0m 
[0m

[⍱] Nor
  [32m✓ [90m#(1 0 0 0) is expected to be #(1 0 0 0)[0m 
[0m

[⍳] Index / Index Of
  [32m✓ [90m#(1 2 3 4 5) is expected to be #(1 2 3 4 5)[0m 
[0m
  [32m✓ [90m#(2 2 1 2 2) is expected to be #(2 2 1 2 2)[0m 
[0m

[⍴] Shape / Reshape
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m#(3 5) is expected to be #(3 5)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2)) is expected to be #2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2))[0m 
[0m

[⌷] At Axes
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m7 is expected to be 7[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(4 5 1 2))[0m


[∊] Enlist / Membership
  [32m✓ [90m#(1 2 3 4 5 6 7 8) is expected to be #(1 2 3 4 5 6 7 8)[0m 
[0m
  [32m✓ [90m#(1 1 0) is expected to be #(1 1 0)[0m 
[0m

[⍷] Find
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((0 0
                                                                                0
                                                                                0)
                                                                               (0 1
                                                                                0
                                                                                0)
                                                                               (0 0
                                                                                0
                                                                                0))
                                                                              ((0 0
                                                                                1
                                                                                0)
                                                                               (0 0
                                                                                0
                                                                                0)
                                                                               (0 0
                                                                                0
                                                                                0))))[0m


[↑] Disclose / Take
  [32m✓ [90m#(1 2 3 4) is expected to be #(1 2 3 4)[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1))) is expected to be #3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1)))[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1 2
                                                                                3
                                                                                4)
                                                                               (5 6
                                                                                7
                                                                                8)
                                                                               (9 1
                                                                                2
                                                                                3))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1 2
                                                                                3
                                                                                4))
                                                                              ((4 5
                                                                                6
                                                                                7))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1 2
                                                                                3
                                                                                4)
                                                                               (5 6
                                                                                7
                                                                                8))
                                                                              ((4 5
                                                                                6
                                                                                7)
                                                                               (8 9
                                                                                1
                                                                                2))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1
                                                                                2)
                                                                               (5
                                                                                6)
                                                                               (9
                                                                                1))
                                                                              ((4
                                                                                5)
                                                                               (8
                                                                                9)
                                                                               (3
                                                                                4))))[0m


[↓] Split / Drop
  [32m✓ [90m#(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3)) is expected to be #(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3))[0m 
[0m
  [32m✓ [90m#3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3))) is expected to be #3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3)))[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((4 5
                                                                                6
                                                                                7)
                                                                               (8 9
                                                                                1
                                                                                2)
                                                                               (3 4
                                                                                5
                                                                                6))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((5 6
                                                                                7
                                                                                8)
                                                                               (9 1
                                                                                2
                                                                                3))
                                                                              ((8 9
                                                                                1
                                                                                2)
                                                                               (3 4
                                                                                5
                                                                                6))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((9 1
                                                                                2
                                                                                3))
                                                                              ((3 4
                                                                                5
                                                                                6))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((3
                                                                                4)
                                                                               (7
                                                                                8)
                                                                               (2
                                                                                3))
                                                                              ((6
                                                                                7)
                                                                               (1
                                                                                2)
                                                                               (5
                                                                                6))))[0m
  [32m✓ [90m#(1 2 3 4 5 6 7) is expected to be #(1 2 3 4 5 6 7)[0m 
[0m

[,] Ravel / Catenate or Laminate
  [32m✓ [90m#(1 2 3 4 5 6 7 8 9 1 2 3) is expected to be #(1 2 3 4 5 6 7 8 9 1 2 3)[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1 2
                                                                                3
                                                                                4)
                                                                               (5 6
                                                                                7
                                                                                8)
                                                                               (9 1
                                                                                2
                                                                                3))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1 2
                                                                                3
                                                                                4))
                                                                              ((5 6
                                                                                7
                                                                                8))
                                                                              ((9 1
                                                                                2
                                                                                3))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1)
                                                                               (2)
                                                                               (3)
                                                                               (4))
                                                                              ((5)
                                                                               (6)
                                                                               (7)
                                                                               (8))
                                                                              ((9)
                                                                               (1)
                                                                               (2)
                                                                               (3))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2
                                                                               3)
                                                                              (4 5
                                                                               6)
                                                                              (7 8
                                                                               9)
                                                                              (10
                                                                               11
                                                                               12)
                                                                              (1 2
                                                                               3)
                                                                              (4 5
                                                                               6)))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2
                                                                               3 4
                                                                               5 6
                                                                               7 8
                                                                               9)
                                                                              (10
                                                                               11
                                                                               12 1
                                                                               2 3
                                                                               4 5
                                                                               6)))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(1 2 3 4
                                                                            5 6 7 8
                                                                            9 10 11
                                                                            12 1 2
                                                                            3 4 5 6))[0m
  [32m✓ [90m#2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3)) is expected to be #2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3))[0m [33m(43ms)[0m
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((0 0
                                                                               0 0)
                                                                              (1 2
                                                                               3 4)
                                                                              (5 6
                                                                               7 8)
                                                                              (9 1
                                                                               2 3)))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2
                                                                               3 4
                                                                               5 6
                                                                               1 2
                                                                               3 4)
                                                                              (1 2
                                                                               3 4
                                                                               5 6
                                                                               5 6
                                                                               7 8)
                                                                              (1 2
                                                                               3 4
                                                                               5 6
                                                                               9 1
                                                                               2 3)))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2
                                                                               3 4)
                                                                              (5 6
                                                                               1 2)
                                                                              (3 4
                                                                               5 6)
                                                                              (1 2
                                                                               3 4)
                                                                              (5 6
                                                                               1 2)
                                                                              (1 2
                                                                               3 4)
                                                                              (5 6
                                                                               7 8)
                                                                              (9 1
                                                                               2 3)))[0m
  [32m✓ [90m#(1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6)[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(1 2 3 4
                                                                            5 6))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2
                                                                               3 4)
                                                                              (1 2
                                                                               3 4)))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 1)
                                                                              (2 2)
                                                                              (3 3)
                                                                              (4 4)))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1 2
                                                                                3)
                                                                               (4 5
                                                                                6))
                                                                              ((1 2
                                                                                3)
                                                                               (4 5
                                                                                6))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1
                                                                                1)
                                                                               (2
                                                                                2)
                                                                               (3
                                                                                3))
                                                                              ((4
                                                                                4)
                                                                               (5
                                                                                5)
                                                                               (6
                                                                                6))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((#\U
                                                                               #\N
                                                                               #\D
                                                                               #\E
                                                                               #\R)
                                                                              (#\-
                                                                               #\-
                                                                               #\-
                                                                               #\-
                                                                               #\-)))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((#\H
                                                                               #\.)
                                                                              (#\E
                                                                               #\.)
                                                                              (#\L
                                                                               #\.)
                                                                              (#\L
                                                                               #\.)
                                                                              (#\O
                                                                               #\.)))[0m


[⍪] Table / Catenate First
  [32m✓ [90m#2A((#\M) (#\A) (#\K) (#\E)) is expected to be #2A((#\M) (#\A) (#\K) (#\E))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24)) is expected to be #2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24))[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((0 1
                                                                               2 3
                                                                               4)
                                                                              (0 5
                                                                               6 7
                                                                               8)
                                                                              (0 9
                                                                               1 2
                                                                               3)))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2
                                                                               3 4)
                                                                              (5 6
                                                                               1 2)
                                                                              (3 4
                                                                               5 6)
                                                                              (1 2
                                                                               3 4)
                                                                              (5 6
                                                                               1 2)
                                                                              (1 2
                                                                               3 4)
                                                                              (5 6
                                                                               7 8)
                                                                              (9 1
                                                                               2 3)))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2
                                                                               3 4
                                                                               5 6
                                                                               1 2
                                                                               3 4)
                                                                              (1 2
                                                                               3 4
                                                                               5 6
                                                                               5 6
                                                                               7 8)
                                                                              (1 2
                                                                               3 4
                                                                               5 6
                                                                               9 1
                                                                               2 3)))[0m


[/] Replicate
  [32m✓ [90m#(3 3 3 3 3) is expected to be #(3 3 3 3 3)[0m 
[0m
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
  [32m✓ [90m#(1 1 1) is expected to be #(1 1 1)[0m 
[0m
  [32m✓ [90m#(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5)) is expected to be #(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5))[0m 
[0m
  [32m✓ [90m#2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)) is expected to be #2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5))[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2
                                                                               3 4
                                                                               5)
                                                                              (0 0
                                                                               0 0
                                                                               0)
                                                                              (0 0
                                                                               0 0
                                                                               0)
                                                                              (2 3
                                                                               4 5
                                                                               6)
                                                                              (2 3
                                                                               4 5
                                                                               6)
                                                                              (2 3
                                                                               4 5
                                                                               6)))[0m


[⌿] Replicate First
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6)) is expected to be #2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6))[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 0
                                                                               0 3
                                                                               3 3
                                                                               0 0
                                                                               0 0
                                                                               5 5
                                                                               5 5
                                                                               5)
                                                                              (1 0
                                                                               0 3
                                                                               3 3
                                                                               0 0
                                                                               0 0
                                                                               5 5
                                                                               5 5
                                                                               5)
                                                                              (1 0
                                                                               0 3
                                                                               3 3
                                                                               0 0
                                                                               0 0
                                                                               5 5
                                                                               5 5
                                                                               5)))[0m


[\] Expand
  [32m✓ [90m".  ...    ....." is expected to be ".  ...    ....."[0m 
[0m
  [32m✓ [90m#2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9)) is expected to be #2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9))[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((4 5
                                                                               6)
                                                                              (0 0
                                                                               0)
                                                                              (7 8
                                                                               9)))[0m


[⍀] Expand First
  [32m✓ [90m#(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3) is expected to be #(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3)[0m 
[0m
  [32m✓ [90m#2A((4 5 6) (0 0 0) (7 8 9)) is expected to be #2A((4 5 6) (0 0 0) (7 8 9))[0m 
[0m

[⊂] Enclose / Partition
  [32m✓ [90m#(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5))) is expected to be #(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5)))[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A(("GRAY"
                                                                               "GOLD"
                                                                               "BLUE")
                                                                              ("SILK"
                                                                               "WOOL"
                                                                               "YARN")))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A(("GGB"
                                                                               "ROL"
                                                                               "ALU"
                                                                               "YDE")
                                                                              ("SWY"
                                                                               "IOA"
                                                                               "LOR"
                                                                               "KLN")))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A(("GS"
                                                                               "RI"
                                                                               "AL"
                                                                               "YK")
                                                                              ("GW"
                                                                               "OO"
                                                                               "LO"
                                                                               "DL")
                                                                              ("BY"
                                                                               "LA"
                                                                               "UR"
                                                                               "EN")))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(#2A((#\G
                                                                                 #\R
                                                                                 #\A
                                                                                 #\Y)
                                                                                (#\G
                                                                                 #\O
                                                                                 #\L
                                                                                 #\D)
                                                                                (#\B
                                                                                 #\L
                                                                                 #\U
                                                                                 #\E))
                                                                            #2A((#\S
                                                                                 #\I
                                                                                 #\L
                                                                                 #\K)
                                                                                (#\W
                                                                                 #\O
                                                                                 #\O
                                                                                 #\L)
                                                                                (#\Y
                                                                                 #\A
                                                                                 #\R
                                                                                 #\N))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(#2A((#\G
                                                                                 #\R
                                                                                 #\A
                                                                                 #\Y)
                                                                                (#\S
                                                                                 #\I
                                                                                 #\L
                                                                                 #\K))
                                                                            #2A((#\G
                                                                                 #\O
                                                                                 #\L
                                                                                 #\D)
                                                                                (#\W
                                                                                 #\O
                                                                                 #\O
                                                                                 #\L))
                                                                            #2A((#\B
                                                                                 #\L
                                                                                 #\U
                                                                                 #\E)
                                                                                (#\Y
                                                                                 #\A
                                                                                 #\R
                                                                                 #\N))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(#2A((#\G
                                                                                 #\G
                                                                                 #\B)
                                                                                (#\S
                                                                                 #\W
                                                                                 #\Y))
                                                                            #2A((#\R
                                                                                 #\O
                                                                                 #\L)
                                                                                (#\I
                                                                                 #\O
                                                                                 #\A))
                                                                            #2A((#\A
                                                                                 #\L
                                                                                 #\U)
                                                                                (#\L
                                                                                 #\O
                                                                                 #\R))
                                                                            #2A((#\Y
                                                                                 #\D
                                                                                 #\E)
                                                                                (#\K
                                                                                 #\L
                                                                                 #\N))))[0m
  [32m✓ [90m#(#(1 2) #(3 4 5) #(6 7 8 9)) is expected to be #(#(1 2) #(3 4 5) #(6 7 8 9))[0m 
[0m

[⍧] Partitioned Enclose
  [32m✓ [90m#(#(2 3 4) #(5) #(6 7 8 9)) is expected to be #(#(2 3 4) #(5) #(6 7 8 9))[0m 
[0m
  [32m✓ [90m#(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5))) is expected to be #(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5)))[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(#2A((9
                                                                                 1
                                                                                 2
                                                                                 3
                                                                                 4
                                                                                 5
                                                                                 6
                                                                                 7)
                                                                                (8
                                                                                 9
                                                                                 1
                                                                                 2
                                                                                 3
                                                                                 4
                                                                                 5
                                                                                 6))
                                                                            #2A((7
                                                                                 8
                                                                                 9
                                                                                 1
                                                                                 2
                                                                                 3
                                                                                 4
                                                                                 5))))[0m


[⊃] Mix / Pick
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 0
                                                                               0)
                                                                              (1 2
                                                                               0)
                                                                              (1 2
                                                                               3)))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 1
                                                                               1)
                                                                              (0 2
                                                                               2)
                                                                              (0 0
                                                                               3)))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1 2
                                                                                3)
                                                                               (4 5
                                                                                1)
                                                                               (0 0
                                                                                0)
                                                                               (0 0
                                                                                0))
                                                                              ((1 2
                                                                                0)
                                                                               (3 4
                                                                                0)
                                                                               (5 6
                                                                                0)
                                                                               (7 8
                                                                                0))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1 4
                                                                                0
                                                                                0)
                                                                               (1 3
                                                                                5
                                                                                7))
                                                                              ((2 5
                                                                                0
                                                                                0)
                                                                               (2 4
                                                                                6
                                                                                8))
                                                                              ((3 1
                                                                                0
                                                                                0)
                                                                               (0 0
                                                                                0
                                                                                0))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1 2
                                                                                3)
                                                                               (4 5
                                                                                1)
                                                                               (0 0
                                                                                0)
                                                                               (0 0
                                                                                0))
                                                                              ((1 2
                                                                                0)
                                                                               (3 4
                                                                                0)
                                                                               (5 6
                                                                                0)
                                                                               (7 8
                                                                                0))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #4A((((1
                                                                                 0
                                                                                 0)
                                                                                (1
                                                                                 2
                                                                                 0))
                                                                               ((3
                                                                                 4
                                                                                 0)
                                                                                (1
                                                                                 2
                                                                                 3)))
                                                                              (((1
                                                                                 0
                                                                                 0)
                                                                                (1
                                                                                 2
                                                                                 0))
                                                                               ((3
                                                                                 4
                                                                                 0)
                                                                                (1
                                                                                 2
                                                                                 3)))))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(4 5 6))[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: 5)[0m


[∪] Unique / Union
  [32m✓ [90m#(1 2 3 4 5 8 9 10 11 7 12) is expected to be #(1 2 3 4 5 8 9 10 11 7 12)[0m 
[0m
  [32m✓ [90m"MISP" is expected to be "MISP"[0m 
[0m
  [32m✓ [90m#(3 10 14 18 11 9 4 5 8) is expected to be #(3 10 14 18 11 9 4 5 8)[0m 
[0m
  [32m✓ [90m"STEELABR" is expected to be "STEELABR"[0m 
[0m
  [32m✓ [90m#("APRIL" "MAY" "JUNE") is expected to be #("APRIL" "MAY" "JUNE")[0m 
[0m

[∩] Intersection
  [32m✓ [90m"TRE" is expected to be "TRE"[0m 
[0m
  [32m✓ [90m"SEE" is expected to be "SEE"[0m 
[0m
  [32m✓ [90m#(1 4) is expected to be #(1 4)[0m 
[0m

[⌽] Reverse / Rotate
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
  [32m✓ [90m#2A((4 3 2 1) (8 7 6 5) (3 2 1 9)) is expected to be #2A((4 3 2 1) (8 7 6 5) (3 2 1 9))[0m 
[0m
  [32m✓ [90m#2A((3 4 1 2) (7 8 5 6) (2 3 9 1)) is expected to be #2A((3 4 1 2) (7 8 5 6) (2 3 9 1))[0m 
[0m

[⊖] Reverse First / Rotate First
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
  [32m✓ [90m#2A((9 1 2 3) (5 6 7 8) (1 2 3 4)) is expected to be #2A((9 1 2 3) (5 6 7 8) (1 2 3 4))[0m 
[0m
  [32m✓ [90m#2A((5 6 7 8) (9 1 2 3) (1 2 3 4)) is expected to be #2A((5 6 7 8) (9 1 2 3) (1 2 3 4))[0m 
[0m

[⍉] Transpose / Permute
  [32m✓ [90m#3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6))) is expected to be #3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6)))[0m 
[0m
  [32m✓ [90m#3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6))) is expected to be #3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6)))[0m 
[0m

[⌹] Matrix Inverse / Matrix Divide
  [32m✓ [90m#(1/30 1/15 1/10 2/15) is expected to be #(1/30 1/15 1/10 2/15)[0m 
[0m
  [32m✓ [90m#2A((-1/32 9/64) (1/8 -1/16)) is expected to be #2A((-1/32 9/64) (1/8 -1/16))[0m 
[0m
  [32m✓ [90m#2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42)) is expected to be #2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42))[0m 
[0m
  [32m✓ [90m#(193/90 739/90 229/45) is expected to be #(193/90 739/90 229/45)[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2)
                                                                              (2 4)
                                                                              (6 4)))[0m


[⍋] Grade Up / Grade Up By
  [32m✓ [90m#(5 7 2 3 6 1 4) is expected to be #(5 7 2 3 6 1 4)[0m 
[0m
  [32m✓ [90m#(1 4 2 5 3) is expected to be #(1 4 2 5 3)[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: "adeggijnouw")[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(1 3 2 6
                                                                            4 5))[0m


[⍒] Grade Down / Grade Down By
  [32m✓ [90m#(7 3 1 5 6 4 2) is expected to be #(7 3 1 5 6 4 2)[0m 
[0m
  [32m✓ [90m#(2 4 1 3 5) is expected to be #(2 4 1 3 5)[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: "wuonjiggeda")[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(5 4 6 2
                                                                            3 1))[0m


[⊤] Encode
  [32m✓ [90m#(2 0 10) is expected to be #(2 0 10)[0m 
[0m
  [32m✓ [90m#(0 0 6 4) is expected to be #(0 0 6 4)[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1)) is expected to be #2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1))[0m 
[0m

[⊥] Decode
  [32m✓ [90m2671 is expected to be 2671[0m 
[0m
  [32m✓ [90m101 is expected to be 101[0m 
[0m
  [32m✓ [90m#(98 75 67) is expected to be #(98 75 67)[0m 
[0m

[⍎] Evaluate
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[←] Assign Result Of
  [32m✓ [90m#(8 7 6) is expected to be #(8 7 6)[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(3 7 1))[0m


[/] Reduce
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m#(10 26 42) is expected to be #(10 26 42)[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(15 18
                                                                            21 24))[0m
; in: LET* ((#:G4457 :UNDEFINED))
;     (LET* ((#:G4457 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ APRIL::⍺)))
; 
; caught STYLE-WARNING:
;   The variable #:G4457 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m

[⌿] Reduce First
  [32m✓ [90m#(15 18 21 24) is expected to be #(15 18 21 24)[0m 
[0m
  [32m✓ [90m#(207 330 495 708) is expected to be #(207 330 495 708)[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(10 26
                                                                            42))[0m


[\] Scan
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
  [32m✓ [90m#2A((1 3 6 10) (5 11 18 26) (9 19 30 42)) is expected to be #2A((1 3 6 10) (5 11 18 26) (9 19 30 42))[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2
                                                                               3 4)
                                                                              (6 8
                                                                               10
                                                                               12)
                                                                              (15
                                                                               18
                                                                               21
                                                                               24)))[0m


[⍀] Scan First
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (6 8 10 12) (15 18 21 24)) is expected to be #2A((1 2 3 4) (6 8 10 12) (15 18 21 24))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (20 30 42 56) (288 450 660 924)) is expected to be #2A((1 2 3 4) (20 30 42 56) (288 450 660 924))[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 3
                                                                               6
                                                                               10)
                                                                              (5 11
                                                                               18
                                                                               26)
                                                                              (9 19
                                                                               30
                                                                               42)))[0m


[.] Inner/Outer Product
  [32m✓ [90m24 is expected to be 24[0m 
[0m
  [32m✓ [90m145 is expected to be 145[0m 
[0m
  [32m✓ [90m#(17 41 55) is expected to be #(17 41 55)[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(25 53
                                                                            42))[0m
  [32m✓ [90m#2A((24 34 44 54) (25 35 45 55) (26 36 46 56)) is expected to be #2A((24 34 44 54) (25 35 45 55) (26 36 46 56))[0m 
[0m
  [32m✓ [90m#2A((0 -1 -2) (1 0 -1) (2 1 0)) is expected to be #2A((0 -1 -2) (1 0 -1) (2 1 0))[0m 
[0m
  [32m✓ [90m#2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3))) is expected to be #2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3)))[0m 
[0m
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
  [32m✓ [90m#(#(2 3 1) #(3 1 2) #(1 2 3)) is expected to be #(#(2 3 1) #(3 1 2) #(1 2 3))[0m 
[0m

[¨] Each
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
  [32m✓ [90m#(#(2 3 4 5 1) #(5 1 2 3 4)) is expected to be #(#(2 3 4 5 1) #(5 1 2 3 4))[0m 
[0m

[⍨] Commute
  [32m✓ [90m5 is expected to be 5[0m 
[0m
  [32m✓ [90m20 is expected to be 20[0m 
[0m

[∘] Compose
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: 6)[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(56487
                                                                            176487
                                                                            266487))[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(148
                                                                            2981
                                                                            162755))[0m
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m
  [32m✓ [90m#(3 15 36) is expected to be #(3 15 36)[0m 
[0m

[⍣] Power; in: LET* ((#:G4630 :UNDEFINED))
;     (LET* ((#:G4630 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 2))))
; 
; caught STYLE-WARNING:
;   The variable #:G4630 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
  [32m✓ [90m11 is expected to be 11[0m 
[0m
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: 15)[0m
; in: LET* ((#:G4642 :UNDEFINED))
;     (LET* ((#:G4642 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC
;                 #'(LAMBDA (APRIL::OMEGA APRIL::ALPHA)
;                     (IF #
;                         1
;                         0))
;                 APRIL::⍵ (VECTOR 10))))
; 
; caught STYLE-WARNING:
;   The variable #:G4642 is defined but never used.

;     (LET* ((#:G4642 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 2))))
; 
; caught STYLE-WARNING:
;   The variable #:G4642 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
  [32m✓ [90m10 is expected to be 10[0m 
[0m

Basic function definition and use, with comments.; in: LET* ((#:G4649 :UNDEFINED) (#:G4650 :UNDEFINED))
;     (LET* ((#:G4649 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ (VECTOR 3) APRIL::⍵)))
; 
; caught STYLE-WARNING:
;   The variable #:G4649 is defined but never used.

;     (LET* ((#:G4649
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G4650 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'* (VECTOR 2) APRIL::⍵)))
; 
; caught STYLE-WARNING:
;   The variable #:G4649 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G4650 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
  [32m✓ [90m#(8 10 12 14 16) is expected to be #(8 10 12 14 16)[0m 
[0mMonadic inline function.
  [32m✓ [90m#(6 7 8) is expected to be #(6 7 8)[0m 
[0mDyadic inline function.
  [32m✓ [90m#(6 14 24) is expected to be #(6 14 24)[0m 
[0mVariable-referenced values, including an element within an array, in a vector.
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #(1 2 9 3
                                                                            5))[0m
Assignment of an element within an array.
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 20
                                                                               3)
                                                                              (4 5
                                                                               6)))[0m
Selection from an array with multiple elided dimensions.
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((6 2
                                                                               7 3)
                                                                              (3 8
                                                                               4 9)
                                                                              (9 5
                                                                               1 6)))[0m
Elided assignment.
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1 2
                                                                                3
                                                                                4)
                                                                               (5 6
                                                                                7
                                                                                8)
                                                                               (9 1
                                                                                2
                                                                                3))
                                                                              ((4 5
                                                                                0
                                                                                7)
                                                                               (8 9
                                                                                0
                                                                                2)
                                                                               (3 4
                                                                                0
                                                                                6))))[0m
Elided assignment of applied function's results.
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((1 2
                                                                                3
                                                                                4)
                                                                               (5 6
                                                                                7
                                                                                8)
                                                                               (9 1
                                                                                2
                                                                                3))
                                                                              ((4 5
                                                                                16
                                                                                7)
                                                                               (8 9
                                                                                11
                                                                                2)
                                                                               (3 4
                                                                                15
                                                                                6))))[0m
Elision and indexed array elements.
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2
                                                                               3 4
                                                                               5 6
                                                                               7 8)
                                                                              (7 8
                                                                               9 1
                                                                               2 3
                                                                               4 5)))[0m
As above but more complex.
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #3A(((2
                                                                                1)
                                                                               (7
                                                                                6)
                                                                               (3
                                                                                2)
                                                                               (8
                                                                                7)
                                                                               (4
                                                                                3)
                                                                               (9
                                                                                8)
                                                                               (5
                                                                                4)
                                                                               (1
                                                                                9))
                                                                              ((5
                                                                                4)
                                                                               (1
                                                                                9)
                                                                               (6
                                                                                5)
                                                                               (2
                                                                                1)
                                                                               (7
                                                                                6)
                                                                               (3
                                                                                2)
                                                                               (8
                                                                                7)
                                                                               (4
                                                                                3))))[0m
Indices of indices.
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((7 6)
                                                                              (8 7)
                                                                              (4 3)))[0m
Operation over portions of an array.
  [31m× Raised an error The function COMMON-LISP:NIL is undefined. (expected: #2A((1 2
                                                                               3 4
                                                                               5 6
                                                                               7 8)
                                                                              (19 1
                                                                               2 3
                                                                               4 15
                                                                               16
                                                                               17)
                                                                              (8 9
                                                                               1 2
                                                                               3 4
                                                                               5 6)
                                                                              (17 8
                                                                               9 1
                                                                               2 13
                                                                               14
                                                                               15)))[0m

[31m× 74 of 226 tests failed[0m [90m(808ms)[0m
NIL
APRIL> (april "⊃(1)(1 2)(1 2 3)")
; Evaluation aborted on #<UNDEFINED-FUNCTION NIL {1007BEF0A3}>.
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")
; Evaluation aborted on #<UNDEFINED-FUNCTION NIL {1007DBEC63}>.
APRIL> (april (set (:compile-only)) "⊃(1)")
; Evaluation aborted on #<UNDEFINED-FUNCTION NIL {1007F58CF3}>.
APRIL> (april (set (:compile-only)) "(1+1)")
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 02:18:50 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.371
; Evaluation aborted on #<UNDEFINED-FUNCTION NIL {1008122103}>.
APRIL> (april (set (:compile-only)) "(1+1)")

(:CON "1+1") 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 02:19:09 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.323
; Evaluation aborted on #<UNDEFINED-FUNCTION NIL {10070E1F73}>.
APRIL> (april (set (:compile-only)) "(1+1)")

(:STR "1") 
(:NEX 1 "" NIL) 
(:NEX (:FN #\+) "" NIL) 
(:STR "1") 
(:NEX 1 "" NIL) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 02:19:44 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.210
; Evaluation aborted on #<UNDEFINED-FUNCTION NIL {10067A8523}>.
APRIL> (april (set (:compile-only)) "(1+1)")

(:STR "1") 
(:NEX 1 "" NIL) 
(:NEX (:FN #\+) "" NIL) 
(:STR "1") 
(:NEX 1 "" NIL) 
(:OO ((1 (:FN #\+) 1)) NIL) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:RES NIL) 
(:NEX NIL "" NIL) 
(:OO ((NIL)) NIL) 
(:EXX (NIL) (PROGN) NIL) 
(:RES NIL) 
(PROGN
 (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))
 (DISCLOSE (PROGN)))
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:NEX (:FN #\SUPERSET_OF) "" NIL) 
(:STR "1") 
(:NEX 1 "" NIL) 
(:OO ((1)) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:RES NIL) 
(:NEX NIL "" NIL) 
(:STR "1") 
(:NEX 1 "" NIL) 
(:STR "2") 
(:NEX 2 "" NIL) 
(:OO ((2 1)) NIL) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:RES NIL) 
(:NEX NIL "" NIL) 
(:STR "1") 
(:NEX 1 "" NIL) 
(:STR "2") 
(:NEX 2 "" NIL) 
(:STR "3") 
(:NEX 3 "" NIL) 
(:OO ((3 2 1)) NIL) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:RES NIL) 
(:NEX NIL "" NIL) 
(:OO ((NIL NIL NIL (:FN #\SUPERSET_OF))) NIL) 
(:EXX (NIL NIL NIL (:FN #\SUPERSET_OF)) (VECTOR (PROGN) (PROGN) (PROGN))
 ((:FN #\SUPERSET_OF))) 
(:RES NIL) 
(PROGN
 (VECTOR 1)
 (VECTOR 1 2)
 (VECTOR 1 2 3)
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (PROGN) (PROGN) (PROGN)) (LIST)))))
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:NEX (:FN #\SUPERSET_OF) "" NIL) 
(:STR "1") 
(:NEX 1 "" NIL) 
(:OO ((1)) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:RES NIL) 
(:NEX NIL "" NIL) 
(:STR "1") 
(:NEX 1 "" NIL) 
(:STR "2") 
(:NEX 2 "" NIL) 
(:OO ((2 1)) NIL) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:RES NIL) 
(:NEX NIL "" NIL) 
(:STR "1") 
(:NEX 1 "" NIL) 
(:STR "2") 
(:NEX 2 "" NIL) 
(:STR "3") 
(:NEX 3 "" NIL) 
(:OO ((3 2 1)) NIL) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:RES NIL) 
(:NEX NIL "" NIL) 
(:OO ((NIL NIL NIL (:FN #\SUPERSET_OF))) NIL) 
(:EXX (NIL NIL NIL (:FN #\SUPERSET_OF)) (VECTOR (PROGN) (PROGN) (PROGN))
 ((:FN #\SUPERSET_OF))) 
(:RES NIL) 
(PROGN
 (VECTOR 1)
 (VECTOR 1 2)
 (VECTOR 1 2 3)
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (PROGN) (PROGN) (PROGN)) (LIST)))))
APRIL> #\superset-of
; Evaluation aborted on #<SB-INT:SIMPLE-READER-ERROR "unrecognized character name: ~S" {1008FECB33}>.
APRIL> #\SUPERSET_OF
#\SUPERSET_OF
APRIL> #\⊃
#\SUPERSET_OF
APRIL> (value 2 3)
; in: VALUE 2
;     (APRIL::VALUE 2 3)
; 
; caught STYLE-WARNING:
;   undefined function: VALUE
; 
; compilation unit finished
;   Undefined function:
;     VALUE
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNDEFINED-FUNCTION VALUE {10093E6C33}>.
APRIL> (values 2 3)
2
3
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 03:26:55 AM):

; file: /Users/owner/Documents/src/april/vex/vex.lisp
; in: DEFUN VEX-PROGRAM
;     (MULTIPLE-VALUE-BIND (VEX::OUTPUT VEX::LINES)
;         (MAXPC:PARSE
;          (FUNCALL (VEX::OF-UTILITIES VEX::IDIOM :PREP-CODE-STRING) STRING)
;          (VEX::=VEX-LINES VEX::IDIOM VEX::META))
;       VEX::OUTPUT)
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (VEX::OUTPUT) (VEX::LINES) &REST #:G47)
;       (DECLARE (IGNORE #:G47))
;       VEX::OUTPUT)
; 
; caught STYLE-WARNING:
;   The variable LINES is defined but never used.

; file: /Users/owner/Documents/src/april/vex/vex.lisp
; in: DEFUN =VEX-LINES
;     (VEX::?BLANK-CHARACTER)
; 
; caught STYLE-WARNING:
;   undefined function: ?BLANK-CHARACTER

;     (VEX::?BUT-NEWLINE-CHARACTER)
; 
; caught STYLE-WARNING:
;   undefined function: ?BUT-NEWLINE-CHARACTER

;     (VEX::?NEWLINE-CHARACTER)
; 
; caught STYLE-WARNING:
;   undefined function: ?NEWLINE-CHARACTER
; 
; compilation unit finished
;   Undefined functions:
;     ?BLANK-CHARACTER ?BUT-NEWLINE-CHARACTER ?NEWLINE-CHARACTER
;   caught 4 STYLE-WARNING conditions


; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.301
APRIL> (april (set (:compile-only)) "1+1")
; in: DEFUN =VEX-LINES
;     (VEX::?BUT-NEWLINE-CHARACTER)
; 
; caught STYLE-WARNING:
;   undefined function: ?BUT-NEWLINE-CHARACTER
; 
; compilation unit finished
;   Undefined function:
;     ?BUT-NEWLINE-CHARACTER
;   caught 1 STYLE-WARNING condition
WARNING: redefining VEX::=VEX-LINES in DEFUN
; Evaluation aborted on #<UNDEFINED-FUNCTION ?BLANK-CHARACTER {1007DDF9A3}>.
APRIL> (april (set (:compile-only)) "1+1")
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:04:32 AM):

; file: /Users/owner/Documents/src/april/vex/vex.lisp
; in: DEFUN VEX-PROGRAM
;     (MULTIPLE-VALUE-BIND (VEX::OUTPUT VEX::LINES)
;         (MAXPC:PARSE
;          (FUNCALL (VEX::OF-UTILITIES VEX::IDIOM :PREP-CODE-STRING) STRING)
;          (VEX::=VEX-LINES VEX::IDIOM VEX::META))
;       VEX::OUTPUT)
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (VEX::OUTPUT) (VEX::LINES) &REST #:G47)
;       (DECLARE (IGNORE #:G47))
;       VEX::OUTPUT)
; 
; caught STYLE-WARNING:
;   The variable LINES is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition


; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.321
WARNING: redefining VEX::=VEX-LINES in DEFUN
; Evaluation aborted on #<UNDEFINED-FUNCTION ?BUT-NEWLINE-CHARACTER {1008F47123}>.
APRIL> (april (set (:compile-only)) "1+1")

(:STR "1") 
(:STR "1") 
(PROGN (DISCLOSE (1 (:FN #\+) 1)))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:06:58 AM):

; file: /Users/owner/Documents/src/april/vex/vex.lisp
; in: DEFUN VEX-PROGRAM
;     (MULTIPLE-VALUE-BIND (VEX::OUTPUT VEX::LINES)
;         (MAXPC:PARSE
;          (FUNCALL (VEX::OF-UTILITIES VEX::IDIOM :PREP-CODE-STRING) STRING)
;          (VEX::=VEX-LINES VEX::IDIOM VEX::META))
;       (VEX::VEX-EXPRESSION VEX::IDIOM VEX::META VEX::OUTPUT))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (VEX::OUTPUT) (VEX::LINES) &REST #:G47)
;       (DECLARE (IGNORE #:G47))
;       (VEX::VEX-EXPRESSION VEX::IDIOM VEX::META VEX::OUTPUT))
; 
; caught STYLE-WARNING:
;   The variable LINES is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition


; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.230
APRIL> (april (set (:compile-only)) "1+1")

(:STR "1") 
(:STR "1") 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:07:26 AM):

; file: /Users/owner/Documents/src/april/vex/vex.lisp
; in: DEFUN VEX-PROGRAM
;     (MULTIPLE-VALUE-BIND (VEX::OUTPUT VEX::LINES)
;         (MAXPC:PARSE
;          (FUNCALL (VEX::OF-UTILITIES VEX::IDIOM :PREP-CODE-STRING) STRING)
;          (VEX::=VEX-LINES VEX::IDIOM VEX::META))
;       (VEX::VEX-EXPRESSION VEX::IDIOM VEX::META (LIST VEX::OUTPUT)))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (VEX::OUTPUT) (VEX::LINES) &REST #:G47)
;       (DECLARE (IGNORE #:G47))
;       (VEX::VEX-EXPRESSION VEX::IDIOM VEX::META (LIST VEX::OUTPUT)))
; 
; caught STYLE-WARNING:
;   The variable LINES is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition


; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.963
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 1>.
APRIL> (april (set (:compile-only)) "1+1")

(:STR "1") 
(:STR "1") 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
(PROGN
 PROGN
 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:07:58 AM):

; file: /Users/owner/Documents/src/april/vex/vex.lisp
; in: DEFUN VEX-PROGRAM
;     (MULTIPLE-VALUE-BIND (VEX::OUTPUT VEX::LINES)
;         (MAXPC:PARSE
;          (FUNCALL (VEX::OF-UTILITIES VEX::IDIOM :PREP-CODE-STRING) STRING)
;          (VEX::=VEX-LINES VEX::IDIOM VEX::META))
;       (VEX::VEX-EXPRESSION VEX::IDIOM VEX::META (LIST VEX::OUTPUT)))
; --> MULTIPLE-VALUE-CALL 
; ==>
;   #'(LAMBDA (&OPTIONAL (VEX::OUTPUT) (VEX::LINES) &REST #:G47)
;       (DECLARE (IGNORE #:G47))
;       (VEX::VEX-EXPRESSION VEX::IDIOM VEX::META (LIST VEX::OUTPUT)))
; 
; caught STYLE-WARNING:
;   The variable LINES is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition


; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.210
APRIL> (april (set (:compile-only)) "1+1")

(:STR "1") 
(:STR "1") 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
(PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
APRIL> (april (set (:compile-onl)) "1+1")

(:STR "1") 
(:STR "1") 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
2
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:15:46 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.363
APRIL> (april (set (:compile-onl)) "1+1")

(:STR "1") 
(:STR "1") 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:16:10 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.225
; Evaluation aborted on #<TYPE-ERROR expected-type: SEQUENCE datum: T>.
APRIL> (april (set (:compile-onl)) "1+1")

(:STR "1") 
(:STR "1") 
(:RR T) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:16:49 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.222
; Evaluation aborted on #<TYPE-ERROR expected-type: SEQUENCE datum: T>.
APRIL> (april (set (:compile-onl)) "1+1")

(:NXT "") 
(:STR "1") 
(:STR "1") 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:17:17 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.196
; Evaluation aborted on #<TYPE-ERROR expected-type: SEQUENCE datum: T>.
APRIL> (april (set (:compile-onl)) "1+1")

(:LIN "1+1") 
(:NXT "") 
(:STR "1") 
(:STR "1") 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
(:LIN T) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:18:05 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.215
; Evaluation aborted on #<TYPE-ERROR expected-type: SEQUENCE datum: T>.
APRIL> (april (set (:compile-onl)) "1+1")

(:LIN "1+1") 
(:NXT "") 
(:STR "1") 
(:STR "1") 
(:LL ((1 (:FN #\+) 1)) T) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
(:LIN T) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:19:30 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.199
; Evaluation aborted on #<TYPE-ERROR expected-type: SEQUENCE datum: T>.
APRIL> (april (set (:compile-onl)) "1+1")

(:LIN "1+1" NIL) 
(:NXT "") 
(:STR "1") 
(:STR "1") 
(:LL ((1 (:FN #\+) 1)) T) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
(:LIN T ((PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:21:08 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.185
; Evaluation aborted on #<TYPE-ERROR expected-type: SEQUENCE datum: T>.
APRIL> (april (set (:compile-onl)) "1+1")

(:LIN "1+1" NIL) 
(:STR "1") 
(:STR "1") 
(:NXT "" ((1 (:FN #\+) 1))) 
(:STR "1") 
(:STR "1") 
(:LL ((1 (:FN #\+) 1)) T) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
(:LIN T ((PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:22:33 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.304
; Evaluation aborted on #<TYPE-ERROR expected-type: SEQUENCE datum: T>.
APRIL> (april (set (:compile-onl)) "1+1")

(:LIN "1+1" NIL) 
(:STR "1") 
(:STR "1") 
(:NXT "" ((1 (:FN #\+) 1))) 
(:STR "1") 
(:STR "1") 
"" 
(:LL ((1 (:FN #\+) 1)) T) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
(:LIN T ((PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:23:12 AM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.251
; Evaluation aborted on #<TYPE-ERROR expected-type: SEQUENCE datum: T>.
APRIL> (april (set (:compile-onl)) "1+1")

(:LIN "1+1" NIL) 
(:STR "1") 
(:STR "1") 
(:NXT "" ((1 (:FN #\+) 1))) 
(:STR "1") 
(:STR "1") 
"" 
(:LL ((1 (:FN #\+) 1)) T) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
(:LIN T ((PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))) ; Evaluation aborted on #<TYPE-ERROR expected-type: SEQUENCE datum: T>.
APRIL> (values 5 4)

5
4
APRIL> (parse "1+1" (=vex-linex *april-idiom* (make-hash-table)))
; in: PARSE "1+1"
;     (APRIL::=VEX-LINEX APRIL::*APRIL-IDIOM* (MAKE-HASH-TABLE))
; 
; caught STYLE-WARNING:
;   undefined function: =VEX-LINEX

;     (APRIL::PARSE "1+1"
;      (APRIL::=VEX-LINEX APRIL::*APRIL-IDIOM* (MAKE-HASH-TABLE)))
; 
; caught STYLE-WARNING:
;   undefined function: PARSE
; 
; compilation unit finished
;   Undefined functions:
;     =VEX-LINEX PARSE
;   caught 2 STYLE-WARNING conditions
; Evaluation aborted on #<UNDEFINED-FUNCTION =VEX-LINEX {1004B3B093}>.
APRIL> (parse "1+1" (=vex-lines *april-idiom* (make-hash-table)))
; in: PARSE "1+1"
;     (APRIL::=VEX-LINES APRIL::*APRIL-IDIOM* (MAKE-HASH-TABLE))
; 
; caught STYLE-WARNING:
;   undefined function: =VEX-LINES
; 
; compilation unit finished
;   Undefined function:
;     =VEX-LINES
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNDEFINED-FUNCTION =VEX-LINES {1004D0FFB3}>.
APRIL> (vex::parse "1+1" (vex::=vex-lines *april-idiom* (make-hash-table)))

(:STR "1") 
(:STR "1") 
(:NXT "" ((1 (:FN #\+) 1))) 
(:STR "1") 
(:STR "1") 
"" 
((1 (:FN #\+) 1))
T
T
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 12:09:57 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.958
APRIL> (vex::parse "1+1" (vex::=vex-lines *april-idiom* (make-hash-table)))

(:STR "1") 
(:STR "1") 
(:NXT "" ((1 (:FN #\+) 1))) 
(:STR "1") 
(:STR "1") 
"" 
(((1 (:FN #\+) 1)) "")
T
T
APRIL> (april (set (:compile-only)) "1+1")

(:LIN "1+1" NIL) 
(:STR "1") 
(:STR "1") 
(:NXT "" ((1 (:FN #\+) 1))) 
(:STR "1") 
(:STR "1") 
"" 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
(:LIN "" ((PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))) 
((DISCLOSE (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1)))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 12:10:49 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.208
APRIL> (april (set (:compile-only)) "1+1")

(:LIN "1+1" NIL) 
(:STR "1") 
(:STR "1") 
(:NXT "" ((1 (:FN #\+) 1))) 
(:STR "1") 
(:STR "1") 
"" 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
(:LIN "" ((PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))) 
(PROGN
 (DISCLOSE (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1)))))
APRIL> (april (set (:compile-onl)) "1+1")

(:LIN "1+1" NIL) 
(:STR "1") 
(:STR "1") 
(:NXT "" ((1 (:FN #\+) 1))) 
(:STR "1") 
(:STR "1") 
"" 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
(:LIN "" ((PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))) 
2
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:LIN "⊃(1)(1 2)(1 2 3)" NIL) 
(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
"" 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
 ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (PROGN
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
       (LIST))))
 NIL) 
(:LIN ""
 ((PROGN
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
        (LIST)))))) 
(PROGN
 (DISCLOSE
  (PROGN
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
        (LIST))))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 01:01:29 PM):

; file: /Users/owner/Documents/src/april/vex/vex.lisp
; in: DEFUN =VEX-STRING
;     (LABELS ((VEX::?BLANK-CHARACTER ()
;                (MAXPC:?SATISFIES
;                 (VEX::OF-UTILITIES VEX::IDIOM :MATCH-BLANK-CHARACTER)))
;              (VEX::?TOKEN-CHARACTER ()
;                (MAXPC:?SATISFIES
;                 (VEX::OF-UTILITIES VEX::IDIOM :MATCH-TOKEN-CHARACTER)))
;              (VEX::?NEWLINE-CHARACTER ()
;                (MAXPC:?SATISFIES
;                 (VEX::OF-UTILITIES VEX::IDIOM :MATCH-NEWLINE-CHARACTER)))
;              (VEX::?BUT-NEWLINE-CHARACTER ()
;                (MAXPC:?SATISFIES (LAMBDA # #)))
;              (VEX::=STRING (&REST VEX::DELIMITERS)
;                (LET (# #)
;                  (MAXPC:=DESTRUCTURE #
;                      #
;                    VEX::CONTENT)))
;              (VEX::=VEX-CLOSURE (VEX::BOUNDARY-CHARS &OPTIONAL VEX::TRANSFORM-BY)
;                (LET (# #)
;                  (MAXPC:=DESTRUCTURE #
;                      #
;                    VEX::ENCLOSED)))
;              (VEX::HANDLE-AXES (VEX::INPUT-STRING)
;                (LET (#)
;                  (CONS :AXES #)))
;              (VEX::HANDLE-FUNCTION (VEX::INPUT-STRING)
;                (LIST :FN (FUNCALL # # #))))
;       (MAXPC:=DESTRUCTURE (VEX::_ VEX::ITEM VEX::_ REST)
;           (MAXPC:=LIST (MAXPC:%ANY (VEX::?BLANK-CHARACTER))
;                        (MAXPC:%OR (VEX::=VEX-CLOSURE "()")
;                                   (VEX::=VEX-CLOSURE "[]" #'VEX::HANDLE-AXES)
;                                   (VEX::=VEX-CLOSURE "{}" #'VEX::HANDLE-FUNCTION)
;                                   (VEX::=STRING #\' #\") (MAXPC:=TRANSFORM # #)
;                                   (MAXPC:=TRANSFORM # #))
;                        (MAXPC:%ANY (VEX::?BLANK-CHARACTER))
;                        (MAXPC:=SUBSEQ (MAXPC:%ANY #)))
;         (IF (< 0 (LENGTH REST))
;             (MAXPC:PARSE REST (VEX::=VEX-STRING VEX::IDIOM VEX::META #))
;             (CONS (CONS VEX::ITEM #) (REST VEX::OUTPUT)))))
; 
; note: deleting unused function
;   (LABELS ?BUT-NEWLINE-CHARACTER :IN =VEX-STRING)
; 
; note: deleting unused function
;   (LABELS ?NEWLINE-CHARACTER :IN =VEX-STRING)

; file: /Users/owner/Documents/src/april/vex/vex.lisp
; in: DEFUN =VEX-STRING
;     (LENGTH VEX::NEXTLINES)
; 
; caught WARNING:
;   undefined variable: NEXTLINES
; 
; compilation unit finished
;   Undefined variable:
;     NEXTLINES
;   caught 1 WARNING condition
;   printed 2 notes


; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.319
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 01:02:36 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.293
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
"" 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
 ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (PROGN
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
       (LIST))))
 NIL) 
((DISCLOSE
  (PROGN
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
        (LIST))))))
APRIL> (april (set (:compile-onl)) "1+1")

(:STR "1") 
(:STR "1") 
(:NXT "" ((1 (:FN #\+) 1))) 
(:STR "1") 
(:STR "1") 
"" 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) ; in:
                                                                        ;      (DISCLOSE (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))))
;     ((APRIL::DISCLOSE
;       (PROGN (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1)))))
; 
; caught ERROR:
;   illegal function call
; 
; compilation unit finished
;   caught 1 ERROR condition
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 01:03:06 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.198
; Evaluation aborted on #<SB-INT:COMPILED-PROGRAM-ERROR {1004DB4A33}>.
APRIL> (april (set (:compile-onl)) "1+1")

(:STR "1") 
(:STR "1") 
(:NXT "" ((1 (:FN #\+) 1))) 
(:STR "1") 
(:STR "1") 
"" 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (PROGN (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1))) NIL) 
2
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
"" 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
 ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (PROGN
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
       (LIST))))
 NIL) 
(PROGN
 (DISCLOSE
  (PROGN
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
        (LIST))))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 01:03:32 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.172
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
"" 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
 ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (PROGN
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
       (LIST))))
 NIL) 
((DISCLOSE
  (PROGN
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
        (LIST))))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 01:03:37 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.237
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 01:03:37 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.227
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 01:04:28 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.192
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
"" 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
 ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (PROGN
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
       (LIST))))
 NIL) 
(PROGN
 (DISCLOSE
  (PROGN
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
        (LIST))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 01:04:52 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.613
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
"" 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR ((VECTOR 1)) ((VECTOR 1 2)) ((VECTOR 1 2 3))) ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 ((IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR ((VECTOR 1)) ((VECTOR 1 2)) ((VECTOR 1 2 3))) (LIST))))
 NIL) 
(PROGN
 (DISCLOSE
  ((IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR ((VECTOR 1)) ((VECTOR 1 2)) ((VECTOR 1 2 3))) (LIST))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 01:05:29 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.387
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
"" 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
 ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (PROGN
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
       (LIST))))
 NIL) 
(PROGN
 (DISCLOSE
  (PROGN
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
        )))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 01:07:17 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.301
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
(:STR "1") 
(:STR "1") 
(:STR "2") 
(:STR "1") 
(:STR "2") 
(:STR "3") 
"" 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
 ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (PROGN
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
       (LIST))))
 NIL) 
(PROGN
 (DISCLOSE
  (PROGN
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
        (LIST))))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 01:07:51 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.270
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
"" 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
 ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (PROGN
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
       (LIST))))
 NIL) 
(PROGN
 (DISCLOSE
  (PROGN
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
        (LIST))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:21:38 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.430
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
"" 
(:CLOS (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))) 
(:CLOS (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:CLOS (((2 1)) ((1)) (:FN #\SUPERSET_OF))) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:CLOS (((1)) (:FN #\SUPERSET_OF))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
 ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (PROGN
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
       (LIST))))
 NIL) 
(PROGN
 (DISCLOSE
  (PROGN
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR (PROGN (VECTOR 1)) (PROGN (VECTOR 1 2)) (PROGN (VECTOR 1 2 3)))
        (LIST))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:22:15 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.327
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
"" 
(:CLOS (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))) 
(:CLOS (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:CLOS (((2 1)) ((1)) (:FN #\SUPERSET_OF))) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:CLOS (((1)) (:FN #\SUPERSET_OF))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR ((VECTOR 1)) ((VECTOR 1 2)) ((VECTOR 1 2 3))) ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 ((IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR ((VECTOR 1)) ((VECTOR 1 2)) ((VECTOR 1 2 3))) (LIST))))
 NIL) 
(PROGN
 (DISCLOSE
  ((IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA &OPTIONAL AXES)
            (MIX-ARRAYS
             (IF AXES
                 (CEILING
                  (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                 0)
             OMEGA))
        (VECTOR ((VECTOR 1)) ((VECTOR 1 2)) ((VECTOR 1 2 3))) (LIST))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:22:51 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.365
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
"" 
(:CLOS (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))) 
(:CLOS (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:23:14 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.454
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 3>.
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
"" 
(:CLOS (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))) 
(:CLOS (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:CLOS (((2 1)) ((1)) (:FN #\SUPERSET_OF))) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:CLOS (((1)) (:FN #\SUPERSET_OF))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (MIX-ARRAYS
           (IF AXES
               (CEILING
                (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
               0)
           OMEGA))
      (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST)))
 NIL) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST)))))
APRIL> (april (set (:compile-onl)) "⊃(1)(1 2)(1 2 3)")

(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
"" 
(:CLOS (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))) 
(:CLOS (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:CLOS (((2 1)) ((1)) (:FN #\SUPERSET_OF))) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:CLOS (((1)) (:FN #\SUPERSET_OF))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (MIX-ARRAYS
           (IF AXES
               (CEILING
                (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
               0)
           OMEGA))
      (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST)))
 NIL) 
#2A((1 0 0) (1 2 0) (1 2 3))
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ g 1 9")

(:NXT "" ((⍵ (:FN #\+) 3))) 
"" 
(:CLOS (((⍵ (:FN #\+) 3)))) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXX (((⍵ (:FN #\+) 3))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) NIL) 
(:NXT " g 1 9"
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1007FB634B}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4712))) 
(:NXT "" ((⍵ (:FN #\+) 3))) 
"" 
(:CLOS (((⍵ (:FN #\+) 3)))) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXX (((⍵ (:FN #\+) 3))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) NIL) 
" g 1 9" 
(:CLOS
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1007FD130B}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4712)))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007FD130B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4712)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G4712 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G4712)) 
(:EXX
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1007FD130B}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4712)))
 (SETQ #:G4712
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (LET* ((#:G4712 NIL))
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
 NIL) 
(:NXT "" ((9 1 #:G4712))) 
"" 
(:CLOS (((9 1 #:G4712)))) 
(:EXX (9 1 #:G4712) (VECTOR 1 9) (#:G4712)) 
(:EXX (((9 1 #:G4712))) (FUNCALL #:G4712 (VECTOR 1 9)) NIL) 
(LET* ((#:G4712 :UNDEFINED))
  (SETQ #:G4712
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G4712 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE (FUNCALL #:G4712 (VECTOR 1 9))))
APRIL> (april (set (:compile-onl)) "g←{3+⍵} ◊ g 1 9")

(:NXT "" ((⍵ (:FN #\+) 3))) 
"" 
(:CLOS (((⍵ (:FN #\+) 3)))) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXX (((⍵ (:FN #\+) 3))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) NIL) 
(:NXT " g 1 9"
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100801253B}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4713))) 
(:NXT "" ((⍵ (:FN #\+) 3))) 
"" 
(:CLOS (((⍵ (:FN #\+) 3)))) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXX (((⍵ (:FN #\+) 3))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) NIL) 
" g 1 9" 
(:CLOS
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {100802548B}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4713)))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100802548B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4713)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G4713 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G4713)) 
(:EXX
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {100802548B}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4713)))
 (SETQ #:G4713
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (LET* ((#:G4713 NIL))
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
 NIL) 
(:NXT "" ((9 1 #:G4713))) 
"" 
(:CLOS (((9 1 #:G4713)))) 
(:EXX (9 1 #:G4713) (VECTOR 1 9) (#:G4713)) 
(:EXX (((9 1 #:G4713))) (FUNCALL #:G4713 (VECTOR 1 9)) NIL) ; in: LET* ((#:G4713 :UNDEFINED))
;     (LET* ((#:G4713 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 3))))
; 
; caught STYLE-WARNING:
;   The variable #:G4713 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
#(4 12)
APRIL> (april (set (:compile-only)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:NXT "" ((⍵ (:FN #\+) 3))) 
"" 
(:CLOS (((⍵ (:FN #\+) 3)))) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXX (((⍵ (:FN #\+) 3))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) NIL) 
(:NXT " {g 2 ⍵} 9"
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10080B6B4B}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4714))) 
(:NXT "" ((⍵ (:FN #\+) 3))) 
"" 
(:CLOS (((⍵ (:FN #\+) 3)))) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXX (((⍵ (:FN #\+) 3))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) NIL) 
" {g 2 ⍵} 9" 
(:CLOS
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {10080C99CB}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4714)))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10080C99CB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4714)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G4714 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G4714)) 
(:EXX
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {10080C99CB}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4714)))
 (SETQ #:G4714
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (LET* ((#:G4714 NIL))
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
 NIL) 
(:NXT "" ((⍵ 2 #:G4714))) 
"" 
(:CLOS (((⍵ 2 #:G4714)))) 
(:EXX (⍵ 2 #:G4714) (VECTOR 2 ⍵) (#:G4714)) 
(:EXX (((⍵ 2 #:G4714))) (FUNCALL #:G4714 (VECTOR 2 ⍵)) NIL) 
(:NXT ""
 ((9
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100811398B}>)))) 
(:NXT "" ((⍵ 2 #:G4714))) 
"" 
(:CLOS (((⍵ 2 #:G4714)))) 
(:EXX (⍵ 2 #:G4714) (VECTOR 2 ⍵) (#:G4714)) 
(:EXX (((⍵ 2 #:G4714))) (FUNCALL #:G4714 (VECTOR 2 ⍵)) NIL) 
"" 
(:CLOS
 (((9
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008123E7B}>))))) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008123E7B}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008123E7B}>))) 
(:EXX
 (((9
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008123E7B}>))))
 (FUNCALL
  (LAMBDA (⍵ &OPTIONAL ⍺)
    (DECLARE (IGNORABLE ⍺))
    (LET* ((#:G4714
            (LAMBDA (OMEGA &OPTIONAL ALPHA)
              (FUNCALL
               (LAMBDA (⍵ &OPTIONAL ⍺)
                 (DECLARE (IGNORABLE ⍺))
                 (LET* ((#:G4714 NIL))
                   (DISCLOSE
                    (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
               (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
      (DISCLOSE (FUNCALL #:G4714 (VECTOR 2 ⍵)))))
  (ENCLOSE (VECTOR 9)))
 NIL) 
(LET* ((#:G4714 :UNDEFINED))
  (SETQ #:G4714
          (LAMBDA (OMEGA &OPTIONAL ALPHA)
            (FUNCALL
             (LAMBDA (⍵ &OPTIONAL ⍺)
               (DECLARE (IGNORABLE ⍺))
               (LET* ((#:G4714 NIL))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
             (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
  (DISCLOSE
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G4714
              (LAMBDA (OMEGA &OPTIONAL ALPHA)
                (FUNCALL
                 (LAMBDA (⍵ &OPTIONAL ⍺)
                   (DECLARE (IGNORABLE ⍺))
                   (LET* ((#:G4714 NIL))
                     (DISCLOSE
                      (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
                 (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
        (DISCLOSE (FUNCALL #:G4714 (VECTOR 2 ⍵)))))
    (ENCLOSE (VECTOR 9)))))
APRIL> (april (set (:compile-onl)) "g←{3+⍵} ◊ {g 2 ⍵} 9")

(:NXT "" ((⍵ (:FN #\+) 3))) 
"" 
(:CLOS (((⍵ (:FN #\+) 3)))) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXX (((⍵ (:FN #\+) 3))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) NIL) 
(:NXT " {g 2 ⍵} 9"
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {100817720B}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4715))) 
(:NXT "" ((⍵ (:FN #\+) 3))) 
"" 
(:CLOS (((⍵ (:FN #\+) 3)))) 
(:EXX (⍵ (:FN #\+) 3) ⍵ ((:FN #\+) 3)) 
(:EXX (((⍵ (:FN #\+) 3))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)) NIL) 
" {g 2 ⍵} 9" 
(:CLOS
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {100818A08B}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4715)))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100818A08B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4715)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G4715 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G4715)) 
(:EXX
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {100818A08B}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4715)))
 (SETQ #:G4715
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (LET* ((#:G4715 NIL))
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
 NIL) 
(:NXT "" ((⍵ 2 #:G4715))) 
"" 
(:CLOS (((⍵ 2 #:G4715)))) 
(:EXX (⍵ 2 #:G4715) (VECTOR 2 ⍵) (#:G4715)) 
(:EXX (((⍵ 2 #:G4715))) (FUNCALL #:G4715 (VECTOR 2 ⍵)) NIL) 
(:NXT ""
 ((9
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {10081A3E7B}>)))) 
(:NXT "" ((⍵ 2 #:G4715))) 
"" 
(:CLOS (((⍵ 2 #:G4715)))) 
(:EXX (⍵ 2 #:G4715) (VECTOR 2 ⍵) (#:G4715)) 
(:EXX (((⍵ 2 #:G4715))) (FUNCALL #:G4715 (VECTOR 2 ⍵)) NIL) 
"" 
(:CLOS
 (((9
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {10081B434B}>))))) 
(:EXX
 (9
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10081B434B}>))
 (VECTOR 9)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10081B434B}>))) 
(:EXX
 (((9
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {10081B434B}>))))
 (FUNCALL
  (LAMBDA (⍵ &OPTIONAL ⍺)
    (DECLARE (IGNORABLE ⍺))
    (LET* ((#:G4715
            (LAMBDA (OMEGA &OPTIONAL ALPHA)
              (FUNCALL
               (LAMBDA (⍵ &OPTIONAL ⍺)
                 (DECLARE (IGNORABLE ⍺))
                 (LET* ((#:G4715 NIL))
                   (DISCLOSE
                    (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 3)))))
               (ENCLOSE OMEGA) (ENCLOSE ALPHA)))))
      (DISCLOSE (FUNCALL #:G4715 (VECTOR 2 ⍵)))))
  (ENCLOSE (VECTOR 9)))
 NIL) ; in: LET* ((#:G4715 :UNDEFINED))
;     (LET* ((#:G4715 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 3))))
; 
; caught STYLE-WARNING:
;   The variable #:G4715 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G4715 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
#(5 #(12))
APRIL> (april (test))
1..226

[←] Assign
(:NXT " x" ((55 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4721))) 
" x" 
(:CLOS (((55 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4721)))) 
(:EXX (55 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4721) (VECTOR 55)
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G4721)) 
(:EXX (((55 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4721)))
 (SETQ #:G4721 (VECTOR 55)) NIL) 
(:NXT "" ((#:G4721))) 
"" 
(:CLOS (((#:G4721)))) 
(:EXX (#:G4721) #:G4721 NIL) 
(:EXX (((#:G4721))) #:G4721 NIL) 
  [32m✓ [90m55 is expected to be 55[0m 
[0m
(:NXT " x[;1;]←7 ◊ x"
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4727))) 
" x[;1;]←7 ◊ x" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4727)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4727)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4727)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G4727)))
 (SETQ #:G4727
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 9))
                       (DISCLOSE (VECTOR 9))
                       (VECTOR 9))))
              (VECTOR 2 3 4))))
 NIL) 
(:NXT " x" ((7 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES NIL (1)) #:G4727))) 
" x" 
(:CLOS (((7 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES NIL (1)) #:G4727)))) 
(:EXX (7 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES NIL (1)) #:G4727) (VECTOR 7)
 ((:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES NIL (1)) #:G4727)) 
(:CLOS ((NIL (1)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX ((NIL (1))) NIL NIL) 
(:EXX (((7 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES NIL (1)) #:G4727)))
 (AREF-ELIDING (DISCLOSE #:G4727)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST))
               :SET (VECTOR 7))
 NIL) 
(:NXT "" ((#:G4727))) 
"" 
(:CLOS (((#:G4727)))) 
(:EXX (#:G4727) #:G4727 NIL) 
(:EXX (((#:G4727))) #:G4727 NIL) 
  [31m× #3A(((7 7 7 7) (7 7 7 7) (7 7 7 7)) ((7 7 7 7) (7 7 7 7) (7 7 7 7))) is expected to be #3A(((7 7 7 7) (5 6 7 8) (9 1 2 3)) ((7 7 7 7) (8 9 1 2) (3 4 5 6))) 
[0m

[⊣] Empty / Left
(:NXT "" ((77 (:FN #\LEFT_TACK)))) 
"" 
(:CLOS (((77 (:FN #\LEFT_TACK))))) 
(:EXX (77 (:FN #\LEFT_TACK)) (VECTOR 77) ((:FN #\LEFT_TACK))) 
(:EXX (((77 (:FN #\LEFT_TACK))))
 (IF (AND)
     (FUNCALL #'(LAMBDA (OMEGA) (DECLARE (IGNORE OMEGA)) (MAKE-ARRAY (LIST 0)))
              (VECTOR 77)))
 NIL) 
  [32m✓ [90m#() is expected to be #()[0m 
[0m
(:NXT "" ((77 (:FN #\LEFT_TACK) 55))) 
"" 
(:CLOS (((77 (:FN #\LEFT_TACK) 55)))) 
(:EXX (77 (:FN #\LEFT_TACK) 55) (VECTOR 77) ((:FN #\LEFT_TACK) 55)) 
(:EXX (((77 (:FN #\LEFT_TACK) 55)))
 (IF (AND)
     (FUNCALL #'(LAMBDA (OMEGA ALPHA) (DECLARE (IGNORE OMEGA)) ALPHA)
              (VECTOR 77) (VECTOR 55)))
 NIL) 
  [32m✓ [90m55 is expected to be 55[0m 
[0m

[⊢] Identity / Right
(:NXT "" ((77 (:FN #\RIGHT_TACK)))) 
"" 
(:CLOS (((77 (:FN #\RIGHT_TACK))))) 
(:EXX (77 (:FN #\RIGHT_TACK)) (VECTOR 77) ((:FN #\RIGHT_TACK))) 
(:EXX (((77 (:FN #\RIGHT_TACK))))
 (IF (AND)
     (FUNCALL #'(LAMBDA (OMEGA) OMEGA) (VECTOR 77)))
 NIL) 
  [32m✓ [90m77 is expected to be 77[0m 
[0m
(:NXT "" ((77 (:FN #\RIGHT_TACK) 55))) 
"" 
(:CLOS (((77 (:FN #\RIGHT_TACK) 55)))) 
(:EXX (77 (:FN #\RIGHT_TACK) 55) (VECTOR 77) ((:FN #\RIGHT_TACK) 55)) 
(:EXX (((77 (:FN #\RIGHT_TACK) 55)))
 (IF (AND)
     (FUNCALL #'(LAMBDA (OMEGA ALPHA) (DECLARE (IGNORE ALPHA)) OMEGA)
              (VECTOR 77) (VECTOR 55)))
 NIL) 
  [32m✓ [90m77 is expected to be 77[0m 
[0m

[+] Identity or Negate Imaginary / Add
(:NXT "" ((5 (:FN #\+)))) 
"" 
(:CLOS (((5 (:FN #\+))))) 
(:EXX (5 (:FN #\+)) (VECTOR 5) ((:FN #\+))) 
(:EXX (((5 (:FN #\+))))
 (FUNCALL #'APPLY-SCALAR-MONADIC
          #'(LAMBDA (OMEGA)
              (IF (COMPLEXP OMEGA)
                  (COMPLEX (REALPART OMEGA) (- (IMAGPART OMEGA)))
                  OMEGA))
          (VECTOR 5))
 NIL) 
  [32m✓ [90m5 is expected to be 5[0m 
[0m
(:NXT "" ((#C(5 2) (:FN #\+)))) 
"" 
(:CLOS (((#C(5 2) (:FN #\+))))) 
(:EXX (#C(5 2) (:FN #\+)) (VECTOR #C(5 2)) ((:FN #\+))) 
(:EXX (((#C(5 2) (:FN #\+))))
 (FUNCALL #'APPLY-SCALAR-MONADIC
          #'(LAMBDA (OMEGA)
              (IF (COMPLEXP OMEGA)
                  (COMPLEX (REALPART OMEGA) (- (IMAGPART OMEGA)))
                  OMEGA))
          (VECTOR #C(5 2)))
 NIL) 
  [32m✓ [90m#C(5 -2) is expected to be #C(5 -2)[0m 
[0m
(:NXT "" ((1 (:FN #\+) 1))) 
"" 
(:CLOS (((1 (:FN #\+) 1)))) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1)) NIL) 
  [32m✓ [90m2 is expected to be 2[0m 
[0m
(:NXT "" ((3 2 1 (:FN #\+) 1))) 
"" 
(:CLOS (((3 2 1 (:FN #\+) 1)))) 
(:EXX (3 2 1 (:FN #\+) 1) (VECTOR 1 2 3) ((:FN #\+) 1)) 
(:EXX (((3 2 1 (:FN #\+) 1)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1 2 3) (VECTOR 1)) NIL) 
  [32m✓ [90m#(2 3 4) is expected to be #(2 3 4)[0m 
[0m

[-] Negate / Subtract
(:NXT "" ((1 (:FN #\-) 2))) 
"" 
(:CLOS (((1 (:FN #\-) 2)))) 
(:EXX (1 (:FN #\-) 2) (VECTOR 1) ((:FN #\-) 2)) 
(:EXX (((1 (:FN #\-) 2)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
              (FUNCALL #'- VEX::ALPHA VEX::OMEGA))
          (VECTOR 1) (VECTOR 2))
 NIL) 
  [32m✓ [90m1 is expected to be 1[0m 
[0m
(:NXT "" ((4 3 2 (:FN #\-) 7))) 
"" 
(:CLOS (((4 3 2 (:FN #\-) 7)))) 
(:EXX (4 3 2 (:FN #\-) 7) (VECTOR 2 3 4) ((:FN #\-) 7)) 
(:EXX (((4 3 2 (:FN #\-) 7)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
              (FUNCALL #'- VEX::ALPHA VEX::OMEGA))
          (VECTOR 2 3 4) (VECTOR 7))
 NIL) 
  [32m✓ [90m#(5 4 3) is expected to be #(5 4 3)[0m 
[0m

[×] Direction / Multiply
(:NXT "" ((-9 5 -5 0 5 20 (:FN #\MULTIPLICATION_SIGN)))) 
"" 
(:CLOS (((-9 5 -5 0 5 20 (:FN #\MULTIPLICATION_SIGN))))) 
(:EXX (-9 5 -5 0 5 20 (:FN #\MULTIPLICATION_SIGN)) (VECTOR 20 5 0 -5 5 -9)
 ((:FN #\MULTIPLICATION_SIGN))) 
(:EXX (((-9 5 -5 0 5 20 (:FN #\MULTIPLICATION_SIGN))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'SIGNUM (VECTOR 20 5 0 -5 5 -9)) NIL) 
  [32m✓ [90m#(1 1 0 -1 1 -1) is expected to be #(1 1 0 -1 1 -1)[0m 
[0m
(:NXT "" ((3 (:FN #\MULTIPLICATION_SIGN) 2))) 
"" 
(:CLOS (((3 (:FN #\MULTIPLICATION_SIGN) 2)))) 
(:EXX (3 (:FN #\MULTIPLICATION_SIGN) 2) (VECTOR 3)
 ((:FN #\MULTIPLICATION_SIGN) 2)) 
(:EXX (((3 (:FN #\MULTIPLICATION_SIGN) 2)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'* (VECTOR 3) (VECTOR 2)) NIL) 
  [32m✓ [90m6 is expected to be 6[0m 
[0m
(:NXT "" ((9 8 (:FN #\MULTIPLICATION_SIGN) 5 4))) 
"" 
(:CLOS (((9 8 (:FN #\MULTIPLICATION_SIGN) 5 4)))) 
(:EXX (9 8 (:FN #\MULTIPLICATION_SIGN) 5 4) (VECTOR 8 9)
 ((:FN #\MULTIPLICATION_SIGN) 5 4)) 
(:EXX (((9 8 (:FN #\MULTIPLICATION_SIGN) 5 4)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'* (VECTOR 8 9) (VECTOR 4 5)) NIL) 
  [32m✓ [90m#(32 45) is expected to be #(32 45)[0m 
[0m

[÷] Reciprocal / Divide
(:NXT "" ((2 (:FN #\DIVISION_SIGN) 6))) 
"" 
(:CLOS (((2 (:FN #\DIVISION_SIGN) 6)))) 
(:EXX (2 (:FN #\DIVISION_SIGN) 6) (VECTOR 2) ((:FN #\DIVISION_SIGN) 6)) 
(:EXX (((2 (:FN #\DIVISION_SIGN) 6)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
              (FUNCALL #'/ VEX::ALPHA VEX::OMEGA))
          (VECTOR 2) (VECTOR 6))
 NIL) 
  [32m✓ [90m3 is expected to be 3[0m 
[0m
(:NXT "" ((2 3 6 (:FN #\DIVISION_SIGN) 12))) 
"" 
(:CLOS (((2 3 6 (:FN #\DIVISION_SIGN) 12)))) 
(:EXX (2 3 6 (:FN #\DIVISION_SIGN) 12) (VECTOR 6 3 2)
 ((:FN #\DIVISION_SIGN) 12)) 
(:EXX (((2 3 6 (:FN #\DIVISION_SIGN) 12)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
              (FUNCALL #'/ VEX::ALPHA VEX::OMEGA))
          (VECTOR 6 3 2) (VECTOR 12))
 NIL) 
  [32m✓ [90m#(2 4 6) is expected to be #(2 4 6)[0m 
[0m
(:NXT "" ((8 4 2 (:FN #\DIVISION_SIGN)))) 
"" 
(:CLOS (((8 4 2 (:FN #\DIVISION_SIGN))))) 
(:EXX (8 4 2 (:FN #\DIVISION_SIGN)) (VECTOR 2 4 8) ((:FN #\DIVISION_SIGN))) 
(:EXX (((8 4 2 (:FN #\DIVISION_SIGN))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'/ (VECTOR 2 4 8)) NIL) 
  [32m✓ [90m#(1/2 1/4 1/8) is expected to be #(1/2 1/4 1/8)[0m 
[0m

[⋆] Exponential / Power
(:NXT ""
 ((2 (:FN #\STAR_OPERATOR) (:FN #\MULTIPLICATION_SIGN) 1000
   (:FN #\LEFT_FLOOR)))) 
"" 
(:CLOS
 (((2 (:FN #\STAR_OPERATOR) (:FN #\MULTIPLICATION_SIGN) 1000
    (:FN #\LEFT_FLOOR))))) 
(:EXX
 (2 (:FN #\STAR_OPERATOR) (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR))
 (VECTOR 2)
 ((:FN #\STAR_OPERATOR) (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR))) 
(:EXX
 (((2 (:FN #\STAR_OPERATOR) (:FN #\MULTIPLICATION_SIGN) 1000
    (:FN #\LEFT_FLOOR))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR
          (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                   (FUNCALL #'APPLY-SCALAR-MONADIC #'EXP (VECTOR 2))
                   (VECTOR 1000)))
 NIL) 
  [32m✓ [90m7389 is expected to be 7389[0m 
[0m
(:NXT "" ((4 (:FN #\STAR_OPERATOR) 2))) 
"" 
(:CLOS (((4 (:FN #\STAR_OPERATOR) 2)))) 
(:EXX (4 (:FN #\STAR_OPERATOR) 2) (VECTOR 4) ((:FN #\STAR_OPERATOR) 2)) 
(:EXX (((4 (:FN #\STAR_OPERATOR) 2)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
              (FUNCALL #'EXPT VEX::ALPHA VEX::OMEGA))
          (VECTOR 4) (VECTOR 2))
 NIL) 
  [32m✓ [90m16 is expected to be 16[0m 
[0m
(:NXT ""
 ((2 (:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 16 (:FN #\LEFT_FLOOR)))) 
"" 
(:CLOS
 (((2 (:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 16 (:FN #\LEFT_FLOOR))))) 
(:EXX (2 (:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 16 (:FN #\LEFT_FLOOR))
 (VECTOR 2) ((:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 16 (:FN #\LEFT_FLOOR))) 
(:EXX (((2 (:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 16 (:FN #\LEFT_FLOOR))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR
          (FUNCALL #'APPLY-SCALAR-DYADIC
                   #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                       (FUNCALL #'EXPT VEX::ALPHA VEX::OMEGA))
                   (FUNCALL #'APPLY-SCALAR-MONADIC #'/ (VECTOR 2))
                   (VECTOR 16)))
 NIL) 
  [32m✓ [90m4 is expected to be 4[0m 
[0m

[⍟] Natural Logarithm / Logarithm
(:NXT ""
 ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STAR) (:FN #\MULTIPLICATION_SIGN) 1000
   (:FN #\LEFT_FLOOR)))) 
"" 
(:CLOS
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STAR) (:FN #\MULTIPLICATION_SIGN)
    1000 (:FN #\LEFT_FLOOR))))) 
(:EXX
 (5 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STAR) (:FN #\MULTIPLICATION_SIGN) 1000
  (:FN #\LEFT_FLOOR))
 (VECTOR 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STAR) (:FN #\MULTIPLICATION_SIGN) 1000
  (:FN #\LEFT_FLOOR))) 
(:EXX
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STAR) (:FN #\MULTIPLICATION_SIGN)
    1000 (:FN #\LEFT_FLOOR))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR
          (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                   (FUNCALL #'APPLY-SCALAR-MONADIC #'LOG (VECTOR 5))
                   (VECTOR 1000)))
 NIL) 
  [32m✓ [90m1609 is expected to be 1609[0m 
[0m
(:NXT "" ((8 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STAR) 2 (:FN #\LEFT_FLOOR)))) 
"" 
(:CLOS (((8 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STAR) 2 (:FN #\LEFT_FLOOR))))) 
(:EXX (8 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STAR) 2 (:FN #\LEFT_FLOOR))
 (VECTOR 8) ((:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STAR) 2 (:FN #\LEFT_FLOOR))) 
(:EXX (((8 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STAR) 2 (:FN #\LEFT_FLOOR))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR
          (FUNCALL #'APPLY-SCALAR-DYADIC #'LOG (VECTOR 8) (VECTOR 2)))
 NIL) 
  [32m✓ [90m3 is expected to be 3[0m 
[0m

[|] Magnitude / Residue
(:NXT "" ((55 (:FN #\|)))) 
"" 
(:CLOS (((55 (:FN #\|))))) 
(:EXX (55 (:FN #\|)) (VECTOR 55) ((:FN #\|))) 
(:EXX (((55 (:FN #\|)))) (FUNCALL #'APPLY-SCALAR-MONADIC #'ABS (VECTOR 55)) NIL) 
  [32m✓ [90m55 is expected to be 55[0m 
[0m
(:NXT "" ((-33 (:FN #\|)))) 
"" 
(:CLOS (((-33 (:FN #\|))))) 
(:EXX (-33 (:FN #\|)) (VECTOR -33) ((:FN #\|))) 
(:EXX (((-33 (:FN #\|)))) (FUNCALL #'APPLY-SCALAR-MONADIC #'ABS (VECTOR -33))
 NIL) 
  [32m✓ [90m33 is expected to be 33[0m 
[0m
(:NXT "" ((39 (:FN #\|) 8))) 
"" 
(:CLOS (((39 (:FN #\|) 8)))) 
(:EXX (39 (:FN #\|) 8) (VECTOR 39) ((:FN #\|) 8)) 
(:EXX (((39 (:FN #\|) 8)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'MOD (VECTOR 39) (VECTOR 8)) NIL) 
  [32m✓ [90m7 is expected to be 7[0m 
[0m

[!] Factorial / Binomial
(:NXT "" ((5 (:FN #\!)))) 
"" 
(:CLOS (((5 (:FN #\!))))) 
(:EXX (5 (:FN #\!)) (VECTOR 5) ((:FN #\!))) 
(:EXX (((5 (:FN #\!)))) (FUNCALL #'APPLY-SCALAR-MONADIC #'SPRFACT (VECTOR 5))
 NIL) 
  [32m✓ [90m120 is expected to be 120[0m 
[0m
(:NXT "" ((12 (:FN #\!) 5))) 
"" 
(:CLOS (((12 (:FN #\!) 5)))) 
(:EXX (12 (:FN #\!) 5) (VECTOR 12) ((:FN #\!) 5)) 
(:EXX (((12 (:FN #\!) 5)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'BINOMIAL (VECTOR 12) (VECTOR 5)) NIL) 
  [32m✓ [90m792 is expected to be 792[0m 
[0m

[⌈] Ceiling / Maximum
(:NXT "" ((1.0001 (:FN #\LEFT_CEILING)))) 
"" 
(:CLOS (((1.0001 (:FN #\LEFT_CEILING))))) 
(:EXX (1.0001 (:FN #\LEFT_CEILING)) (VECTOR 1.0001) ((:FN #\LEFT_CEILING))) 
(:EXX (((1.0001 (:FN #\LEFT_CEILING))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'CEILING (VECTOR 1.0001)) NIL) 
  [32m✓ [90m2 is expected to be 2[0m 
[0m
(:NXT "" ((1.9998 (:FN #\LEFT_CEILING)))) 
"" 
(:CLOS (((1.9998 (:FN #\LEFT_CEILING))))) 
(:EXX (1.9998 (:FN #\LEFT_CEILING)) (VECTOR 1.9998) ((:FN #\LEFT_CEILING))) 
(:EXX (((1.9998 (:FN #\LEFT_CEILING))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'CEILING (VECTOR 1.9998)) NIL) 
  [32m✓ [90m2 is expected to be 2[0m 
[0m
(:NXT "" ((5 4 3 2 1 0 (:FN #\LEFT_CEILING) 3))) 
"" 
(:CLOS (((5 4 3 2 1 0 (:FN #\LEFT_CEILING) 3)))) 
(:EXX (5 4 3 2 1 0 (:FN #\LEFT_CEILING) 3) (VECTOR 0 1 2 3 4 5)
 ((:FN #\LEFT_CEILING) 3)) 
(:EXX (((5 4 3 2 1 0 (:FN #\LEFT_CEILING) 3)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
              (FUNCALL #'MAX VEX::ALPHA VEX::OMEGA))
          (VECTOR 0 1 2 3 4 5) (VECTOR 3))
 NIL) 
  [32m✓ [90m#(3 3 3 3 4 5) is expected to be #(3 3 3 3 4 5)[0m 
[0m

[⌊] Floor / Minimum
(:NXT "" ((1.0001 (:FN #\LEFT_FLOOR)))) 
"" 
(:CLOS (((1.0001 (:FN #\LEFT_FLOOR))))) 
(:EXX (1.0001 (:FN #\LEFT_FLOOR)) (VECTOR 1.0001) ((:FN #\LEFT_FLOOR))) 
(:EXX (((1.0001 (:FN #\LEFT_FLOOR))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR (VECTOR 1.0001)) NIL) 
  [32m✓ [90m1 is expected to be 1[0m 
[0m
(:NXT "" ((1.9998 (:FN #\LEFT_FLOOR)))) 
"" 
(:CLOS (((1.9998 (:FN #\LEFT_FLOOR))))) 
(:EXX (1.9998 (:FN #\LEFT_FLOOR)) (VECTOR 1.9998) ((:FN #\LEFT_FLOOR))) 
(:EXX (((1.9998 (:FN #\LEFT_FLOOR))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR (VECTOR 1.9998)) NIL) 
  [32m✓ [90m1 is expected to be 1[0m 
[0m
(:NXT "" ((5 4 3 2 1 0 (:FN #\LEFT_FLOOR) 3))) 
"" 
(:CLOS (((5 4 3 2 1 0 (:FN #\LEFT_FLOOR) 3)))) 
(:EXX (5 4 3 2 1 0 (:FN #\LEFT_FLOOR) 3) (VECTOR 0 1 2 3 4 5)
 ((:FN #\LEFT_FLOOR) 3)) 
(:EXX (((5 4 3 2 1 0 (:FN #\LEFT_FLOOR) 3)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
              (FUNCALL #'MIN VEX::ALPHA VEX::OMEGA))
          (VECTOR 0 1 2 3 4 5) (VECTOR 3))
 NIL) 
  [32m✓ [90m#(0 1 2 3 3 3) is expected to be #(0 1 2 3 3 3)[0m 
[0m

[○] Pi Times / Circular
(:NXT ""
 ((1 (:FN #\WHITE_CIRCLE) (:FN #\MULTIPLICATION_SIGN) 100000
   (:FN #\LEFT_FLOOR)))) 
"" 
(:CLOS
 (((1 (:FN #\WHITE_CIRCLE) (:FN #\MULTIPLICATION_SIGN) 100000
    (:FN #\LEFT_FLOOR))))) 
(:EXX
 (1 (:FN #\WHITE_CIRCLE) (:FN #\MULTIPLICATION_SIGN) 100000 (:FN #\LEFT_FLOOR))
 (VECTOR 1)
 ((:FN #\WHITE_CIRCLE) (:FN #\MULTIPLICATION_SIGN) 100000 (:FN #\LEFT_FLOOR))) 
(:EXX
 (((1 (:FN #\WHITE_CIRCLE) (:FN #\MULTIPLICATION_SIGN) 100000
    (:FN #\LEFT_FLOOR))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR
          (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                   (FUNCALL #'APPLY-SCALAR-MONADIC
                            #'(LAMBDA (OMEGA) (* PI OMEGA)) (VECTOR 1))
                   (VECTOR 100000)))
 NIL) 
  [32m✓ [90m314159 is expected to be 314159[0m 
[0m
(:NXT ""
 ((4 (:FN #\DIVISION_SIGN) (:FN #\WHITE_CIRCLE) (:FN #\WHITE_CIRCLE) 1
   (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR) (:FN #\=)
   ((2 (:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 2 (:FN #\DIVISION_SIGN) 1
     (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR)))))) 
"" 
(:CLOS
 (((4 (:FN #\DIVISION_SIGN) (:FN #\WHITE_CIRCLE) (:FN #\WHITE_CIRCLE) 1
    (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR) (:FN #\=)
    ((2 (:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 2 (:FN #\DIVISION_SIGN) 1
      (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR))))))) 
(:EXX
 (4 (:FN #\DIVISION_SIGN) (:FN #\WHITE_CIRCLE) (:FN #\WHITE_CIRCLE) 1
  (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR) (:FN #\=)
  ((2 (:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 2 (:FN #\DIVISION_SIGN) 1
    (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR))))
 (VECTOR 4)
 ((:FN #\DIVISION_SIGN) (:FN #\WHITE_CIRCLE) (:FN #\WHITE_CIRCLE) 1
  (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR) (:FN #\=)
  ((2 (:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 2 (:FN #\DIVISION_SIGN) 1
    (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR))))) 
(:CLOS
 (((2 (:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 2 (:FN #\DIVISION_SIGN) 1
    (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR))))) 
(:EXX
 (2 (:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 2 (:FN #\DIVISION_SIGN) 1
  (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR))
 (VECTOR 2)
 ((:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 2 (:FN #\DIVISION_SIGN) 1
  (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR))) 
(:EXX
 (((4 (:FN #\DIVISION_SIGN) (:FN #\WHITE_CIRCLE) (:FN #\WHITE_CIRCLE) 1
    (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR) (:FN #\=)
    ((2 (:FN #\DIVISION_SIGN) (:FN #\STAR_OPERATOR) 2 (:FN #\DIVISION_SIGN) 1
      (:FN #\MULTIPLICATION_SIGN) 1000 (:FN #\LEFT_FLOOR))))))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (OMEGA ALPHA)
              (IF (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA)
                       (FUNCALL
                        (COND ((AND (NUMBERP ALPHA) (NUMBERP OMEGA)) #'=)
                              ((AND (CHARACTERP ALPHA) (CHARACTERP OMEGA))
                               #'CHAR=))
                        OMEGA ALPHA))
                   OMEGA ALPHA)
                  1
                  0))
          (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR
                   (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                            (IF (AND (IS-SINGLETON (VECTOR 1)))
                                (FUNCALL
                                 #'(LAMBDA (OMEGA ALPHA)
                                     (LET ((FN
                                            (VECTOR
                                             (LAMBDA (INPUT)
                                               (EXP (* INPUT #C(0 1))))
                                             (LAMBDA (INPUT) (* INPUT #C(0 1)))
                                             (LAMBDA (INPUT)
                                               (IF (COMPLEXP INPUT)
                                                   (COMPLEX (REALPART INPUT)
                                                            (-
                                                             (IMAGPART INPUT)))
                                                   INPUT))
                                             #'VALUES
                                             (LAMBDA (INPUT)
                                               (EXPT (- -1 (* 2 INPUT)) 1/2))
                                             #'ATANH #'ACOSH #'ASINH
                                             (LAMBDA (INPUT)
                                               (*
                                                (EXPT (/ (1+ INPUT) (1- INPUT))
                                                      1/2)
                                                (1+ INPUT)))
                                             #'ATAN #'ACOS #'ASIN
                                             (LAMBDA (INPUT)
                                               (EXPT (- 1 (* 2 INPUT)) 1/2))
                                             #'SIN #'COS #'TAN
                                             (LAMBDA (INPUT)
                                               (EXPT (1+ (* 2 INPUT)) 1/2))
                                             #'SINH #'COSH #'TANH
                                             (LAMBDA (INPUT)
                                               (EXPT (- -1 (* 2 INPUT)) 1/2))
                                             #'REALPART #'ABS #'IMAGPART
                                             #'PHASE)))
                                       (APPLY-SCALAR-MONADIC
                                        (AREF FN (+ 12 ALPHA)) OMEGA)))
                                 (FUNCALL #'APPLY-SCALAR-MONADIC
                                          #'(LAMBDA (OMEGA) (* PI OMEGA))
                                          (FUNCALL #'APPLY-SCALAR-MONADIC #'/
                                                   (VECTOR 4)))
                                 (DISCLOSE (VECTOR 1))))
                            (VECTOR 1000)))
          (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR
                   (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                            (FUNCALL #'APPLY-SCALAR-DYADIC
                                     #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                                         (FUNCALL #'/ VEX::ALPHA VEX::OMEGA))
                                     (FUNCALL #'APPLY-SCALAR-DYADIC
                                              #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                                                  (FUNCALL #'EXPT VEX::ALPHA
                                                           VEX::OMEGA))
                                              (FUNCALL #'APPLY-SCALAR-MONADIC
                                                       #'/ (VECTOR 2))
                                              (VECTOR 2))
                                     (VECTOR 1))
                            (VECTOR 1000))))
 NIL) 
  [32m✓ [90m1 is expected to be 1[0m 
[0m

[~] Not / Without
(:NXT "" ((1 0 1 (:FN #\~)))) 
"" 
(:CLOS (((1 0 1 (:FN #\~))))) 
(:EXX (1 0 1 (:FN #\~)) (VECTOR 1 0 1) ((:FN #\~))) 
(:EXX (((1 0 1 (:FN #\~))))
 (FUNCALL #'APPLY-SCALAR-MONADIC
          #'(LAMBDA (OMEGA)
              (IF (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (COND ((= 0 OMEGA) T) ((= 1 OMEGA) NIL)
                             (T
                              (ERROR
                               "Domain error: arguments to ~ must be 1 or 0."))))
                   OMEGA)
                  1
                  0))
          (VECTOR 1 0 1))
 NIL) 
  [32m✓ [90m#(0 1 0) is expected to be #(0 1 0)[0m 
[0m
(:NXT "" ((5 3 (:FN #\~) 7 6 5 4 3 2 1))) 
"" 
(:CLOS (((5 3 (:FN #\~) 7 6 5 4 3 2 1)))) 
(:EXX (5 3 (:FN #\~) 7 6 5 4 3 2 1) (VECTOR 3 5) ((:FN #\~) 7 6 5 4 3 2 1)) 
(:EXX (((5 3 (:FN #\~) 7 6 5 4 3 2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (LET ((TO-EXCLUDE
                 (IF (STRINGP OMEGA)
                     (ARRAY-TO-LIST OMEGA)
                     (ARRAY-TO-LIST
                      (MAKE-ARRAY (LIST (ARRAY-TOTAL-SIZE OMEGA)) :DISPLACED-TO
                                  OMEGA))))
                (INCLUDED NIL))
            (EACH
             (LAMBDA (ELEMENT)
               (IF (NOT (MEMBER ELEMENT TO-EXCLUDE))
                   (SETQ INCLUDED (CONS ELEMENT INCLUDED))))
             ALPHA)
            (MAKE-ARRAY (LIST (LENGTH INCLUDED)) :ELEMENT-TYPE
                        (ELEMENT-TYPE ALPHA) :INITIAL-CONTENTS
                        (REVERSE INCLUDED))))
      (VECTOR 3 5) (VECTOR 1 2 3 4 5 6 7)))
 NIL) 
  [32m✓ [90m#(1 2 4 6 7) is expected to be #(1 2 4 6 7)[0m 
[0m
(:NXT "" (("ALFREDO" (:FN #\~) "MACARONI"))) 
"" 
(:CLOS ((("ALFREDO" (:FN #\~) "MACARONI")))) 
(:EXX ("ALFREDO" (:FN #\~) "MACARONI") "ALFREDO" ((:FN #\~) "MACARONI")) 
(:EXX ((("ALFREDO" (:FN #\~) "MACARONI")))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (LET ((TO-EXCLUDE
                 (IF (STRINGP OMEGA)
                     (ARRAY-TO-LIST OMEGA)
                     (ARRAY-TO-LIST
                      (MAKE-ARRAY (LIST (ARRAY-TOTAL-SIZE OMEGA)) :DISPLACED-TO
                                  OMEGA))))
                (INCLUDED NIL))
            (EACH
             (LAMBDA (ELEMENT)
               (IF (NOT (MEMBER ELEMENT TO-EXCLUDE))
                   (SETQ INCLUDED (CONS ELEMENT INCLUDED))))
             ALPHA)
            (MAKE-ARRAY (LIST (LENGTH INCLUDED)) :ELEMENT-TYPE
                        (ELEMENT-TYPE ALPHA) :INITIAL-CONTENTS
                        (REVERSE INCLUDED))))
      "ALFREDO" "MACARONI"))
 NIL) 
  [32m✓ [90m"MCNI" is expected to be "MCNI"[0m 
[0m

[<] Less
(:NXT "" ((5 4 3 2 1 (:FN #\<) 3))) 
"" 
(:CLOS (((5 4 3 2 1 (:FN #\<) 3)))) 
(:EXX (5 4 3 2 1 (:FN #\<) 3) (VECTOR 1 2 3 4 5) ((:FN #\<) 3)) 
(:EXX (((5 4 3 2 1 (:FN #\<) 3)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (OMEGA ALPHA)
              (IF (FUNCALL #'< ALPHA OMEGA)
                  1
                  0))
          (VECTOR 1 2 3 4 5) (VECTOR 3))
 NIL) 
  [32m✓ [90m#(0 0 0 1 1) is expected to be #(0 0 0 1 1)[0m 
[0m

[≤] Less or Equal
(:NXT "" ((5 4 3 2 1 (:FN #\LESS-THAN_OR_EQUAL_TO) 3))) 
"" 
(:CLOS (((5 4 3 2 1 (:FN #\LESS-THAN_OR_EQUAL_TO) 3)))) 
(:EXX (5 4 3 2 1 (:FN #\LESS-THAN_OR_EQUAL_TO) 3) (VECTOR 1 2 3 4 5)
 ((:FN #\LESS-THAN_OR_EQUAL_TO) 3)) 
(:EXX (((5 4 3 2 1 (:FN #\LESS-THAN_OR_EQUAL_TO) 3)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (OMEGA ALPHA)
              (IF (FUNCALL #'<= ALPHA OMEGA)
                  1
                  0))
          (VECTOR 1 2 3 4 5) (VECTOR 3))
 NIL) 
  [32m✓ [90m#(0 0 1 1 1) is expected to be #(0 0 1 1 1)[0m 
[0m

[=] Equal
(:NXT "" ((5 4 3 2 1 (:FN #\=) 3))) 
"" 
(:CLOS (((5 4 3 2 1 (:FN #\=) 3)))) 
(:EXX (5 4 3 2 1 (:FN #\=) 3) (VECTOR 1 2 3 4 5) ((:FN #\=) 3)) 
(:EXX (((5 4 3 2 1 (:FN #\=) 3)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (OMEGA ALPHA)
              (IF (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA)
                       (FUNCALL
                        (COND ((AND (NUMBERP ALPHA) (NUMBERP OMEGA)) #'=)
                              ((AND (CHARACTERP ALPHA) (CHARACTERP OMEGA))
                               #'CHAR=))
                        OMEGA ALPHA))
                   OMEGA ALPHA)
                  1
                  0))
          (VECTOR 1 2 3 4 5) (VECTOR 3))
 NIL) 
  [32m✓ [90m#(0 0 1 0 0) is expected to be #(0 0 1 0 0)[0m 
[0m

[≥] Greater or Equal
(:NXT "" ((5 4 3 2 1 (:FN #\GREATER-THAN_OR_EQUAL_TO) 3))) 
"" 
(:CLOS (((5 4 3 2 1 (:FN #\GREATER-THAN_OR_EQUAL_TO) 3)))) 
(:EXX (5 4 3 2 1 (:FN #\GREATER-THAN_OR_EQUAL_TO) 3) (VECTOR 1 2 3 4 5)
 ((:FN #\GREATER-THAN_OR_EQUAL_TO) 3)) 
(:EXX (((5 4 3 2 1 (:FN #\GREATER-THAN_OR_EQUAL_TO) 3)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (OMEGA ALPHA)
              (IF (FUNCALL #'>= ALPHA OMEGA)
                  1
                  0))
          (VECTOR 1 2 3 4 5) (VECTOR 3))
 NIL) 
  [32m✓ [90m#(1 1 1 0 0) is expected to be #(1 1 1 0 0)[0m 
[0m

[>] Greater
(:NXT "" ((5 4 3 2 1 (:FN #\>) 3))) 
"" 
(:CLOS (((5 4 3 2 1 (:FN #\>) 3)))) 
(:EXX (5 4 3 2 1 (:FN #\>) 3) (VECTOR 1 2 3 4 5) ((:FN #\>) 3)) 
(:EXX (((5 4 3 2 1 (:FN #\>) 3)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (OMEGA ALPHA)
              (IF (FUNCALL #'> ALPHA OMEGA)
                  1
                  0))
          (VECTOR 1 2 3 4 5) (VECTOR 3))
 NIL) 
  [32m✓ [90m#(1 1 0 0 0) is expected to be #(1 1 0 0 0)[0m 
[0m

[≠] Not Equal
(:NXT "" ((5 4 3 2 1 (:FN #\NOT_EQUAL_TO) 3))) 
"" 
(:CLOS (((5 4 3 2 1 (:FN #\NOT_EQUAL_TO) 3)))) 
(:EXX (5 4 3 2 1 (:FN #\NOT_EQUAL_TO) 3) (VECTOR 1 2 3 4 5)
 ((:FN #\NOT_EQUAL_TO) 3)) 
(:EXX (((5 4 3 2 1 (:FN #\NOT_EQUAL_TO) 3)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (OMEGA ALPHA)
              (IF (FUNCALL #'/= ALPHA OMEGA)
                  1
                  0))
          (VECTOR 1 2 3 4 5) (VECTOR 3))
 NIL) 
  [32m✓ [90m#(1 1 0 1 1) is expected to be #(1 1 0 1 1)[0m 
[0m

[≡] Depth / Match
(:NXT "" ((((8)) ((((7 6)) 5 4)) ((3 2)) 1 (:FN #\IDENTICAL_TO)))) 
"" 
(:CLOS (((((8)) ((((7 6)) 5 4)) ((3 2)) 1 (:FN #\IDENTICAL_TO))))) 
(:CLOS (((8)) ((((7 6)) 5 4)) ((3 2)) 1 (:FN #\IDENTICAL_TO))) 
(:EXX (8) (VECTOR 8) NIL) 
(:CLOS (((((7 6)) 5 4)) ((3 2)) 1 (:FN #\IDENTICAL_TO))) 
(:CLOS (((7 6)) 5 4)) 
(:EXX (7 6) (VECTOR 6 7) NIL) 
(:EXX (((7 6)) 5 4) (VECTOR 4 5 (VECTOR 6 7)) NIL) 
(:CLOS (((3 2)) 1 (:FN #\IDENTICAL_TO))) 
(:EXX (3 2) (VECTOR 2 3) NIL) 
(:EXX (((8)) ((((7 6)) 5 4)) ((3 2)) 1 (:FN #\IDENTICAL_TO))
 (VECTOR 1 (VECTOR 2 3) (VECTOR 4 5 (VECTOR 6 7)) (VECTOR 8))
 ((:FN #\IDENTICAL_TO))) 
(:EXX (((((8)) ((((7 6)) 5 4)) ((3 2)) 1 (:FN #\IDENTICAL_TO))))
 (IF (AND)
     (FUNCALL #'ARRAY-DEPTH
              (VECTOR 1 (VECTOR 2 3) (VECTOR 4 5 (VECTOR 6 7)) (VECTOR 8))))
 NIL) 
  [32m✓ [90m3 is expected to be 3[0m 
[0m

[≢] First Dimension / Not Match
(:NXT "" ((3 2 1 (:FN #\NOT_IDENTICAL_TO)))) 
"" 
(:CLOS (((3 2 1 (:FN #\NOT_IDENTICAL_TO))))) 
(:EXX (3 2 1 (:FN #\NOT_IDENTICAL_TO)) (VECTOR 1 2 3)
 ((:FN #\NOT_IDENTICAL_TO))) 
(:EXX (((3 2 1 (:FN #\NOT_IDENTICAL_TO))))
 (IF (AND)
     (FUNCALL #'(LAMBDA (OMEGA) (FIRST (DIMS OMEGA))) (VECTOR 1 2 3)))
 NIL) 
  [32m✓ [90m3 is expected to be 3[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:FN #\NOT_IDENTICAL_TO)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\NOT_IDENTICAL_TO))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\NOT_IDENTICAL_TO))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\NOT_IDENTICAL_TO))) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\NOT_IDENTICAL_TO))))
 (IF (AND)
     (FUNCALL #'(LAMBDA (OMEGA) (FIRST (DIMS OMEGA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA)
                       (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA)
                            (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                        (IOTA OMEGA :START
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                        (IF (ARRAYP (VECTOR 9))
                            (DISCLOSE (VECTOR 9))
                            (VECTOR 9))))
                   (VECTOR 2 3 4)))))
 NIL) 
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[∧] And
(:NXT "" ((1 1 0 0 (:FN #\LOGICAL_AND) 1 0 1 0))) 
"" 
(:CLOS (((1 1 0 0 (:FN #\LOGICAL_AND) 1 0 1 0)))) 
(:EXX (1 1 0 0 (:FN #\LOGICAL_AND) 1 0 1 0) (VECTOR 0 0 1 1)
 ((:FN #\LOGICAL_AND) 1 0 1 0)) 
(:EXX (((1 1 0 0 (:FN #\LOGICAL_AND) 1 0 1 0)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
              (FUNCALL #'LCM VEX::ALPHA VEX::OMEGA))
          (VECTOR 0 0 1 1) (VECTOR 0 1 0 1))
 NIL) 
  [32m✓ [90m#(0 0 0 1) is expected to be #(0 0 0 1)[0m 
[0m

[⍲] Nand
(:NXT "" ((1 1 0 0 (:FN #\APL_FUNCTIONAL_SYMBOL_UP_CARET_TILDE) 1 0 1 0))) 
"" 
(:CLOS (((1 1 0 0 (:FN #\APL_FUNCTIONAL_SYMBOL_UP_CARET_TILDE) 1 0 1 0)))) 
(:EXX (1 1 0 0 (:FN #\APL_FUNCTIONAL_SYMBOL_UP_CARET_TILDE) 1 0 1 0)
 (VECTOR 0 0 1 1) ((:FN #\APL_FUNCTIONAL_SYMBOL_UP_CARET_TILDE) 1 0 1 0)) 
(:EXX (((1 1 0 0 (:FN #\APL_FUNCTIONAL_SYMBOL_UP_CARET_TILDE) 1 0 1 0)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (OMEGA ALPHA)
              (IF (FUNCALL #'(LAMBDA (OMEGA ALPHA) (NOT (= OMEGA ALPHA 1)))
                           OMEGA ALPHA)
                  1
                  0))
          (VECTOR 0 0 1 1) (VECTOR 0 1 0 1))
 NIL) 
  [32m✓ [90m#(1 1 1 0) is expected to be #(1 1 1 0)[0m 
[0m

[∨] Or
(:NXT "" ((1 1 0 0 (:FN #\LOGICAL_OR) 1 0 1 0))) 
"" 
(:CLOS (((1 1 0 0 (:FN #\LOGICAL_OR) 1 0 1 0)))) 
(:EXX (1 1 0 0 (:FN #\LOGICAL_OR) 1 0 1 0) (VECTOR 0 0 1 1)
 ((:FN #\LOGICAL_OR) 1 0 1 0)) 
(:EXX (((1 1 0 0 (:FN #\LOGICAL_OR) 1 0 1 0)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
              (FUNCALL #'GCD VEX::ALPHA VEX::OMEGA))
          (VECTOR 0 0 1 1) (VECTOR 0 1 0 1))
 NIL) 
  [32m✓ [90m#(0 1 1 1) is expected to be #(0 1 1 1)[0m 
[0m

[⍱] Nor
(:NXT "" ((1 1 0 0 (:FN #\APL_FUNCTIONAL_SYMBOL_DOWN_CARET_TILDE) 1 0 1 0))) 
"" 
(:CLOS (((1 1 0 0 (:FN #\APL_FUNCTIONAL_SYMBOL_DOWN_CARET_TILDE) 1 0 1 0)))) 
(:EXX (1 1 0 0 (:FN #\APL_FUNCTIONAL_SYMBOL_DOWN_CARET_TILDE) 1 0 1 0)
 (VECTOR 0 0 1 1) ((:FN #\APL_FUNCTIONAL_SYMBOL_DOWN_CARET_TILDE) 1 0 1 0)) 
(:EXX (((1 1 0 0 (:FN #\APL_FUNCTIONAL_SYMBOL_DOWN_CARET_TILDE) 1 0 1 0)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (OMEGA ALPHA)
              (IF (FUNCALL #'(LAMBDA (OMEGA ALPHA) (= OMEGA ALPHA 0)) OMEGA
                           ALPHA)
                  1
                  0))
          (VECTOR 0 0 1 1) (VECTOR 0 1 0 1))
 NIL) 
  [32m✓ [90m#(1 0 0 0) is expected to be #(1 0 0 0)[0m 
[0m

[⍳] Index / Index Of
(:NXT "" ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)))) 
"" 
(:CLOS (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA))))) 
(:EXX (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)) (VECTOR 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA))) 
(:EXX (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                      (IOTA OMEGA :START
                            (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
      (IF (ARRAYP (VECTOR 5))
          (DISCLOSE (VECTOR 5))
          (VECTOR 5))))
 NIL) 
  [32m✓ [90m#(1 2 3 4 5) is expected to be #(1 2 3 4 5)[0m 
[0m
(:NXT "" ((5 4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) 3))) 
"" 
(:CLOS (((5 4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) 3)))) 
(:EXX (5 4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) 3) (VECTOR 1 2 3 4 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) 3)) 
(:EXX (((5 4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) 3)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (INDEX-OF OMEGA ALPHA (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
      (VECTOR 1 2 3 4 5) (VECTOR 3)))
 NIL) 
  [32m✓ [90m#(2 2 1 2 2) is expected to be #(2 2 1 2 2)[0m 
[0m

[⍴] Shape / Reshape
(:NXT "" ((3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO)))) 
"" 
(:CLOS (((3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))))) 
(:EXX (3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO)) (VECTOR 1 2 3)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO))) 
(:EXX (((3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (LET ((OMEGA-DIMS (DIMS OMEGA)))
            (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS)) :INITIAL-CONTENTS
                        OMEGA-DIMS)))
      (VECTOR 1 2 3)))
 NIL) 
  [32m✓ [90m3 is expected to be 3[0m 
[0m
(:NXT ""
 ((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
   (:FN #\APL_FUNCTIONAL_SYMBOL_RHO)))) 
"" 
(:CLOS
 (((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))))) 
(:EXX
 (8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))
 (VECTOR 8)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))) 
(:EXX
 (((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (LET ((OMEGA-DIMS (DIMS OMEGA)))
            (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS)) :INITIAL-CONTENTS
                        OMEGA-DIMS)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 8))
                    (DISCLOSE (VECTOR 8))
                    (VECTOR 8))))
           (VECTOR 3 5)))))
 NIL) 
  [32m✓ [90m#(3 5) is expected to be #(3 5)[0m 
[0m
(:NXT ""
 ((3 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4))) 
"" 
(:CLOS
 (((3 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5
    4)))) 
(:EXX
 (3 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4)
 (VECTOR 3)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4)) 
(:EXX
 (((3 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5
    4)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA)
               (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                           (IOTA OMEGA :START
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
           (IF (ARRAYP (VECTOR 3))
               (DISCLOSE (VECTOR 3))
               (VECTOR 3))))
      (VECTOR 4 5)))
 NIL) 
  [32m✓ [90m#2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2)) is expected to be #2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2))[0m 
[0m

[⌷] At Axes
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
   (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 3))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
    (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 3)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
  (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 3)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD)
  3)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
    (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 3)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF AXES
              (LET ((ELIDED-COORDS
                     (LOOP FOR I FROM 0 TO (1- (RANK OMEGA))
                           COLLECT NIL)))
                (LOOP FOR INDEX FROM 0 TO (1- (LENGTH (FIRST AXES)))
                      DO (SETF (NTH
                                (- (AREF (FIRST AXES) INDEX)
                                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                                ELIDED-COORDS)
                                 (- (AREF ALPHA INDEX)
                                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (AREF-ELIDING OMEGA ELIDED-COORDS))
              (LET* ((COORDS
                      (MAPCAR
                       (LAMBDA (COORD)
                         (- COORD (OF-STATE *APRIL-IDIOM* `:COUNT-FROM)))
                       (ARRAY-TO-LIST ALPHA)))
                     (FOUND (APPLY #'AREF (CONS OMEGA COORDS))))
                (IF (NOT (ARRAYP FOUND))
                    (VECTOR FOUND)
                    FOUND))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA)
               (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                           (IOTA OMEGA :START
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
           (IF (ARRAYP (VECTOR 9))
               (DISCLOSE (VECTOR 9))
               (VECTOR 9))))
      (VECTOR 3) (LIST)))
 NIL) 
  [32m✓ [90m3 is expected to be 3[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4
   (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 2 2))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4
    (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 2 2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4
  (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 2 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4
  (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 2 2)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4
    (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 2 2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF AXES
              (LET ((ELIDED-COORDS
                     (LOOP FOR I FROM 0 TO (1- (RANK OMEGA))
                           COLLECT NIL)))
                (LOOP FOR INDEX FROM 0 TO (1- (LENGTH (FIRST AXES)))
                      DO (SETF (NTH
                                (- (AREF (FIRST AXES) INDEX)
                                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                                ELIDED-COORDS)
                                 (- (AREF ALPHA INDEX)
                                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (AREF-ELIDING OMEGA ELIDED-COORDS))
              (LET* ((COORDS
                      (MAPCAR
                       (LAMBDA (COORD)
                         (- COORD (OF-STATE *APRIL-IDIOM* `:COUNT-FROM)))
                       (ARRAY-TO-LIST ALPHA)))
                     (FOUND (APPLY #'AREF (CONS OMEGA COORDS))))
                (IF (NOT (ARRAYP FOUND))
                    (VECTOR FOUND)
                    FOUND))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 4 5)))
      (VECTOR 2 2) (LIST)))
 NIL) 
  [32m✓ [90m7 is expected to be 7[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5 4
   (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 4 3 2))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
    4 (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 4 3 2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5 4
  (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 4 3 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5 4
  (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 4 3 2)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
    4 (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 4 3 2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF AXES
              (LET ((ELIDED-COORDS
                     (LOOP FOR I FROM 0 TO (1- (RANK OMEGA))
                           COLLECT NIL)))
                (LOOP FOR INDEX FROM 0 TO (1- (LENGTH (FIRST AXES)))
                      DO (SETF (NTH
                                (- (AREF (FIRST AXES) INDEX)
                                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                                ELIDED-COORDS)
                                 (- (AREF ALPHA INDEX)
                                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (AREF-ELIDING OMEGA ELIDED-COORDS))
              (LET* ((COORDS
                      (MAPCAR
                       (LAMBDA (COORD)
                         (- COORD (OF-STATE *APRIL-IDIOM* `:COUNT-FROM)))
                       (ARRAY-TO-LIST ALPHA)))
                     (FOUND (APPLY #'AREF (CONS OMEGA COORDS))))
                (IF (NOT (ARRAYP FOUND))
                    (VECTOR FOUND)
                    FOUND))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 4 5 6)))
      (VECTOR 2 3 4) (LIST)))
 NIL) 
  [32m✓ [90m1 is expected to be 1[0m 
[0m
(:NXT ""
 ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (2 1)) (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 3 1))) 
"" 
(:CLOS
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (2 1)) (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 3 1)))) 
(:EXX
 (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2 1)) (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 3 1)
 (VECTOR 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2 1)) (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 3 1)) 
(:CLOS (((2 1)))) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (((2 1))) (VECTOR 1 2) NIL) 
(:EXX
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (2 1)) (:FN #\APL_FUNCTIONAL_SYMBOL_SQUISH_QUAD) 3 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF AXES
              (LET ((ELIDED-COORDS
                     (LOOP FOR I FROM 0 TO (1- (RANK OMEGA))
                           COLLECT NIL)))
                (LOOP FOR INDEX FROM 0 TO (1- (LENGTH (FIRST AXES)))
                      DO (SETF (NTH
                                (- (AREF (FIRST AXES) INDEX)
                                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                                ELIDED-COORDS)
                                 (- (AREF ALPHA INDEX)
                                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (AREF-ELIDING OMEGA ELIDED-COORDS))
              (LET* ((COORDS
                      (MAPCAR
                       (LAMBDA (COORD)
                         (- COORD (OF-STATE *APRIL-IDIOM* `:COUNT-FROM)))
                       (ARRAY-TO-LIST ALPHA)))
                     (FOUND (APPLY #'AREF (CONS OMEGA COORDS))))
                (IF (NOT (ARRAYP FOUND))
                    (VECTOR FOUND)
                    FOUND))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 5))
                    (DISCLOSE (VECTOR 5))
                    (VECTOR 5))))
           (VECTOR 2 3 4)))
      (VECTOR 1 3) (LIST 1 2)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #(4 5 1 2))[0m


[∊] Enlist / Membership
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2
   (:FN #\SMALL_ELEMENT_OF)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2
    2 (:FN #\SMALL_ELEMENT_OF))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2
  (:FN #\SMALL_ELEMENT_OF))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2
  (:FN #\SMALL_ELEMENT_OF))) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2
    2 (:FN #\SMALL_ELEMENT_OF))))
 (IF (AND)
     (FUNCALL #'ENLIST
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA)
                       (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA)
                            (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                        (IOTA OMEGA :START
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                        (IF (ARRAYP (VECTOR 9))
                            (DISCLOSE (VECTOR 9))
                            (VECTOR 9))))
                   (VECTOR 2 2 2)))))
 NIL) 
  [32m✓ [90m#(1 2 3 4 5 6 7 8) is expected to be #(1 2 3 4 5 6 7 8)[0m 
[0m
(:NXT "" ((5 4 3 2 1 (:FN #\SMALL_ELEMENT_OF) 7 5 2))) 
"" 
(:CLOS (((5 4 3 2 1 (:FN #\SMALL_ELEMENT_OF) 7 5 2)))) 
(:EXX (5 4 3 2 1 (:FN #\SMALL_ELEMENT_OF) 7 5 2) (VECTOR 1 2 3 4 5)
 ((:FN #\SMALL_ELEMENT_OF) 7 5 2)) 
(:EXX (((5 4 3 2 1 (:FN #\SMALL_ELEMENT_OF) 7 5 2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (LET ((OUTPUT (MAKE-ARRAY (DIMS ALPHA))))
            (DOTIMES (INDEX (ARRAY-TOTAL-SIZE OUTPUT))
              (LET ((FOUND NIL))
                (EACH
                 (LAMBDA (INPUT)
                   (COND
                    ((AND (NUMBERP INPUT)
                          (NUMBERP (ROW-MAJOR-AREF ALPHA INDEX))
                          (= INPUT (ROW-MAJOR-AREF ALPHA INDEX)))
                     (SETQ FOUND T))
                    ((AND (CHARACTERP INPUT)
                          (CHARACTERP (ROW-MAJOR-AREF ALPHA INDEX))
                          (CHAR= INPUT (ROW-MAJOR-AREF ALPHA INDEX)))
                     (SETQ FOUND T))))
                 OMEGA)
                (SETF (ROW-MAJOR-AREF OUTPUT INDEX)
                        (IF FOUND
                            1
                            0))))
            OUTPUT))
      (VECTOR 1 2 3 4 5) (VECTOR 2 5 7)))
 NIL) 
  [32m✓ [90m#(1 1 0) is expected to be #(1 1 0)[0m 
[0m

[⍷] Find
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:FN #\APL_FUNCTIONAL_SYMBOL_EPSILON_UNDERBAR)
   ((2 1 7 6 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2))))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_EPSILON_UNDERBAR)
    ((2 1 7 6 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2)))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_EPSILON_UNDERBAR)
  ((2 1 7 6 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2)))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_EPSILON_UNDERBAR)
  ((2 1 7 6 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2)))) 
(:CLOS (((2 1 7 6 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2)))) 
(:EXX (2 1 7 6 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2) (VECTOR 6 7 1 2)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_EPSILON_UNDERBAR)
    ((2 1 7 6 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2)))))
 (IF (AND)
     (FUNCALL #'FIND-ARRAY
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA)
                       (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA)
                            (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                        (IOTA OMEGA :START
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                        (IF (ARRAYP (VECTOR 9))
                            (DISCLOSE (VECTOR 9))
                            (VECTOR 9))))
                   (VECTOR 2 3 4)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA)
                       (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                   (VECTOR 6 7 1 2) (VECTOR 2 2)))))
 NIL) 
  [32m✓ [90m#3A(((0 0 0 0) (0 1 0 0) (0 0 0 0)) ((0 0 1 0) (0 0 0 0) (0 0 0 0))) is expected to be #3A(((0 0 0 0) (0 1 0 0) (0 0 0 0)) ((0 0 1 0) (0 0 0 0) (0 0 0 0)))[0m 
[0m

[↑] Disclose / Take
(:NXT "" ((4 3 2 1 (:FN #\SUBSET_OF) (:FN #\UPWARDS_ARROW)))) 
"" 
(:CLOS (((4 3 2 1 (:FN #\SUBSET_OF) (:FN #\UPWARDS_ARROW))))) 
(:EXX (4 3 2 1 (:FN #\SUBSET_OF) (:FN #\UPWARDS_ARROW)) (VECTOR 1 2 3 4)
 ((:FN #\SUBSET_OF) (:FN #\UPWARDS_ARROW))) 
(:EXX (((4 3 2 1 (:FN #\SUBSET_OF) (:FN #\UPWARDS_ARROW))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (IF (OR (NOT (VECTORP OMEGA)) (NOT (ARRAYP (AREF OMEGA 0))))
              OMEGA
              (AREF OMEGA 0)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA &OPTIONAL AXES)
               (IF AXES
                   (RE-ENCLOSE OMEGA
                               (EACH
                                (LAMBDA (AXEL)
                                  (- AXEL
                                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                                (FIRST AXES)))
                   (IF (LOOP FOR DIM IN (DIMS OMEGA)
                             ALWAYS (= 1 DIM))
                       OMEGA
                       (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
           (VECTOR 1 2 3 4) (LIST)))))
 NIL) 
  [32m✓ [90m#(1 2 3 4) is expected to be #(1 2 3 4)[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5 4
   (:FN #\UPWARDS_ARROW) 4 3 2))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
    4 (:FN #\UPWARDS_ARROW) 4 3 2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5 4
  (:FN #\UPWARDS_ARROW) 4 3 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5 4
  (:FN #\UPWARDS_ARROW) 4 3 2)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
    4 (:FN #\UPWARDS_ARROW) 4 3 2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (MULTIDIM-SLICE OMEGA
                          (IF AXES
                              (LOOP FOR AXIS FROM 0 TO (1- (RANK OMEGA))
                                    COLLECT (IF (= AXIS
                                                   (- (AREF (FIRST AXES) 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM)))
                                                (AREF ALPHA 0)
                                                (NTH AXIS (DIMS OMEGA))))
                              (ARRAY-TO-LIST ALPHA))
                          :FILL-WITH 0))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 4 5 6)))
      (VECTOR 2 3 4) (LIST)))
 NIL) 
  [32m✓ [90m#3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1))) is expected to be #3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1)))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (1)) (:FN #\UPWARDS_ARROW) 1))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (1)) (:FN #\UPWARDS_ARROW) 1)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (1)) (:FN #\UPWARDS_ARROW) 1)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (1)) (:FN #\UPWARDS_ARROW) 1)) 
(:CLOS (((1)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((1))) (VECTOR 1) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (1)) (:FN #\UPWARDS_ARROW) 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (MULTIDIM-SLICE OMEGA
                          (IF AXES
                              (LOOP FOR AXIS FROM 0 TO (1- (RANK OMEGA))
                                    COLLECT (IF (= AXIS
                                                   (- (AREF (FIRST AXES) 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM)))
                                                (AREF ALPHA 0)
                                                (NTH AXIS (DIMS OMEGA))))
                              (ARRAY-TO-LIST ALPHA))
                          :FILL-WITH 0))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3 4)))
      (VECTOR 1) (LIST 1)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (2)) (:FN #\UPWARDS_ARROW) 1))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (2)) (:FN #\UPWARDS_ARROW) 1)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2)) (:FN #\UPWARDS_ARROW) 1)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2)) (:FN #\UPWARDS_ARROW) 1)) 
(:CLOS (((2)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (((2))) (VECTOR 2) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (2)) (:FN #\UPWARDS_ARROW) 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (MULTIDIM-SLICE OMEGA
                          (IF AXES
                              (LOOP FOR AXIS FROM 0 TO (1- (RANK OMEGA))
                                    COLLECT (IF (= AXIS
                                                   (- (AREF (FIRST AXES) 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM)))
                                                (AREF ALPHA 0)
                                                (NTH AXIS (DIMS OMEGA))))
                              (ARRAY-TO-LIST ALPHA))
                          :FILL-WITH 0))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3 4)))
      (VECTOR 1) (LIST 2)))
 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #3A(((1 2 3 4)) ((4 5 6 7))))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (2)) (:FN #\UPWARDS_ARROW) 2))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (2)) (:FN #\UPWARDS_ARROW) 2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2)) (:FN #\UPWARDS_ARROW) 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2)) (:FN #\UPWARDS_ARROW) 2)) 
(:CLOS (((2)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (((2))) (VECTOR 2) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (2)) (:FN #\UPWARDS_ARROW) 2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (MULTIDIM-SLICE OMEGA
                          (IF AXES
                              (LOOP FOR AXIS FROM 0 TO (1- (RANK OMEGA))
                                    COLLECT (IF (= AXIS
                                                   (- (AREF (FIRST AXES) 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM)))
                                                (AREF ALPHA 0)
                                                (NTH AXIS (DIMS OMEGA))))
                              (ARRAY-TO-LIST ALPHA))
                          :FILL-WITH 0))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3 4)))
      (VECTOR 2) (LIST 2)))
 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #3A(((1 2 3 4) (5 6 7 8))
                                            ((4 5 6 7) (8 9 1 2))))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (3)) (:FN #\UPWARDS_ARROW) 2))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (3)) (:FN #\UPWARDS_ARROW) 2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (3)) (:FN #\UPWARDS_ARROW) 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (3)) (:FN #\UPWARDS_ARROW) 2)) 
(:CLOS (((3)))) 
(:EXX (3) (VECTOR 3) NIL) 
(:EXX (((3))) (VECTOR 3) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (3)) (:FN #\UPWARDS_ARROW) 2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (MULTIDIM-SLICE OMEGA
                          (IF AXES
                              (LOOP FOR AXIS FROM 0 TO (1- (RANK OMEGA))
                                    COLLECT (IF (= AXIS
                                                   (- (AREF (FIRST AXES) 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM)))
                                                (AREF ALPHA 0)
                                                (NTH AXIS (DIMS OMEGA))))
                              (ARRAY-TO-LIST ALPHA))
                          :FILL-WITH 0))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3 4)))
      (VECTOR 2) (LIST 3)))
 NIL) 
  [31m× Raised an error The value
                      3
                    is not of type
                      VECTOR (expected: #3A(((1 2) (5 6) (9 1)) ((4 5) (8 9) (3 4))))[0m


[↓] Split / Drop
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\DOWNWARDS_ARROW)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\DOWNWARDS_ARROW))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\DOWNWARDS_ARROW))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\DOWNWARDS_ARROW))) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\DOWNWARDS_ARROW))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (SPLIT OMEGA
                 (IF AXES
                     (AREF (FIRST AXES) 0)
                     (1- (RANK OMEGA)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (LIST)))
 NIL) 
  [32m✓ [90m#(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3)) is expected to be #(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5 4
   (:FN #\DOWNWARDS_ARROW) 2 2 2))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
    4 (:FN #\DOWNWARDS_ARROW) 2 2 2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5 4
  (:FN #\DOWNWARDS_ARROW) 2 2 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5 4
  (:FN #\DOWNWARDS_ARROW) 2 2 2)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
    4 (:FN #\DOWNWARDS_ARROW) 2 2 2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (MULTIDIM-SLICE OMEGA
                          (IF AXES
                              (LOOP FOR AXIS FROM 0 TO (1- (RANK OMEGA))
                                    COLLECT (IF (= AXIS
                                                   (- (AREF (FIRST AXES) 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM)))
                                                (AREF ALPHA 0)
                                                0))
                              (ARRAY-TO-LIST ALPHA))
                          :INVERSE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 4 5 6)))
      (VECTOR 2 2 2) (LIST)))
 NIL) 
  [32m✓ [90m#3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3))) is expected to be #3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3)))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (1)) (:FN #\DOWNWARDS_ARROW) 1))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (1)) (:FN #\DOWNWARDS_ARROW) 1)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (1)) (:FN #\DOWNWARDS_ARROW) 1)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (1)) (:FN #\DOWNWARDS_ARROW) 1)) 
(:CLOS (((1)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((1))) (VECTOR 1) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (1)) (:FN #\DOWNWARDS_ARROW) 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (MULTIDIM-SLICE OMEGA
                          (IF AXES
                              (LOOP FOR AXIS FROM 0 TO (1- (RANK OMEGA))
                                    COLLECT (IF (= AXIS
                                                   (- (AREF (FIRST AXES) 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM)))
                                                (AREF ALPHA 0)
                                                0))
                              (ARRAY-TO-LIST ALPHA))
                          :INVERSE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3 4)))
      (VECTOR 1) (LIST 1)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #3A(((4 5 6 7) (8 9 1 2) (3 4 5 6))))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (2)) (:FN #\DOWNWARDS_ARROW) 1))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (2)) (:FN #\DOWNWARDS_ARROW) 1)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2)) (:FN #\DOWNWARDS_ARROW) 1)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2)) (:FN #\DOWNWARDS_ARROW) 1)) 
(:CLOS (((2)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (((2))) (VECTOR 2) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (2)) (:FN #\DOWNWARDS_ARROW) 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (MULTIDIM-SLICE OMEGA
                          (IF AXES
                              (LOOP FOR AXIS FROM 0 TO (1- (RANK OMEGA))
                                    COLLECT (IF (= AXIS
                                                   (- (AREF (FIRST AXES) 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM)))
                                                (AREF ALPHA 0)
                                                0))
                              (ARRAY-TO-LIST ALPHA))
                          :INVERSE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3 4)))
      (VECTOR 1) (LIST 2)))
 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #3A(((5 6 7 8) (9 1 2 3))
                                            ((8 9 1 2) (3 4 5 6))))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (2)) (:FN #\DOWNWARDS_ARROW) 2))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (2)) (:FN #\DOWNWARDS_ARROW) 2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2)) (:FN #\DOWNWARDS_ARROW) 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2)) (:FN #\DOWNWARDS_ARROW) 2)) 
(:CLOS (((2)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (((2))) (VECTOR 2) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (2)) (:FN #\DOWNWARDS_ARROW) 2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (MULTIDIM-SLICE OMEGA
                          (IF AXES
                              (LOOP FOR AXIS FROM 0 TO (1- (RANK OMEGA))
                                    COLLECT (IF (= AXIS
                                                   (- (AREF (FIRST AXES) 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM)))
                                                (AREF ALPHA 0)
                                                0))
                              (ARRAY-TO-LIST ALPHA))
                          :INVERSE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3 4)))
      (VECTOR 2) (LIST 2)))
 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #3A(((9 1 2 3)) ((3 4 5 6))))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (3)) (:FN #\DOWNWARDS_ARROW) 2))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (3)) (:FN #\DOWNWARDS_ARROW) 2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (3)) (:FN #\DOWNWARDS_ARROW) 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (3)) (:FN #\DOWNWARDS_ARROW) 2)) 
(:CLOS (((3)))) 
(:EXX (3) (VECTOR 3) NIL) 
(:EXX (((3))) (VECTOR 3) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:AXES (3)) (:FN #\DOWNWARDS_ARROW) 2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (MULTIDIM-SLICE OMEGA
                          (IF AXES
                              (LOOP FOR AXIS FROM 0 TO (1- (RANK OMEGA))
                                    COLLECT (IF (= AXIS
                                                   (- (AREF (FIRST AXES) 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM)))
                                                (AREF ALPHA 0)
                                                0))
                              (ARRAY-TO-LIST ALPHA))
                          :INVERSE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3 4)))
      (VECTOR 2) (LIST 3)))
 NIL) 
  [31m× Raised an error The value
                      3
                    is not of type
                      VECTOR (expected: #3A(((3 4) (7 8) (2 3)) ((6 7) (1 2) (5 6))))[0m

(:NXT "" ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\DOWNWARDS_ARROW) -2))) 
"" 
(:CLOS (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\DOWNWARDS_ARROW) -2)))) 
(:EXX (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\DOWNWARDS_ARROW) -2)
 (VECTOR 9) ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\DOWNWARDS_ARROW) -2)) 
(:EXX (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\DOWNWARDS_ARROW) -2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (MULTIDIM-SLICE OMEGA
                          (IF AXES
                              (LOOP FOR AXIS FROM 0 TO (1- (RANK OMEGA))
                                    COLLECT (IF (= AXIS
                                                   (- (AREF (FIRST AXES) 0)
                                                      (OF-STATE *APRIL-IDIOM*
                                                                :COUNT-FROM)))
                                                (AREF ALPHA 0)
                                                0))
                              (ARRAY-TO-LIST ALPHA))
                          :INVERSE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA)
               (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                           (IOTA OMEGA :START
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
           (IF (ARRAYP (VECTOR 9))
               (DISCLOSE (VECTOR 9))
               (VECTOR 9))))
      (VECTOR -2) (LIST)))
 NIL) 
  [32m✓ [90m#(1 2 3 4 5 6 7) is expected to be #(1 2 3 4 5 6 7)[0m 
[0m

[,] Ravel / Catenate or Laminate
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\,)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\,))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\,))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\,))) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\,))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (RAVEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM) OMEGA AXES))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (LIST)))
 NIL) 
  [32m✓ [90m#(1 2 3 4 5 6 7 8 9 1 2 3) is expected to be #(1 2 3 4 5 6 7 8 9 1 2 3)[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:AXES (0.5)) (:FN #\,)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (0.5)) (:FN #\,))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (0.5)) (:FN #\,))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (0.5)) (:FN #\,))) 
(:CLOS (((0.5)))) 
(:EXX (0.5) (VECTOR 0.5) NIL) 
(:EXX (((0.5))) (VECTOR 0.5) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (0.5)) (:FN #\,))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (RAVEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM) OMEGA AXES))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (LIST 0.5)))
 NIL) 
  [31m× Raised an error The value
                      0.5
                    is not of type
                      SEQUENCE (expected: #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:AXES (1.5)) (:FN #\,)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (1.5)) (:FN #\,))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (1.5)) (:FN #\,))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (1.5)) (:FN #\,))) 
(:CLOS (((1.5)))) 
(:EXX (1.5) (VECTOR 1.5) NIL) 
(:EXX (((1.5))) (VECTOR 1.5) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (1.5)) (:FN #\,))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (RAVEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM) OMEGA AXES))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (LIST 1.5)))
 NIL) 
  [31m× Raised an error The value
                      1.5
                    is not of type
                      SEQUENCE (expected: #3A(((1 2 3 4)) ((5 6 7 8)) ((9 1 2 3))))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:AXES (2.5)) (:FN #\,)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (2.5)) (:FN #\,))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (2.5)) (:FN #\,))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (2.5)) (:FN #\,))) 
(:CLOS (((2.5)))) 
(:EXX (2.5) (VECTOR 2.5) NIL) 
(:EXX (((2.5))) (VECTOR 2.5) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (2.5)) (:FN #\,))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (RAVEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM) OMEGA AXES))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (LIST 2.5)))
 NIL) 
  [31m× Raised an error The value
                      2.5
                    is not of type
                      SEQUENCE (expected: #3A(((1) (2) (3) (4))
                                              ((5) (6) (7) (8))
                                              ((9) (1) (2) (3))))[0m

(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
   2 (:AXES (2 1)) (:FN #\,)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    2 (:AXES (2 1)) (:FN #\,))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 2
  (:AXES (2 1)) (:FN #\,))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 2
  (:AXES (2 1)) (:FN #\,))) 
(:CLOS (((2 1)))) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (((2 1))) (VECTOR 1 2) NIL) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    2 (:AXES (2 1)) (:FN #\,))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (RAVEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM) OMEGA AXES))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 12))
                    (DISCLOSE (VECTOR 12))
                    (VECTOR 12))))
           (VECTOR 2 3 3)))
      (LIST 1 2)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #2A((1 2 3)
                                              (4 5 6)
                                              (7 8 9)
                                              (10 11 12)
                                              (1 2 3)
                                              (4 5 6)))[0m

(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
   2 (:AXES (3 2)) (:FN #\,)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    2 (:AXES (3 2)) (:FN #\,))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 2
  (:AXES (3 2)) (:FN #\,))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 2
  (:AXES (3 2)) (:FN #\,))) 
(:CLOS (((3 2)))) 
(:EXX (3 2) (VECTOR 2 3) NIL) 
(:EXX (((3 2))) (VECTOR 2 3) NIL) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    2 (:AXES (3 2)) (:FN #\,))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (RAVEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM) OMEGA AXES))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 12))
                    (DISCLOSE (VECTOR 12))
                    (VECTOR 12))))
           (VECTOR 2 3 3)))
      (LIST 2 3)))
 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #2A((1 2 3 4 5 6 7 8 9)
                                              (10 11 12 1 2 3 4 5 6)))[0m

(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
   2 (:AXES (3 2 1)) (:FN #\,)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    2 (:AXES (3 2 1)) (:FN #\,))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 2
  (:AXES (3 2 1)) (:FN #\,))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 2
  (:AXES (3 2 1)) (:FN #\,))) 
(:CLOS (((3 2 1)))) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (((3 2 1))) (VECTOR 1 2 3) NIL) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    2 (:AXES (3 2 1)) (:FN #\,))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (RAVEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM) OMEGA AXES))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 12))
                    (DISCLOSE (VECTOR 12))
                    (VECTOR 12))))
           (VECTOR 2 3 3)))
      (LIST 1 2 3)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #(1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\,) 0))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\,) 0)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\,) 0)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\,) 0)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\,) 0)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (VECTOR 0) (LIST)))
 NIL) 
  [32m✓ [90m#2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3)) is expected to be #2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:AXES (1)) (:FN #\,) 0))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (1)) (:FN #\,) 0)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (1)) (:FN #\,) 0)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (1)) (:FN #\,) 0)) 
(:CLOS (((1)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((1))) (VECTOR 1) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (1)) (:FN #\,) 0)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (VECTOR 0) (LIST 1)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3)))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\,)
   ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
     3))))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\,)
    ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
      3)))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\,)
  ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
    3)))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\,)
  ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
    3)))) 
(:CLOS
 (((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
    3)))) 
(:EXX
 (6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 3)
 (VECTOR 6)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 3)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\,)
    ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
      3)))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 6))
                    (DISCLOSE (VECTOR 6))
                    (VECTOR 6))))
           (VECTOR 3 6)))
      (LIST)))
 NIL) 
  [32m✓ [90m#2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3)) is expected to be #2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:AXES (1)) (:FN #\,)
   ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
     5))))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (1)) (:FN #\,)
    ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
      5)))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (1)) (:FN #\,)
  ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
    5)))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (1)) (:FN #\,)
  ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
    5)))) 
(:CLOS
 (((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
    5)))) 
(:EXX
 (6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 5)
 (VECTOR 6)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 5)) 
(:CLOS (((1)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((1))) (VECTOR 1) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (1)) (:FN #\,)
    ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
      5)))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 6))
                    (DISCLOSE (VECTOR 6))
                    (VECTOR 6))))
           (VECTOR 5 4)))
      (LIST 1)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #2A((1 2 3 4)
                                            (5 6 1 2)
                                            (3 4 5 6)
                                            (1 2 3 4)
                                            (5 6 1 2)
                                            (1 2 3 4)
                                            (5 6 7 8)
                                            (9 1 2 3)))[0m

(:NXT "" ((6 5 4 (:FN #\,) 3 2 1))) 
"" 
(:CLOS (((6 5 4 (:FN #\,) 3 2 1)))) 
(:EXX (6 5 4 (:FN #\,) 3 2 1) (VECTOR 4 5 6) ((:FN #\,) 3 2 1)) 
(:EXX (((6 5 4 (:FN #\,) 3 2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      (VECTOR 4 5 6) (VECTOR 1 2 3) (LIST)))
 NIL) 
  [32m✓ [90m#(1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6)[0m 
[0m
(:NXT "" ((6 5 4 (:AXES (1)) (:FN #\,) 3 2 1))) 
"" 
(:CLOS (((6 5 4 (:AXES (1)) (:FN #\,) 3 2 1)))) 
(:EXX (6 5 4 (:AXES (1)) (:FN #\,) 3 2 1) (VECTOR 4 5 6)
 ((:AXES (1)) (:FN #\,) 3 2 1)) 
(:CLOS (((1)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((1))) (VECTOR 1) NIL) 
(:EXX (((6 5 4 (:AXES (1)) (:FN #\,) 3 2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      (VECTOR 4 5 6) (VECTOR 1 2 3) (LIST 1)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #(1 2 3 4 5 6))[0m

(:NXT "" ((4 3 2 1 (:AXES (0.5)) (:FN #\,) 4 3 2 1))) 
"" 
(:CLOS (((4 3 2 1 (:AXES (0.5)) (:FN #\,) 4 3 2 1)))) 
(:EXX (4 3 2 1 (:AXES (0.5)) (:FN #\,) 4 3 2 1) (VECTOR 1 2 3 4)
 ((:AXES (0.5)) (:FN #\,) 4 3 2 1)) 
(:CLOS (((0.5)))) 
(:EXX (0.5) (VECTOR 0.5) NIL) 
(:EXX (((0.5))) (VECTOR 0.5) NIL) 
(:EXX (((4 3 2 1 (:AXES (0.5)) (:FN #\,) 4 3 2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      (VECTOR 1 2 3 4) (VECTOR 1 2 3 4) (LIST 0.5)))
 NIL) 
  [31m× Raised an error The value
                      0.5
                    is not of type
                      VECTOR (expected: #2A((1 2 3 4) (1 2 3 4)))[0m

(:NXT "" ((4 3 2 1 (:AXES (1.5)) (:FN #\,) 4 3 2 1))) 
"" 
(:CLOS (((4 3 2 1 (:AXES (1.5)) (:FN #\,) 4 3 2 1)))) 
(:EXX (4 3 2 1 (:AXES (1.5)) (:FN #\,) 4 3 2 1) (VECTOR 1 2 3 4)
 ((:AXES (1.5)) (:FN #\,) 4 3 2 1)) 
(:CLOS (((1.5)))) 
(:EXX (1.5) (VECTOR 1.5) NIL) 
(:EXX (((1.5))) (VECTOR 1.5) NIL) 
(:EXX (((4 3 2 1 (:AXES (1.5)) (:FN #\,) 4 3 2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      (VECTOR 1 2 3 4) (VECTOR 1 2 3 4) (LIST 1.5)))
 NIL) 
  [31m× Raised an error The value
                      1.5
                    is not of type
                      VECTOR (expected: #2A((1 1) (2 2) (3 3) (4 4)))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
   (:AXES (0.5)) (:FN #\,)
   ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
     2))))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:AXES (0.5)) (:FN #\,)
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
      2)))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:AXES (0.5)) (:FN #\,)
  ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2)))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:AXES (0.5)) (:FN #\,)
  ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2)))) 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2)) 
(:CLOS (((0.5)))) 
(:EXX (0.5) (VECTOR 0.5) NIL) 
(:EXX (((0.5))) (VECTOR 0.5) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:AXES (0.5)) (:FN #\,)
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
      2)))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3)))
      (LIST 0.5)))
 NIL) 
  [31m× Raised an error The value
                      0.5
                    is not of type
                      VECTOR (expected: #3A(((1 2 3) (4 5 6)) ((1 2 3) (4 5 6))))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
   (:AXES (2.5)) (:FN #\,)
   ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
     2))))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:AXES (2.5)) (:FN #\,)
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
      2)))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:AXES (2.5)) (:FN #\,)
  ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2)))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:AXES (2.5)) (:FN #\,)
  ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2)))) 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2)) 
(:CLOS (((2.5)))) 
(:EXX (2.5) (VECTOR 2.5) NIL) 
(:EXX (((2.5))) (VECTOR 2.5) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:AXES (2.5)) (:FN #\,)
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
      2)))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3)))
      (LIST 2.5)))
 NIL) 
  [31m× Raised an error The value
                      2.5
                    is not of type
                      VECTOR (expected: #3A(((1 1) (2 2) (3 3)) ((4 4) (5 5) (6 6))))[0m

(:NXT "" (("-" (:AXES (0.5)) (:FN #\,) "UNDER"))) 
"" 
(:CLOS ((("-" (:AXES (0.5)) (:FN #\,) "UNDER")))) 
(:EXX ("-" (:AXES (0.5)) (:FN #\,) "UNDER") "-"
 ((:AXES (0.5)) (:FN #\,) "UNDER")) 
(:CLOS (((0.5)))) 
(:EXX (0.5) (VECTOR 0.5) NIL) 
(:EXX (((0.5))) (VECTOR 0.5) NIL) 
(:EXX ((("-" (:AXES (0.5)) (:FN #\,) "UNDER")))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      "-" "UNDER" (LIST 0.5)))
 NIL) 
  [31m× Raised an error The value
                      0.5
                    is not of type
                      VECTOR (expected: #2A((#\U #\N #\D #\E #\R)
                                            (#\- #\- #\- #\- #\-)))[0m

(:NXT "" (("." (:AXES (1.5)) (:FN #\,) "HELLO"))) 
"" 
(:CLOS ((("." (:AXES (1.5)) (:FN #\,) "HELLO")))) 
(:EXX ("." (:AXES (1.5)) (:FN #\,) "HELLO") "."
 ((:AXES (1.5)) (:FN #\,) "HELLO")) 
(:CLOS (((1.5)))) 
(:EXX (1.5) (VECTOR 1.5) NIL) 
(:EXX (((1.5))) (VECTOR 1.5) NIL) 
(:EXX ((("." (:AXES (1.5)) (:FN #\,) "HELLO")))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      "." "HELLO" (LIST 1.5)))
 NIL) 
  [31m× Raised an error The value
                      1.5
                    is not of type
                      VECTOR (expected: #2A((#\H #\.)
                                            (#\E #\.)
                                            (#\L #\.)
                                            (#\L #\.)
                                            (#\O #\.)))[0m


[⍪] Table / Catenate First
(:NXT "" (("MAKE" (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)))) 
"" 
(:CLOS ((("MAKE" (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR))))) 
(:EXX ("MAKE" (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)) "MAKE"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR))) 
(:EXX ((("MAKE" (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (IF (VECTORP OMEGA)
              (MAKE-ARRAY (LIST (LENGTH OMEGA) 1) :ELEMENT-TYPE
                          (ELEMENT-TYPE OMEGA) :INITIAL-CONTENTS
                          (LOOP FOR I FROM 0 TO (1- (LENGTH OMEGA))
                                COLLECT (LIST (AREF OMEGA I))))
              (LET ((O-DIMS (DIMS OMEGA)))
                (MAKE-ARRAY (LIST (FIRST O-DIMS) (APPLY #'* (REST O-DIMS)))
                            :ELEMENT-TYPE (ELEMENT-TYPE OMEGA) :DISPLACED-TO
                            (COPY-ARRAY OMEGA)))))
      "MAKE"))
 NIL) 
  [32m✓ [90m#2A((#\M) (#\A) (#\K) (#\E)) is expected to be #2A((#\M) (#\A) (#\K) (#\E))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR))) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (IF (VECTORP OMEGA)
              (MAKE-ARRAY (LIST (LENGTH OMEGA) 1) :ELEMENT-TYPE
                          (ELEMENT-TYPE OMEGA) :INITIAL-CONTENTS
                          (LOOP FOR I FROM 0 TO (1- (LENGTH OMEGA))
                                COLLECT (LIST (AREF OMEGA I))))
              (LET ((O-DIMS (DIMS OMEGA)))
                (MAKE-ARRAY (LIST (FIRST O-DIMS) (APPLY #'* (REST O-DIMS)))
                            :ELEMENT-TYPE (ELEMENT-TYPE OMEGA) :DISPLACED-TO
                            (COPY-ARRAY OMEGA)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))))
 NIL) 
  [32m✓ [90m#2A((1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
(:NXT ""
 ((24 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   2 (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)))) 
"" 
(:CLOS
 (((24 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR))))) 
(:EXX
 (24 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR))
 (VECTOR 24)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR))) 
(:EXX
 (((24 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (IF (VECTORP OMEGA)
              (MAKE-ARRAY (LIST (LENGTH OMEGA) 1) :ELEMENT-TYPE
                          (ELEMENT-TYPE OMEGA) :INITIAL-CONTENTS
                          (LOOP FOR I FROM 0 TO (1- (LENGTH OMEGA))
                                COLLECT (LIST (AREF OMEGA I))))
              (LET ((O-DIMS (DIMS OMEGA)))
                (MAKE-ARRAY (LIST (FIRST O-DIMS) (APPLY #'* (REST O-DIMS)))
                            :ELEMENT-TYPE (ELEMENT-TYPE OMEGA) :DISPLACED-TO
                            (COPY-ARRAY OMEGA)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 24))
                    (DISCLOSE (VECTOR 24))
                    (VECTOR 24))))
           (VECTOR 2 3 4)))))
 NIL) 
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24)) is expected to be #2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR) 0))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR) 0)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR) 0)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR) 0)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR) 0)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              0))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (VECTOR 0) (LIST)))
 NIL) 
  [32m✓ [90m#2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:AXES (2)) (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR) 0))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (2)) (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR) 0)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (2)) (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR) 0)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (2)) (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR) 0)) 
(:CLOS (((2)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (((2))) (VECTOR 2) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (2)) (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR) 0)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              0))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (VECTOR 0) (LIST 2)))
 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3)))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)
   ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
     5))))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)
    ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
      5)))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)
  ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
    5)))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)
  ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
    5)))) 
(:CLOS
 (((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
    5)))) 
(:EXX
 (6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 5)
 (VECTOR 6)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 5)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)
    ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4
      5)))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              0))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 6))
                    (DISCLOSE (VECTOR 6))
                    (VECTOR 6))))
           (VECTOR 5 4)))
      (LIST)))
 NIL) 
  [32m✓ [90m#2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3)) is expected to be #2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:AXES (2)) (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)
   ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
     3))))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (2)) (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)
    ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
      3)))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (2)) (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)
  ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
    3)))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (2)) (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)
  ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
    3)))) 
(:CLOS
 (((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
    3)))) 
(:EXX
 (6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 3)
 (VECTOR 6)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 3)) 
(:CLOS (((2)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (((2))) (VECTOR 2) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (2)) (:FN #\APL_FUNCTIONAL_SYMBOL_COMMA_BAR)
    ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6
      3)))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              0))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 6))
                    (DISCLOSE (VECTOR 6))
                    (VECTOR 6))))
           (VECTOR 3 6)))
      (LIST 2)))
 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #2A((1 2 3 4 5 6 1 2 3 4)
                                            (1 2 3 4 5 6 5 6 7 8)
                                            (1 2 3 4 5 6 9 1 2 3)))[0m


[/] Replicate
(:NXT "" ((3 (:OP :LATERAL #\/) 5))) 
"" 
(:CLOS (((3 (:OP :LATERAL #\/) 5)))) 
(:EXX (3 (:OP :LATERAL #\/) 5) (VECTOR 3) ((:OP :LATERAL #\/) 5)) 
(:EXX (((3 (:OP :LATERAL #\/) 5)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        0 :COMPRESS-MODE T))
      (VECTOR 3) (VECTOR 5) (LIST)))
 NIL) 
  [32m✓ [90m#(3 3 3 3 3) is expected to be #(3 3 3 3 3)[0m 
[0m
(:NXT "" ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:OP :LATERAL #\/) 1 0 1 0 1))) 
"" 
(:CLOS (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:OP :LATERAL #\/) 1 0 1 0 1)))) 
(:EXX (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:OP :LATERAL #\/) 1 0 1 0 1)
 (VECTOR 5) ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:OP :LATERAL #\/) 1 0 1 0 1)) 
(:EXX (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:OP :LATERAL #\/) 1 0 1 0 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        0 :COMPRESS-MODE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA)
               (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                           (IOTA OMEGA :START
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
           (IF (ARRAYP (VECTOR 5))
               (DISCLOSE (VECTOR 5))
               (VECTOR 5))))
      (VECTOR 1 0 1 0 1) (LIST)))
 NIL) 
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
(:NXT "" ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:OP :LATERAL #\/) 3))) 
"" 
(:CLOS (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:OP :LATERAL #\/) 3)))) 
(:EXX (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:OP :LATERAL #\/) 3) (VECTOR 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:OP :LATERAL #\/) 3)) 
(:EXX (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:OP :LATERAL #\/) 3)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        0 :COMPRESS-MODE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA)
               (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                           (IOTA OMEGA :START
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
           (IF (ARRAYP (VECTOR 5))
               (DISCLOSE (VECTOR 5))
               (VECTOR 5))))
      (VECTOR 3) (LIST)))
 NIL) 
  [32m✓ [90m#(1 1 1) is expected to be #(1 1 1)[0m 
[0m
(:NXT ""
 ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\SUBSET_OF) (:OP :LATERAL #\/)
   3))) 
"" 
(:CLOS
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\SUBSET_OF) (:OP :LATERAL #\/)
    3)))) 
(:EXX
 (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\SUBSET_OF) (:OP :LATERAL #\/) 3)
 (VECTOR 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\SUBSET_OF) (:OP :LATERAL #\/) 3)) 
(:EXX
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\SUBSET_OF) (:OP :LATERAL #\/)
    3)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        0 :COMPRESS-MODE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA &OPTIONAL AXES)
               (IF AXES
                   (RE-ENCLOSE OMEGA
                               (EACH
                                (LAMBDA (AXEL)
                                  (- AXEL
                                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                                (FIRST AXES)))
                   (IF (LOOP FOR DIM IN (DIMS OMEGA)
                             ALWAYS (= 1 DIM))
                       OMEGA
                       (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 5))
                    (DISCLOSE (VECTOR 5))
                    (VECTOR 5))))
           (LIST)))
      (VECTOR 3) (LIST)))
 NIL) 
  [32m✓ [90m#(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5)) is expected to be #(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5))[0m 
[0m
(:NXT ""
 ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
   (:OP :LATERAL #\/) 5 -4 3 -2 1))) 
"" 
(:CLOS
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
    (:OP :LATERAL #\/) 5 -4 3 -2 1)))) 
(:EXX
 (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
  (:OP :LATERAL #\/) 5 -4 3 -2 1)
 (VECTOR 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
  (:OP :LATERAL #\/) 5 -4 3 -2 1)) 
(:EXX
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
    (:OP :LATERAL #\/) 5 -4 3 -2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        0 :COMPRESS-MODE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 5))
                    (DISCLOSE (VECTOR 5))
                    (VECTOR 5))))
           (VECTOR 3 5)))
      (VECTOR 1 -2 3 -4 5) (LIST)))
 NIL) 
  [32m✓ [90m#2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)) is expected to be #2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
   (:AXES (1)) (:OP :LATERAL #\/) 3 -2 1))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
    (:AXES (1)) (:OP :LATERAL #\/) 3 -2 1)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
  (:AXES (1)) (:OP :LATERAL #\/) 3 -2 1)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
  (:AXES (1)) (:OP :LATERAL #\/) 3 -2 1)) 
(:CLOS (((1)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((1))) (VECTOR 1) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
    (:AXES (1)) (:OP :LATERAL #\/) 3 -2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        0 :COMPRESS-MODE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 5)))
      (VECTOR 1 -2 3) (LIST 1)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #2A((1 2 3 4 5)
                                            (0 0 0 0 0)
                                            (0 0 0 0 0)
                                            (2 3 4 5 6)
                                            (2 3 4 5 6)
                                            (2 3 4 5 6)))[0m


[⌿] Replicate First
(:NXT ""
 ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
   (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 1 0 1 0 1))) 
"" 
(:CLOS
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 1 0 1 0 1)))) 
(:EXX
 (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 1 0 1 0 1)
 (VECTOR 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 1 0 1 0 1)) 
(:EXX
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 1 0 1 0 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        (1- (RANK OMEGA)) :COMPRESS-MODE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA)
               (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                           (IOTA OMEGA :START
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
           (IF (ARRAYP (VECTOR 5))
               (DISCLOSE (VECTOR 5))
               (VECTOR 5))))
      (VECTOR 1 0 1 0 1) (LIST)))
 NIL) 
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
   (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 3 -2 1))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 3 -2 1)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 3 -2 1)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 3 -2 1)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 3 -2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        (1- (RANK OMEGA)) :COMPRESS-MODE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 5)))
      (VECTOR 1 -2 3) (LIST)))
 NIL) 
  [32m✓ [90m#2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6)) is expected to be #2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6))[0m 
[0m
(:NXT ""
 ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
   (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 5 -4 3 -2 1))) 
"" 
(:CLOS
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
    (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 5 -4 3 -2 1)))) 
(:EXX
 (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
  (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 5 -4 3 -2 1)
 (VECTOR 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
  (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 5 -4 3 -2 1)) 
(:CLOS (((2)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (((2))) (VECTOR 2) NIL) 
(:EXX
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 3
    (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) 5 -4 3 -2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        (1- (RANK OMEGA)) :COMPRESS-MODE T))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 5))
                    (DISCLOSE (VECTOR 5))
                    (VECTOR 5))))
           (VECTOR 3 5)))
      (VECTOR 1 -2 3 -4 5) (LIST 2)))
 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
                                            (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
                                            (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)))[0m


[\] Expand
(:NXT "" (("." (:OP :LATERAL #\\) 5 -4 3 -2 1))) 
"" 
(:CLOS ((("." (:OP :LATERAL #\\) 5 -4 3 -2 1)))) 
(:EXX ("." (:OP :LATERAL #\\) 5 -4 3 -2 1) "." ((:OP :LATERAL #\\) 5 -4 3 -2 1)) 
(:EXX ((("." (:OP :LATERAL #\\) 5 -4 3 -2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        0))
      "." (VECTOR 1 -2 3 -4 5) (LIST)))
 NIL) 
  [32m✓ [90m".  ...    ....." is expected to be ".  ...    ....."[0m 
[0m
(:NXT ""
 ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
   (:FN #\+) 3 (:OP :LATERAL #\\) 1 0 2 -2 1))) 
"" 
(:CLOS
 (((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:FN #\+) 3 (:OP :LATERAL #\\) 1 0 2 -2 1)))) 
(:EXX
 (6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:FN #\+) 3 (:OP :LATERAL #\\) 1 0 2 -2 1)
 (VECTOR 6)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:FN #\+) 3 (:OP :LATERAL #\\) 1 0 2 -2 1)) 
(:EXX
 (((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:FN #\+) 3 (:OP :LATERAL #\\) 1 0 2 -2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        0))
      (FUNCALL #'APPLY-SCALAR-DYADIC #'+
               (IF (AND)
                   (FUNCALL
                    #'(LAMBDA (OMEGA ALPHA)
                        (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                    (IF (AND)
                        (FUNCALL
                         #'(LAMBDA (OMEGA)
                             (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                         (IOTA OMEGA :START
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                         (IF (ARRAYP (VECTOR 6))
                             (DISCLOSE (VECTOR 6))
                             (VECTOR 6))))
                    (VECTOR 2 3)))
               (VECTOR 3))
      (VECTOR 1 -2 2 0 1) (LIST)))
 NIL) 
  [32m✓ [90m#2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9)) is expected to be #2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9))[0m 
[0m
(:NXT ""
 ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
   (:FN #\+) 3 (:AXES (1)) (:OP :LATERAL #\\) 1 0 1))) 
"" 
(:CLOS
 (((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:FN #\+) 3 (:AXES (1)) (:OP :LATERAL #\\) 1 0 1)))) 
(:EXX
 (6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:FN #\+) 3 (:AXES (1)) (:OP :LATERAL #\\) 1 0 1)
 (VECTOR 6)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:FN #\+) 3 (:AXES (1)) (:OP :LATERAL #\\) 1 0 1)) 
(:CLOS (((1)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((1))) (VECTOR 1) NIL) 
(:EXX
 (((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:FN #\+) 3 (:AXES (1)) (:OP :LATERAL #\\) 1 0 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        0))
      (FUNCALL #'APPLY-SCALAR-DYADIC #'+
               (IF (AND)
                   (FUNCALL
                    #'(LAMBDA (OMEGA ALPHA)
                        (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                    (IF (AND)
                        (FUNCALL
                         #'(LAMBDA (OMEGA)
                             (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                         (IOTA OMEGA :START
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                         (IF (ARRAYP (VECTOR 6))
                             (DISCLOSE (VECTOR 6))
                             (VECTOR 6))))
                    (VECTOR 2 3)))
               (VECTOR 3))
      (VECTOR 1 0 1) (LIST 1)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #2A((4 5 6) (0 0 0) (7 8 9)))[0m


[⍀] Expand First
(:NXT "" ((3 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) 5 -4 3 -2 1))) 
"" 
(:CLOS (((3 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) 5 -4 3 -2 1)))) 
(:EXX (3 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) 5 -4 3 -2 1)
 (VECTOR 3) ((:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) 5 -4 3 -2 1)) 
(:EXX (((3 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) 5 -4 3 -2 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        (1- (RANK OMEGA))))
      (VECTOR 3) (VECTOR 1 -2 3 -4 5) (LIST)))
 NIL) 
  [32m✓ [90m#(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3) is expected to be #(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3)[0m 
[0m
(:NXT ""
 ((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
   (:FN #\+) 3 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) 1 0 1))) 
"" 
(:CLOS
 (((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:FN #\+) 3 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) 1 0 1)))) 
(:EXX
 (6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:FN #\+) 3 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) 1 0 1)
 (VECTOR 6)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:FN #\+) 3 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) 1 0 1)) 
(:EXX
 (((6 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:FN #\+) 3 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) 1 0 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                        (IF AXES
                            (- (RANK OMEGA)
                               (- (AREF (FIRST AXES) 0)
                                  (1- (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))))
                        (1- (RANK OMEGA))))
      (FUNCALL #'APPLY-SCALAR-DYADIC #'+
               (IF (AND)
                   (FUNCALL
                    #'(LAMBDA (OMEGA ALPHA)
                        (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                    (IF (AND)
                        (FUNCALL
                         #'(LAMBDA (OMEGA)
                             (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                         (IOTA OMEGA :START
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM))))
                         (IF (ARRAYP (VECTOR 6))
                             (DISCLOSE (VECTOR 6))
                             (VECTOR 6))))
                    (VECTOR 2 3)))
               (VECTOR 3))
      (VECTOR 1 0 1) (LIST)))
 NIL) 
  [32m✓ [90m#2A((4 5 6) (0 0 0) (7 8 9)) is expected to be #2A((4 5 6) (0 0 0) (7 8 9))[0m 
[0m

[⊂] Enclose / Partition
(:NXT ""
 ((7 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\SUBSET_OF) (:FN #\,) 1))) 
"" 
(:CLOS
 (((7 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\SUBSET_OF) (:FN #\,) 1)))) 
(:EXX
 (7 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\SUBSET_OF) (:FN #\,) 1)
 (VECTOR 7)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\SUBSET_OF) (:FN #\,) 1)) 
(:EXX
 (((7 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\SUBSET_OF) (:FN #\,) 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (AND (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                   (VECTORP ALPHA) (VECTORP OMEGA))
              (IF (AND AXES
                       (< 0
                          (- (AREF (FIRST AXES) 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                  (ERROR
                   (CONCATENATE 'STRING
                                "Specified axis is greater than 1, vectors"
                                " have only one axis along which to catenate."))
                  (IF (AND AXES
                           (> 0
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                      (ERROR
                       (FORMAT NIL "Specified axis is less than ~a."
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                      (CONCATENATE 'VECTOR ALPHA OMEGA)))
              (IF (OR (NOT AXES) (INTEGERP (AREF (FIRST AXES) 0)))
                  (LET* ((AXIS
                          (IF AXES
                              (- (AREF (FIRST AXES) 0)
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                              (1-
                               (MAX (ARRAY-RANK ALPHA) (ARRAY-RANK OMEGA)))))
                         (SCALE-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              ALPHA
                              (SCALE-ARRAY ALPHA OMEGA AXIS)))
                         (SCALE-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              OMEGA
                              (SCALE-ARRAY OMEGA ALPHA AXIS))))
                    (STACK AXIS SCALE-ALPHA SCALE-OMEGA))
                  (LET* ((AXIS
                          (CEILING
                           (- (AREF (FIRST AXES) 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                         (PERMUTE-DIMS (IOTA (1+ (RANK ALPHA))))
                         (P-ALPHA
                          (IF (NOT (IS-SINGLETON ALPHA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE ALPHA))))
                         (P-OMEGA
                          (IF (NOT (IS-SINGLETON OMEGA))
                              (PERMUTE (ROTATE-RIGHT AXIS PERMUTE-DIMS)
                                       (ARRAY-PROMOTE OMEGA)))))
                    (STACK AXIS
                           (IF (IS-SINGLETON ALPHA)
                               (SCALE-ARRAY ALPHA P-OMEGA)
                               P-ALPHA)
                           (IF (IS-SINGLETON OMEGA)
                               (SCALE-ARRAY OMEGA P-ALPHA)
                               P-OMEGA))))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA &OPTIONAL AXES)
               (IF AXES
                   (RE-ENCLOSE OMEGA
                               (EACH
                                (LAMBDA (AXEL)
                                  (- AXEL
                                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                                (FIRST AXES)))
                   (IF (LOOP FOR DIM IN (DIMS OMEGA)
                             ALWAYS (= 1 DIM))
                       OMEGA
                       (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA ALPHA)
                    (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                (IF (AND)
                    (FUNCALL
                     #'(LAMBDA (OMEGA)
                         (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                     (IOTA OMEGA :START
                                           (OF-STATE *APRIL-IDIOM*
                                                     :COUNT-FROM))))
                     (IF (ARRAYP (VECTOR 7))
                         (DISCLOSE (VECTOR 7))
                         (VECTOR 7))))
                (VECTOR 3 4)))
           (LIST)))
      (VECTOR 1) (LIST)))
 NIL) 
  [32m✓ [90m#(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5))) is expected to be #(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5)))[0m 
[0m
(:NXT ""
 (("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (3)) (:FN #\SUBSET_OF)))) 
"" 
(:CLOS
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (3)) (:FN #\SUBSET_OF))))) 
(:EXX
 ("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (3)) (:FN #\SUBSET_OF))
 "GRAYGOLDBLUESILKWOOLYARN"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2 (:AXES (3)) (:FN #\SUBSET_OF))) 
(:CLOS (((3)))) 
(:EXX (3) (VECTOR 3) NIL) 
(:EXX (((3))) (VECTOR 3) NIL) 
(:EXX
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (3)) (:FN #\SUBSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (IF AXES
              (RE-ENCLOSE OMEGA
                          (EACH
                           (LAMBDA (AXEL)
                             (- AXEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (FIRST AXES)))
              (IF (LOOP FOR DIM IN (DIMS OMEGA)
                        ALWAYS (= 1 DIM))
                  OMEGA
                  (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           "GRAYGOLDBLUESILKWOOLYARN" (VECTOR 2 3 4)))
      (LIST 3)))
 NIL) 
  [31m× Raised an error The value
                      3
                    is not of type
                      ARRAY (expected: #2A(("GRAY" "GOLD" "BLUE")
                                           ("SILK" "WOOL" "YARN")))[0m

(:NXT ""
 (("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (2)) (:FN #\SUBSET_OF)))) 
"" 
(:CLOS
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (2)) (:FN #\SUBSET_OF))))) 
(:EXX
 ("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2)) (:FN #\SUBSET_OF))
 "GRAYGOLDBLUESILKWOOLYARN"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2 (:AXES (2)) (:FN #\SUBSET_OF))) 
(:CLOS (((2)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (((2))) (VECTOR 2) NIL) 
(:EXX
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (2)) (:FN #\SUBSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (IF AXES
              (RE-ENCLOSE OMEGA
                          (EACH
                           (LAMBDA (AXEL)
                             (- AXEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (FIRST AXES)))
              (IF (LOOP FOR DIM IN (DIMS OMEGA)
                        ALWAYS (= 1 DIM))
                  OMEGA
                  (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           "GRAYGOLDBLUESILKWOOLYARN" (VECTOR 2 3 4)))
      (LIST 2)))
 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      ARRAY (expected: #2A(("GGB" "ROL" "ALU" "YDE")
                                           ("SWY" "IOA" "LOR" "KLN")))[0m

(:NXT ""
 (("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (1)) (:FN #\SUBSET_OF)))) 
"" 
(:CLOS
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (1)) (:FN #\SUBSET_OF))))) 
(:EXX
 ("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (1)) (:FN #\SUBSET_OF))
 "GRAYGOLDBLUESILKWOOLYARN"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2 (:AXES (1)) (:FN #\SUBSET_OF))) 
(:CLOS (((1)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((1))) (VECTOR 1) NIL) 
(:EXX
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (1)) (:FN #\SUBSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (IF AXES
              (RE-ENCLOSE OMEGA
                          (EACH
                           (LAMBDA (AXEL)
                             (- AXEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (FIRST AXES)))
              (IF (LOOP FOR DIM IN (DIMS OMEGA)
                        ALWAYS (= 1 DIM))
                  OMEGA
                  (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           "GRAYGOLDBLUESILKWOOLYARN" (VECTOR 2 3 4)))
      (LIST 1)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      ARRAY (expected: #2A(("GS" "RI" "AL" "YK")
                                           ("GW" "OO" "LO" "DL")
                                           ("BY" "LA" "UR" "EN")))[0m

(:NXT ""
 (("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (3 2)) (:FN #\SUBSET_OF)))) 
"" 
(:CLOS
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (3 2)) (:FN #\SUBSET_OF))))) 
(:EXX
 ("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (3 2)) (:FN #\SUBSET_OF))
 "GRAYGOLDBLUESILKWOOLYARN"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2 (:AXES (3 2)) (:FN #\SUBSET_OF))) 
(:CLOS (((3 2)))) 
(:EXX (3 2) (VECTOR 2 3) NIL) 
(:EXX (((3 2))) (VECTOR 2 3) NIL) 
(:EXX
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (3 2)) (:FN #\SUBSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (IF AXES
              (RE-ENCLOSE OMEGA
                          (EACH
                           (LAMBDA (AXEL)
                             (- AXEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (FIRST AXES)))
              (IF (LOOP FOR DIM IN (DIMS OMEGA)
                        ALWAYS (= 1 DIM))
                  OMEGA
                  (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           "GRAYGOLDBLUESILKWOOLYARN" (VECTOR 2 3 4)))
      (LIST 2 3)))
 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      ARRAY (expected: #(#2A((#\G #\R #\A #\Y)
                                             (#\G #\O #\L #\D)
                                             (#\B #\L #\U #\E))
                                         #2A((#\S #\I #\L #\K)
                                             (#\W #\O #\O #\L)
                                             (#\Y #\A #\R #\N))))[0m

(:NXT ""
 (("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (3 1)) (:FN #\SUBSET_OF)))) 
"" 
(:CLOS
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (3 1)) (:FN #\SUBSET_OF))))) 
(:EXX
 ("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (3 1)) (:FN #\SUBSET_OF))
 "GRAYGOLDBLUESILKWOOLYARN"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2 (:AXES (3 1)) (:FN #\SUBSET_OF))) 
(:CLOS (((3 1)))) 
(:EXX (3 1) (VECTOR 1 3) NIL) 
(:EXX (((3 1))) (VECTOR 1 3) NIL) 
(:EXX
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (3 1)) (:FN #\SUBSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (IF AXES
              (RE-ENCLOSE OMEGA
                          (EACH
                           (LAMBDA (AXEL)
                             (- AXEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (FIRST AXES)))
              (IF (LOOP FOR DIM IN (DIMS OMEGA)
                        ALWAYS (= 1 DIM))
                  OMEGA
                  (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           "GRAYGOLDBLUESILKWOOLYARN" (VECTOR 2 3 4)))
      (LIST 1 3)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      ARRAY (expected: #(#2A((#\G #\R #\A #\Y) (#\S #\I #\L #\K))
                                         #2A((#\G #\O #\L #\D) (#\W #\O #\O #\L))
                                         #2A((#\B #\L #\U #\E) (#\Y #\A #\R #\N))))[0m

(:NXT ""
 (("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:AXES (2 1)) (:FN #\SUBSET_OF)))) 
"" 
(:CLOS
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (2 1)) (:FN #\SUBSET_OF))))) 
(:EXX
 ("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:AXES (2 1)) (:FN #\SUBSET_OF))
 "GRAYGOLDBLUESILKWOOLYARN"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2 (:AXES (2 1)) (:FN #\SUBSET_OF))) 
(:CLOS (((2 1)))) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:EXX (((2 1))) (VECTOR 1 2) NIL) 
(:EXX
 ((("GRAYGOLDBLUESILKWOOLYARN" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
    (:AXES (2 1)) (:FN #\SUBSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (IF AXES
              (RE-ENCLOSE OMEGA
                          (EACH
                           (LAMBDA (AXEL)
                             (- AXEL (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (FIRST AXES)))
              (IF (LOOP FOR DIM IN (DIMS OMEGA)
                        ALWAYS (= 1 DIM))
                  OMEGA
                  (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           "GRAYGOLDBLUESILKWOOLYARN" (VECTOR 2 3 4)))
      (LIST 1 2)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      ARRAY (expected: #(#2A((#\G #\G #\B) (#\S #\W #\Y))
                                         #2A((#\R #\O #\L) (#\I #\O #\A))
                                         #2A((#\A #\L #\U) (#\L #\O #\R))
                                         #2A((#\Y #\D #\E) (#\K #\L #\N))))[0m

(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\SUBSET_OF) 3 3 3 3 2 2 2 1 1))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\SUBSET_OF) 3 3 3 3 2 2 2 1 1)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\SUBSET_OF) 3 3 3 3 2 2 2 1 1)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\SUBSET_OF) 3 3 3 3 2 2 2 1 1)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\SUBSET_OF) 3 3 3 3 2 2 2 1 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (IF (/= (LENGTH ALPHA) (LENGTH OMEGA))
              (ERROR "Length mismatch.")
              (LET ((OUTPUT NIL) (ACCUMULATOR NIL) (PARTITION-INDEX 0))
                (DOTIMES (INDEX (LENGTH ALPHA))
                  (IF (AND (< 0 INDEX) (< PARTITION-INDEX (AREF ALPHA INDEX)))
                      (PROGN
                       (SETQ OUTPUT
                               (CONS
                                (MAKE-ARRAY (LIST (LENGTH ACCUMULATOR))
                                            :INITIAL-CONTENTS
                                            (REVERSE ACCUMULATOR))
                                OUTPUT))
                       (SETQ ACCUMULATOR NIL)))
                  (SETQ PARTITION-INDEX (AREF ALPHA INDEX))
                  (IF (< 0 (AREF ALPHA INDEX))
                      (SETQ ACCUMULATOR
                              (CONS (AREF OMEGA INDEX) ACCUMULATOR))))
                (IF ACCUMULATOR
                    (SETQ OUTPUT
                            (CONS
                             (MAKE-ARRAY (LIST (LENGTH ACCUMULATOR))
                                         :INITIAL-CONTENTS
                                         (REVERSE ACCUMULATOR))
                             OUTPUT)))
                (MAKE-ARRAY (LIST (LENGTH OUTPUT)) :INITIAL-CONTENTS
                            (REVERSE OUTPUT)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA)
               (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                           (IOTA OMEGA :START
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
           (IF (ARRAYP (VECTOR 9))
               (DISCLOSE (VECTOR 9))
               (VECTOR 9))))
      (VECTOR 1 1 2 2 2 3 3 3 3)))
 NIL) 
  [32m✓ [90m#(#(1 2) #(3 4 5) #(6 7 8 9)) is expected to be #(#(1 2) #(3 4 5) #(6 7 8 9))[0m 
[0m

[⍧] Partitioned Enclose
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
   (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 0 0 1 1 0 0 1 0))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
    (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 0 0 1 1 0 0 1 0)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
  (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 0 0 1 1 0 0 1 0)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
  (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 0 0 1 1 0 0 1 0)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
    (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 0 0 1 1 0 0 1 0)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (PARTITIONED-ENCLOSE ALPHA OMEGA
                               (IF AXES
                                   (- (RANK OMEGA)
                                      (- (AREF (FIRST AXES) 0)
                                         (1-
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM)))))
                               0))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA)
               (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                           (IOTA OMEGA :START
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
           (IF (ARRAYP (VECTOR 9))
               (DISCLOSE (VECTOR 9))
               (VECTOR 9))))
      (VECTOR 0 1 0 0 1 1 0 0 0) (LIST)))
 NIL) 
  [32m✓ [90m#(#(2 3 4) #(5) #(6 7 8 9)) is expected to be #(#(2 3 4) #(5) #(6 7 8 9))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
   (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 0 0 1 1 0 0 1 0))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
    (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 0 0 1 1 0 0 1 0)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
  (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 0 0 1 1 0 0 1 0)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
  (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 0 0 1 1 0 0 1 0)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
    (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 0 0 1 1 0 0 1 0)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (PARTITIONED-ENCLOSE ALPHA OMEGA
                               (IF AXES
                                   (- (RANK OMEGA)
                                      (- (AREF (FIRST AXES) 0)
                                         (1-
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM)))))
                               0))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 4 8)))
      (VECTOR 0 1 0 0 1 1 0 0 0) (LIST)))
 NIL) 
  [32m✓ [90m#(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5))) is expected to be #(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5)))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
   (:AXES (1)) (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 1 0 1 0))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
    (:AXES (1)) (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 1 0 1 0)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
  (:AXES (1)) (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 1 0 1 0)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
  (:AXES (1)) (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 1 0 1 0)) 
(:CLOS (((1)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((1))) (VECTOR 1) NIL) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
    (:AXES (1)) (:FN #\APL_FUNCTIONAL_SYMBOL_LEFT_SHOE_STILE) 0 1 0 1 0)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (PARTITIONED-ENCLOSE ALPHA OMEGA
                               (IF AXES
                                   (- (RANK OMEGA)
                                      (- (AREF (FIRST AXES) 0)
                                         (1-
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM)))))
                               0))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 4 8)))
      (VECTOR 0 1 0 1 0) (LIST 1)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #(#2A((9 1 2 3 4 5 6 7) (8 9 1 2 3 4 5 6))
                                          #2A((7 8 9 1 2 3 4 5))))[0m


[⊃] Mix / Pick
(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) 
"" 
(:CLOS (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))) 
(:CLOS (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:CLOS (((2 1)) ((1)) (:FN #\SUPERSET_OF))) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:CLOS (((1)) (:FN #\SUPERSET_OF))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))
 (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) ((:FN #\SUPERSET_OF))) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (MIX-ARRAYS
           (IF AXES
               (CEILING
                (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
               0)
           OMEGA))
      (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST)))
 NIL) 
  [32m✓ [90m#2A((1 0 0) (1 2 0) (1 2 3)) is expected to be #2A((1 0 0) (1 2 0) (1 2 3))[0m 
[0m
(:NXT "" ((((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)))) 
"" 
(:CLOS (((((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF))))) 
(:CLOS (((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF))) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:CLOS (((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF))) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:CLOS (((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF))
 (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3))
 ((:AXES (0.5)) (:FN #\SUPERSET_OF))) 
(:CLOS (((0.5)))) 
(:EXX (0.5) (VECTOR 0.5) NIL) 
(:EXX (((0.5))) (VECTOR 0.5) NIL) 
(:EXX (((((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (MIX-ARRAYS
           (IF AXES
               (CEILING
                (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
               0)
           OMEGA))
      (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))
 NIL) 
  [31m× Raised an error The value
                      0.5
                    is not of type
                      VECTOR (expected: #2A((1 1 1) (0 2 2) (0 0 3)))[0m

(:NXT ""
 ((((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
     4))
   ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
     2))
   (:FN #\SUPERSET_OF)))) 
"" 
(:CLOS
 (((((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
      4))
    ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
      2))
    (:FN #\SUPERSET_OF))))) 
(:CLOS
 (((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
    4))
  ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2))
  (:FN #\SUPERSET_OF))) 
(:EXX
 (8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 4)
 (VECTOR 8)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 4)) 
(:CLOS
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2))
  (:FN #\SUPERSET_OF))) 
(:EXX
 (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2)
 (VECTOR 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2)) 
(:EXX
 (((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
    4))
  ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2))
  (:FN #\SUPERSET_OF))
 (VECTOR
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 5))
                (DISCLOSE (VECTOR 5))
                (VECTOR 5))))
       (VECTOR 2 3)))
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 8))
                (DISCLOSE (VECTOR 8))
                (VECTOR 8))))
       (VECTOR 4 2))))
 ((:FN #\SUPERSET_OF))) 
(:EXX
 (((((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
      4))
    ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
      2))
    (:FN #\SUPERSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (MIX-ARRAYS
           (IF AXES
               (CEILING
                (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
               0)
           OMEGA))
      (VECTOR
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (IF (AND)
                (FUNCALL
                 #'(LAMBDA (OMEGA)
                     (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                 (IOTA OMEGA :START
                                       (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                 (IF (ARRAYP (VECTOR 5))
                     (DISCLOSE (VECTOR 5))
                     (VECTOR 5))))
            (VECTOR 2 3)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (IF (AND)
                (FUNCALL
                 #'(LAMBDA (OMEGA)
                     (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                 (IOTA OMEGA :START
                                       (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                 (IF (ARRAYP (VECTOR 8))
                     (DISCLOSE (VECTOR 8))
                     (VECTOR 8))))
            (VECTOR 4 2))))
      (LIST)))
 NIL) 
  [32m✓ [90m#3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0))) is expected to be #3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0)))[0m 
[0m
(:NXT ""
 ((((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
     4))
   ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
     2))
   (:AXES (0.5)) (:FN #\SUPERSET_OF)))) 
"" 
(:CLOS
 (((((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
      4))
    ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
      2))
    (:AXES (0.5)) (:FN #\SUPERSET_OF))))) 
(:CLOS
 (((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
    4))
  ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2))
  (:AXES (0.5)) (:FN #\SUPERSET_OF))) 
(:EXX
 (8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 4)
 (VECTOR 8)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 4)) 
(:CLOS
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2))
  (:AXES (0.5)) (:FN #\SUPERSET_OF))) 
(:EXX
 (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2)
 (VECTOR 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2)) 
(:EXX
 (((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
    4))
  ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2))
  (:AXES (0.5)) (:FN #\SUPERSET_OF))
 (VECTOR
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 5))
                (DISCLOSE (VECTOR 5))
                (VECTOR 5))))
       (VECTOR 2 3)))
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 8))
                (DISCLOSE (VECTOR 8))
                (VECTOR 8))))
       (VECTOR 4 2))))
 ((:AXES (0.5)) (:FN #\SUPERSET_OF))) 
(:CLOS (((0.5)))) 
(:EXX (0.5) (VECTOR 0.5) NIL) 
(:EXX (((0.5))) (VECTOR 0.5) NIL) 
(:EXX
 (((((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
      4))
    ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
      2))
    (:AXES (0.5)) (:FN #\SUPERSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (MIX-ARRAYS
           (IF AXES
               (CEILING
                (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
               0)
           OMEGA))
      (VECTOR
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (IF (AND)
                (FUNCALL
                 #'(LAMBDA (OMEGA)
                     (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                 (IOTA OMEGA :START
                                       (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                 (IF (ARRAYP (VECTOR 5))
                     (DISCLOSE (VECTOR 5))
                     (VECTOR 5))))
            (VECTOR 2 3)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (IF (AND)
                (FUNCALL
                 #'(LAMBDA (OMEGA)
                     (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                 (IOTA OMEGA :START
                                       (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                 (IF (ARRAYP (VECTOR 8))
                     (DISCLOSE (VECTOR 8))
                     (VECTOR 8))))
            (VECTOR 4 2))))
      (LIST 0.5)))
 NIL) 
  [31m× Raised an error The value
                      0.5
                    is not of type
                      VECTOR (expected: #3A(((1 4 0 0) (1 3 5 7))
                                            ((2 5 0 0) (2 4 6 8))
                                            ((3 1 0 0) (0 0 0 0))))[0m

(:NXT ""
 ((((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
     4))
   ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
     2))
   (:AXES (1.5)) (:FN #\SUPERSET_OF)))) 
"" 
(:CLOS
 (((((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
      4))
    ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
      2))
    (:AXES (1.5)) (:FN #\SUPERSET_OF))))) 
(:CLOS
 (((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
    4))
  ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2))
  (:AXES (1.5)) (:FN #\SUPERSET_OF))) 
(:EXX
 (8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 4)
 (VECTOR 8)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 4)) 
(:CLOS
 (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2))
  (:AXES (1.5)) (:FN #\SUPERSET_OF))) 
(:EXX
 (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2)
 (VECTOR 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2)) 
(:EXX
 (((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
    4))
  ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
    2))
  (:AXES (1.5)) (:FN #\SUPERSET_OF))
 (VECTOR
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 5))
                (DISCLOSE (VECTOR 5))
                (VECTOR 5))))
       (VECTOR 2 3)))
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 8))
                (DISCLOSE (VECTOR 8))
                (VECTOR 8))))
       (VECTOR 4 2))))
 ((:AXES (1.5)) (:FN #\SUPERSET_OF))) 
(:CLOS (((1.5)))) 
(:EXX (1.5) (VECTOR 1.5) NIL) 
(:EXX (((1.5))) (VECTOR 1.5) NIL) 
(:EXX
 (((((8 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2
      4))
    ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3
      2))
    (:AXES (1.5)) (:FN #\SUPERSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (MIX-ARRAYS
           (IF AXES
               (CEILING
                (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
               0)
           OMEGA))
      (VECTOR
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (IF (AND)
                (FUNCALL
                 #'(LAMBDA (OMEGA)
                     (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                 (IOTA OMEGA :START
                                       (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                 (IF (ARRAYP (VECTOR 5))
                     (DISCLOSE (VECTOR 5))
                     (VECTOR 5))))
            (VECTOR 2 3)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (IF (AND)
                (FUNCALL
                 #'(LAMBDA (OMEGA)
                     (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                 (IOTA OMEGA :START
                                       (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                 (IF (ARRAYP (VECTOR 8))
                     (DISCLOSE (VECTOR 8))
                     (VECTOR 8))))
            (VECTOR 4 2))))
      (LIST 1.5)))
 NIL) 
  [31m× Raised an error The value
                      1.5
                    is not of type
                      VECTOR (expected: #3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0))
                                            ((1 2 0) (3 4 0) (5 6 0) (7 8 0))))[0m

(:NXT ""
 ((((3 2 1)) ((4 3)) ((2 1)) ((1)) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2
   (:FN #\SUPERSET_OF)))) 
"" 
(:CLOS
 (((((3 2 1)) ((4 3)) ((2 1)) ((1)) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2
    (:FN #\SUPERSET_OF))))) 
(:CLOS
 (((3 2 1)) ((4 3)) ((2 1)) ((1)) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2
  (:FN #\SUPERSET_OF))) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:CLOS
 (((4 3)) ((2 1)) ((1)) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2
  (:FN #\SUPERSET_OF))) 
(:EXX (4 3) (VECTOR 3 4) NIL) 
(:CLOS
 (((2 1)) ((1)) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2 (:FN #\SUPERSET_OF))) 
(:EXX (2 1) (VECTOR 1 2) NIL) 
(:CLOS (((1)) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2 (:FN #\SUPERSET_OF))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX
 (((3 2 1)) ((4 3)) ((2 1)) ((1)) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2
  (:FN #\SUPERSET_OF))
 (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 3 4) (VECTOR 1 2 3))
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2 (:FN #\SUPERSET_OF))) 
(:EXX
 (((((3 2 1)) ((4 3)) ((2 1)) ((1)) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2 2
    (:FN #\SUPERSET_OF))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (MIX-ARRAYS
           (IF AXES
               (CEILING
                (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
               0)
           OMEGA))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 3 4) (VECTOR 1 2 3))
           (VECTOR 2 2 2)))
      (LIST)))
 NIL) 
  [32m✓ [90m#4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3)))) is expected to be #4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))))[0m 
[0m
(:NXT "" ((((9 8 7)) ((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) 2))) 
"" 
(:CLOS (((((9 8 7)) ((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) 2)))) 
(:CLOS (((9 8 7)) ((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) 2)) 
(:EXX (9 8 7) (VECTOR 7 8 9) NIL) 
(:CLOS (((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) 2)) 
(:EXX (6 5 4) (VECTOR 4 5 6) NIL) 
(:CLOS (((3 2 1)) (:FN #\SUPERSET_OF) 2)) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (((9 8 7)) ((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) 2)
 (VECTOR (VECTOR 1 2 3) (VECTOR 4 5 6) (VECTOR 7 8 9)) ((:FN #\SUPERSET_OF) 2)) 
(:EXX (((((9 8 7)) ((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) 2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (LABELS ((LAYER-INDEX (OBJECT INDICES)
                     (IF INDICES
                         (LAYER-INDEX
                          (AREF OBJECT
                                (- (FIRST INDICES)
                                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                          (REST INDICES))
                         OBJECT)))
            (LET ((FOUND (LAYER-INDEX OMEGA (ARRAY-TO-LIST ALPHA))))
              (IF (ARRAYP FOUND)
                  FOUND
                  (MAKE-ARRAY (LIST 1) :ELEMENT-TYPE (ELEMENT-TYPE OMEGA)
                              :INITIAL-ELEMENT FOUND)))))
      (VECTOR (VECTOR 1 2 3) (VECTOR 4 5 6) (VECTOR 7 8 9)) (VECTOR 2)))
 NIL) 
  [32m✓ [90m#(4 5 6) is expected to be #(4 5 6)[0m 
[0m
(:NXT "" ((((9 8 7)) ((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) ((2 2))))) 
"" 
(:CLOS (((((9 8 7)) ((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) ((2 2)))))) 
(:CLOS (((9 8 7)) ((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) ((2 2)))) 
(:EXX (9 8 7) (VECTOR 7 8 9) NIL) 
(:CLOS (((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) ((2 2)))) 
(:EXX (6 5 4) (VECTOR 4 5 6) NIL) 
(:CLOS (((3 2 1)) (:FN #\SUPERSET_OF) ((2 2)))) 
(:EXX (3 2 1) (VECTOR 1 2 3) NIL) 
(:EXX (((9 8 7)) ((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) ((2 2)))
 (VECTOR (VECTOR 1 2 3) (VECTOR 4 5 6) (VECTOR 7 8 9))
 ((:FN #\SUPERSET_OF) ((2 2)))) 
(:CLOS (((2 2)))) 
(:EXX (2 2) (VECTOR 2 2) NIL) 
(:EXX (((((9 8 7)) ((6 5 4)) ((3 2 1)) (:FN #\SUPERSET_OF) ((2 2)))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (LABELS ((LAYER-INDEX (OBJECT INDICES)
                     (IF INDICES
                         (LAYER-INDEX
                          (AREF OBJECT
                                (- (FIRST INDICES)
                                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                          (REST INDICES))
                         OBJECT)))
            (LET ((FOUND (LAYER-INDEX OMEGA (ARRAY-TO-LIST ALPHA))))
              (IF (ARRAYP FOUND)
                  FOUND
                  (MAKE-ARRAY (LIST 1) :ELEMENT-TYPE (ELEMENT-TYPE OMEGA)
                              :INITIAL-ELEMENT FOUND)))))
      (VECTOR (VECTOR 1 2 3) (VECTOR 4 5 6) (VECTOR 7 8 9)) (VECTOR 2 2)))
 NIL) 
  [32m✓ [90m5 is expected to be 5[0m 
[0m

[∪] Unique / Union
(:NXT "" ((12 11 8 7 11 10 9 8 2 1 5 4 3 2 1 (:FN #\UNION)))) 
"" 
(:CLOS (((12 11 8 7 11 10 9 8 2 1 5 4 3 2 1 (:FN #\UNION))))) 
(:EXX (12 11 8 7 11 10 9 8 2 1 5 4 3 2 1 (:FN #\UNION))
 (VECTOR 1 2 3 4 5 1 2 8 9 10 11 7 8 11 12) ((:FN #\UNION))) 
(:EXX (((12 11 8 7 11 10 9 8 2 1 5 4 3 2 1 (:FN #\UNION))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (IF (NOT (VECTORP OMEGA))
              (ERROR "Argument must be a vector.")
              (LET ((UNIQUES NIL))
                (DOTIMES (INDEX (LENGTH OMEGA))
                  (IF (NOT
                       (FIND (AREF OMEGA INDEX) UNIQUES :TEST #'ARRAY-COMPARE))
                      (SETQ UNIQUES (CONS (AREF OMEGA INDEX) UNIQUES))))
                (MAKE-ARRAY (LIST (LENGTH UNIQUES)) :ELEMENT-TYPE
                            (ELEMENT-TYPE OMEGA) :INITIAL-CONTENTS
                            (REVERSE UNIQUES)))))
      (VECTOR 1 2 3 4 5 1 2 8 9 10 11 7 8 11 12)))
 NIL) 
  [32m✓ [90m#(1 2 3 4 5 8 9 10 11 7 12) is expected to be #(1 2 3 4 5 8 9 10 11 7 12)[0m 
[0m
(:NXT "" (("MISSISSIPPI" (:FN #\UNION)))) 
"" 
(:CLOS ((("MISSISSIPPI" (:FN #\UNION))))) 
(:EXX ("MISSISSIPPI" (:FN #\UNION)) "MISSISSIPPI" ((:FN #\UNION))) 
(:EXX ((("MISSISSIPPI" (:FN #\UNION))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (IF (NOT (VECTORP OMEGA))
              (ERROR "Argument must be a vector.")
              (LET ((UNIQUES NIL))
                (DOTIMES (INDEX (LENGTH OMEGA))
                  (IF (NOT
                       (FIND (AREF OMEGA INDEX) UNIQUES :TEST #'ARRAY-COMPARE))
                      (SETQ UNIQUES (CONS (AREF OMEGA INDEX) UNIQUES))))
                (MAKE-ARRAY (LIST (LENGTH UNIQUES)) :ELEMENT-TYPE
                            (ELEMENT-TYPE OMEGA) :INITIAL-CONTENTS
                            (REVERSE UNIQUES)))))
      "MISSISSIPPI"))
 NIL) 
  [32m✓ [90m"MISP" is expected to be "MISP"[0m 
[0m
(:NXT "" ((3 8 10 5 4 9 (:FN #\UNION) 11 18 14 10 3))) 
"" 
(:CLOS (((3 8 10 5 4 9 (:FN #\UNION) 11 18 14 10 3)))) 
(:EXX (3 8 10 5 4 9 (:FN #\UNION) 11 18 14 10 3) (VECTOR 9 4 5 10 8 3)
 ((:FN #\UNION) 11 18 14 10 3)) 
(:EXX (((3 8 10 5 4 9 (:FN #\UNION) 11 18 14 10 3)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (IF (OR (NOT (VECTORP ALPHA)) (NOT (VECTORP OMEGA)))
              (ERROR "Arguments must be vectors.")
              (LET ((UNIQUES NIL)
                    (IS-STRING
                     (AND (EQL 'CHARACTER (ELEMENT-TYPE ALPHA))
                          (EQL 'CHARACTER (ELEMENT-TYPE OMEGA)))))
                (DOTIMES (INDEX (LENGTH OMEGA))
                  (IF (NOT
                       (FIND (AREF OMEGA INDEX) ALPHA :TEST #'ARRAY-COMPARE))
                      (SETQ UNIQUES (CONS (AREF OMEGA INDEX) UNIQUES))))
                (CONCATENATE
                 (IF IS-STRING
                     'STRING
                     'VECTOR)
                 ALPHA
                 (MAKE-ARRAY (LIST (LENGTH UNIQUES)) :ELEMENT-TYPE
                             (IF IS-STRING
                                 'CHARACTER
                                 T)
                             :INITIAL-CONTENTS (REVERSE UNIQUES))))))
      (VECTOR 9 4 5 10 8 3) (VECTOR 3 10 14 18 11)))
 NIL) 
  [32m✓ [90m#(3 10 14 18 11 9 4 5 8) is expected to be #(3 10 14 18 11 9 4 5 8)[0m 
[0m
(:NXT "" (("SABER" (:FN #\UNION) "STEEL"))) 
"" 
(:CLOS ((("SABER" (:FN #\UNION) "STEEL")))) 
(:EXX ("SABER" (:FN #\UNION) "STEEL") "SABER" ((:FN #\UNION) "STEEL")) 
(:EXX ((("SABER" (:FN #\UNION) "STEEL")))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (IF (OR (NOT (VECTORP ALPHA)) (NOT (VECTORP OMEGA)))
              (ERROR "Arguments must be vectors.")
              (LET ((UNIQUES NIL)
                    (IS-STRING
                     (AND (EQL 'CHARACTER (ELEMENT-TYPE ALPHA))
                          (EQL 'CHARACTER (ELEMENT-TYPE OMEGA)))))
                (DOTIMES (INDEX (LENGTH OMEGA))
                  (IF (NOT
                       (FIND (AREF OMEGA INDEX) ALPHA :TEST #'ARRAY-COMPARE))
                      (SETQ UNIQUES (CONS (AREF OMEGA INDEX) UNIQUES))))
                (CONCATENATE
                 (IF IS-STRING
                     'STRING
                     'VECTOR)
                 ALPHA
                 (MAKE-ARRAY (LIST (LENGTH UNIQUES)) :ELEMENT-TYPE
                             (IF IS-STRING
                                 'CHARACTER
                                 T)
                             :INITIAL-CONTENTS (REVERSE UNIQUES))))))
      "SABER" "STEEL"))
 NIL) 
  [32m✓ [90m"STEELABR" is expected to be "STEELABR"[0m 
[0m
(:NXT "" (("JUNE" "MAY" (:FN #\UNION) "MAY" "APRIL"))) 
"" 
(:CLOS ((("JUNE" "MAY" (:FN #\UNION) "MAY" "APRIL")))) 
(:EXX ("JUNE" "MAY" (:FN #\UNION) "MAY" "APRIL") (VECTOR "MAY" "JUNE")
 ((:FN #\UNION) "MAY" "APRIL")) 
(:EXX ((("JUNE" "MAY" (:FN #\UNION) "MAY" "APRIL")))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (IF (OR (NOT (VECTORP ALPHA)) (NOT (VECTORP OMEGA)))
              (ERROR "Arguments must be vectors.")
              (LET ((UNIQUES NIL)
                    (IS-STRING
                     (AND (EQL 'CHARACTER (ELEMENT-TYPE ALPHA))
                          (EQL 'CHARACTER (ELEMENT-TYPE OMEGA)))))
                (DOTIMES (INDEX (LENGTH OMEGA))
                  (IF (NOT
                       (FIND (AREF OMEGA INDEX) ALPHA :TEST #'ARRAY-COMPARE))
                      (SETQ UNIQUES (CONS (AREF OMEGA INDEX) UNIQUES))))
                (CONCATENATE
                 (IF IS-STRING
                     'STRING
                     'VECTOR)
                 ALPHA
                 (MAKE-ARRAY (LIST (LENGTH UNIQUES)) :ELEMENT-TYPE
                             (IF IS-STRING
                                 'CHARACTER
                                 T)
                             :INITIAL-CONTENTS (REVERSE UNIQUES))))))
      (VECTOR "MAY" "JUNE") (VECTOR "APRIL" "MAY")))
 NIL) 
  [32m✓ [90m#("APRIL" "MAY" "JUNE") is expected to be #("APRIL" "MAY" "JUNE")[0m 
[0m

[∩] Intersection
(:NXT "" (("LATER" (:FN #\INTERSECTION) "MIXTURE"))) 
"" 
(:CLOS ((("LATER" (:FN #\INTERSECTION) "MIXTURE")))) 
(:EXX ("LATER" (:FN #\INTERSECTION) "MIXTURE") "LATER"
 ((:FN #\INTERSECTION) "MIXTURE")) 
(:EXX ((("LATER" (:FN #\INTERSECTION) "MIXTURE")))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (IF (OR (NOT (VECTORP ALPHA)) (NOT (VECTORP OMEGA)))
              (ERROR "Arguments must be vectors.")
              (LET ((MATCHES NIL)
                    (IS-STRING
                     (AND (EQL 'CHARACTER (ELEMENT-TYPE ALPHA))
                          (EQL 'CHARACTER (ELEMENT-TYPE OMEGA)))))
                (DOTIMES (INDEX (LENGTH ALPHA))
                  (IF (FIND (AREF ALPHA INDEX) OMEGA :TEST #'ARRAY-COMPARE)
                      (SETQ MATCHES (CONS (AREF ALPHA INDEX) MATCHES))))
                (MAKE-ARRAY (LIST (LENGTH MATCHES)) :ELEMENT-TYPE
                            (IF IS-STRING
                                'CHARACTER
                                T)
                            :INITIAL-CONTENTS (REVERSE MATCHES)))))
      "LATER" "MIXTURE"))
 NIL) 
  [32m✓ [90m"TRE" is expected to be "TRE"[0m 
[0m
(:NXT "" (("SABER" (:FN #\INTERSECTION) "STEEL"))) 
"" 
(:CLOS ((("SABER" (:FN #\INTERSECTION) "STEEL")))) 
(:EXX ("SABER" (:FN #\INTERSECTION) "STEEL") "SABER"
 ((:FN #\INTERSECTION) "STEEL")) 
(:EXX ((("SABER" (:FN #\INTERSECTION) "STEEL")))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (IF (OR (NOT (VECTORP ALPHA)) (NOT (VECTORP OMEGA)))
              (ERROR "Arguments must be vectors.")
              (LET ((MATCHES NIL)
                    (IS-STRING
                     (AND (EQL 'CHARACTER (ELEMENT-TYPE ALPHA))
                          (EQL 'CHARACTER (ELEMENT-TYPE OMEGA)))))
                (DOTIMES (INDEX (LENGTH ALPHA))
                  (IF (FIND (AREF ALPHA INDEX) OMEGA :TEST #'ARRAY-COMPARE)
                      (SETQ MATCHES (CONS (AREF ALPHA INDEX) MATCHES))))
                (MAKE-ARRAY (LIST (LENGTH MATCHES)) :ELEMENT-TYPE
                            (IF IS-STRING
                                'CHARACTER
                                T)
                            :INITIAL-CONTENTS (REVERSE MATCHES)))))
      "SABER" "STEEL"))
 NIL) 
  [32m✓ [90m"SEE" is expected to be "SEE"[0m 
[0m
(:NXT "" ((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\INTERSECTION) 8 4 1))) 
"" 
(:CLOS (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\INTERSECTION) 8 4 1)))) 
(:EXX (5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\INTERSECTION) 8 4 1)
 (VECTOR 5) ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\INTERSECTION) 8 4 1)) 
(:EXX (((5 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\INTERSECTION) 8 4 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (IF (OR (NOT (VECTORP ALPHA)) (NOT (VECTORP OMEGA)))
              (ERROR "Arguments must be vectors.")
              (LET ((MATCHES NIL)
                    (IS-STRING
                     (AND (EQL 'CHARACTER (ELEMENT-TYPE ALPHA))
                          (EQL 'CHARACTER (ELEMENT-TYPE OMEGA)))))
                (DOTIMES (INDEX (LENGTH ALPHA))
                  (IF (FIND (AREF ALPHA INDEX) OMEGA :TEST #'ARRAY-COMPARE)
                      (SETQ MATCHES (CONS (AREF ALPHA INDEX) MATCHES))))
                (MAKE-ARRAY (LIST (LENGTH MATCHES)) :ELEMENT-TYPE
                            (IF IS-STRING
                                'CHARACTER
                                T)
                            :INITIAL-CONTENTS (REVERSE MATCHES)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA)
               (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                           (IOTA OMEGA :START
                                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
           (IF (ARRAYP (VECTOR 5))
               (DISCLOSE (VECTOR 5))
               (VECTOR 5))))
      (VECTOR 1 4 8)))
 NIL) 
  [32m✓ [90m#(1 4) is expected to be #(1 4)[0m 
[0m

[⌽] Reverse / Rotate
(:NXT "" ((5 4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE)))) 
"" 
(:CLOS (((5 4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE))))) 
(:EXX (5 4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE)) (VECTOR 1 2 3 4 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE))) 
(:EXX (((5 4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (IF (VECTORP OMEGA)
              (LET ((NEW-ARRAY (COPY-ARRAY OMEGA)))
                (FUNCALL (MAKE-ROTATOR) NEW-ARRAY)
                NEW-ARRAY)
              (IF (ARRAYP OMEGA)
                  (APPLY-MARGINAL (MAKE-ROTATOR) OMEGA
                                  (IF AXES
                                      (1- (AREF (FIRST AXES) 0)))
                                  (1- (RANK OMEGA))))))
      (VECTOR 1 2 3 4 5) (LIST)))
 NIL) 
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE))) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (IF (VECTORP OMEGA)
              (LET ((NEW-ARRAY (COPY-ARRAY OMEGA)))
                (FUNCALL (MAKE-ROTATOR) NEW-ARRAY)
                NEW-ARRAY)
              (IF (ARRAYP OMEGA)
                  (APPLY-MARGINAL (MAKE-ROTATOR) OMEGA
                                  (IF AXES
                                      (1- (AREF (FIRST AXES) 0)))
                                  (1- (RANK OMEGA))))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (LIST)))
 NIL) 
  [32m✓ [90m#2A((4 3 2 1) (8 7 6 5) (3 2 1 9)) is expected to be #2A((4 3 2 1) (8 7 6 5) (3 2 1 9))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE) 2))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE) 2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE) 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE) 2)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE) 2)))
 (IF (AND (IS-SINGLETON (VECTOR 2)))
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (VECTORP OMEGA)
              (LET ((NEW-ARRAY (COPY-ARRAY OMEGA)))
                (FUNCALL (MAKE-ROTATOR ALPHA) NEW-ARRAY)
                NEW-ARRAY)
              (IF (ARRAYP OMEGA)
                  (APPLY-MARGINAL (MAKE-ROTATOR ALPHA) OMEGA
                                  (IF AXES
                                      (1- (AREF (FIRST AXES) 0)))
                                  (1- (RANK OMEGA))))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (DISCLOSE (VECTOR 2)) (LIST)))
 NIL) 
  [32m✓ [90m#2A((3 4 1 2) (7 8 5 6) (2 3 9 1)) is expected to be #2A((3 4 1 2) (7 8 5 6) (2 3 9 1))[0m 
[0m

[⊖] Reverse First / Rotate First
(:NXT "" ((5 4 3 2 1 (:FN #\CIRCLED_MINUS)))) 
"" 
(:CLOS (((5 4 3 2 1 (:FN #\CIRCLED_MINUS))))) 
(:EXX (5 4 3 2 1 (:FN #\CIRCLED_MINUS)) (VECTOR 1 2 3 4 5)
 ((:FN #\CIRCLED_MINUS))) 
(:EXX (((5 4 3 2 1 (:FN #\CIRCLED_MINUS))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (IF (VECTORP OMEGA)
              (LET ((NEW-ARRAY (COPY-ARRAY OMEGA)))
                (FUNCALL (MAKE-ROTATOR) NEW-ARRAY)
                NEW-ARRAY)
              (IF (ARRAYP OMEGA)
                  (APPLY-MARGINAL (MAKE-ROTATOR) OMEGA
                                  (IF AXES
                                      (1- (AREF (FIRST AXES) 0)))
                                  0))))
      (VECTOR 1 2 3 4 5) (LIST)))
 NIL) 
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\CIRCLED_MINUS)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\CIRCLED_MINUS))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\CIRCLED_MINUS))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\CIRCLED_MINUS))) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\CIRCLED_MINUS))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA &OPTIONAL AXES)
          (IF (VECTORP OMEGA)
              (LET ((NEW-ARRAY (COPY-ARRAY OMEGA)))
                (FUNCALL (MAKE-ROTATOR) NEW-ARRAY)
                NEW-ARRAY)
              (IF (ARRAYP OMEGA)
                  (APPLY-MARGINAL (MAKE-ROTATOR) OMEGA
                                  (IF AXES
                                      (1- (AREF (FIRST AXES) 0)))
                                  0))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (LIST)))
 NIL) 
  [32m✓ [90m#2A((9 1 2 3) (5 6 7 8) (1 2 3 4)) is expected to be #2A((9 1 2 3) (5 6 7 8) (1 2 3 4))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:FN #\CIRCLED_MINUS) 1))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\CIRCLED_MINUS) 1)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\CIRCLED_MINUS) 1)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:FN #\CIRCLED_MINUS) 1)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:FN #\CIRCLED_MINUS) 1)))
 (IF (AND (IS-SINGLETON (VECTOR 1)))
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
          (IF (VECTORP OMEGA)
              (LET ((NEW-ARRAY (COPY-ARRAY OMEGA)))
                (FUNCALL (MAKE-ROTATOR ALPHA) NEW-ARRAY)
                NEW-ARRAY)
              (IF (ARRAYP OMEGA)
                  (APPLY-MARGINAL (MAKE-ROTATOR ALPHA) OMEGA
                                  (IF AXES
                                      (1- (AREF (FIRST AXES) 0)))
                                  0))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 3 4)))
      (DISCLOSE (VECTOR 1)) (LIST)))
 NIL) 
  [32m✓ [90m#2A((5 6 7 8) (9 1 2 3) (1 2 3 4)) is expected to be #2A((5 6 7 8) (9 1 2 3) (1 2 3 4))[0m 
[0m

[⍉] Transpose / Permute
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_BACKSLASH)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_BACKSLASH))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_BACKSLASH))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_BACKSLASH))) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_BACKSLASH))))
 (IF (AND)
     (FUNCALL #'(LAMBDA (OMEGA) (PERMUTE (REVERSE (IOTA (RANK OMEGA))) OMEGA))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA ALPHA)
                       (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA)
                            (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                        (IOTA OMEGA :START
                                              (OF-STATE *APRIL-IDIOM*
                                                        :COUNT-FROM))))
                        (IF (ARRAYP (VECTOR 9))
                            (DISCLOSE (VECTOR 9))
                            (VECTOR 9))))
                   (VECTOR 2 3 4)))))
 NIL) 
  [32m✓ [90m#3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6))) is expected to be #3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6)))[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_BACKSLASH) 2 3 1))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_BACKSLASH) 2 3 1)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_BACKSLASH) 2 3 1)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_BACKSLASH) 2 3 1)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_BACKSLASH) 2 3 1)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (PERMUTE
           (MAPCAR (LAMBDA (I) (- I (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                   (ARRAY-TO-LIST ALPHA))
           OMEGA))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 9))
                    (DISCLOSE (VECTOR 9))
                    (VECTOR 9))))
           (VECTOR 2 3 4)))
      (VECTOR 1 3 2)))
 NIL) 
  [32m✓ [90m#3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6))) is expected to be #3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6)))[0m 
[0m

[⌹] Matrix Inverse / Matrix Divide
(:NXT "" ((4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE)))) 
"" 
(:CLOS (((4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE))))) 
(:EXX (4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE)) (VECTOR 1 2 3 4)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE))) 
(:EXX (((4 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (IF (AND (= 1 (RANK OMEGA)) (= 1 (LENGTH OMEGA)))
              (/ (DISCLOSE OMEGA))
              (IF (< 2 (RANK OMEGA))
                  (ERROR
                   "Matrix inversion only works on arrays of rank 2 or 1.")
                  (IF (LET ((ODIMS (DIMS OMEGA)))
                        (AND (= 2 (LENGTH ODIMS))
                             (= (FIRST ODIMS) (SECOND ODIMS))))
                      (INVERT-MATRIX OMEGA)
                      (LEFT-INVERT-MATRIX OMEGA)))))
      (VECTOR 1 2 3 4)))
 NIL) 
  [32m✓ [90m#(1/30 1/15 1/10 2/15) is expected to be #(1/30 1/15 1/10 2/15)[0m 
[0m
(:NXT ""
 ((2 8 9 4 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2
   (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE)))) 
"" 
(:CLOS
 (((2 8 9 4 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2
    (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE))))) 
(:EXX
 (2 8 9 4 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE))
 (VECTOR 4 9 8 2)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE))) 
(:EXX
 (((2 8 9 4 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 2
    (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (IF (AND (= 1 (RANK OMEGA)) (= 1 (LENGTH OMEGA)))
              (/ (DISCLOSE OMEGA))
              (IF (< 2 (RANK OMEGA))
                  (ERROR
                   "Matrix inversion only works on arrays of rank 2 or 1.")
                  (IF (LET ((ODIMS (DIMS OMEGA)))
                        (AND (= 2 (LENGTH ODIMS))
                             (= (FIRST ODIMS) (SECOND ODIMS))))
                      (INVERT-MATRIX OMEGA)
                      (LEFT-INVERT-MATRIX OMEGA)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (VECTOR 4 9 8 2) (VECTOR 2 2)))))
 NIL) 
  [32m✓ [90m#2A((-1/32 9/64) (1/8 -1/16)) is expected to be #2A((-1/32 9/64) (1/8 -1/16))[0m 
[0m
(:NXT ""
 ((9 -4 3 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 4
   (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE)))) 
"" 
(:CLOS
 (((9 -4 3 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 4
    (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE))))) 
(:EXX
 (9 -4 3 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 4
  (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE))
 (VECTOR 1 3 -4 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 4
  (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE))) 
(:EXX
 (((9 -4 3 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 4
    (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (IF (AND (= 1 (RANK OMEGA)) (= 1 (LENGTH OMEGA)))
              (/ (DISCLOSE OMEGA))
              (IF (< 2 (RANK OMEGA))
                  (ERROR
                   "Matrix inversion only works on arrays of rank 2 or 1.")
                  (IF (LET ((ODIMS (DIMS OMEGA)))
                        (AND (= 2 (LENGTH ODIMS))
                             (= (FIRST ODIMS) (SECOND ODIMS))))
                      (INVERT-MATRIX OMEGA)
                      (LEFT-INVERT-MATRIX OMEGA)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (VECTOR 1 3 -4 9) (VECTOR 4 2)))))
 NIL) 
  [32m✓ [90m#2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42)) is expected to be #2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42))[0m 
[0m
(:NXT ""
 ((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
   (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE) 79 89 35))) 
"" 
(:CLOS
 (((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE) 79 89 35)))) 
(:EXX
 (5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE) 79 89 35)
 (VECTOR 3 1 4 1 5 9 2 6 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE) 79 89 35)) 
(:EXX
 (((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE) 79 89 35)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (ARRAY-INNER-PRODUCT (INVERT-MATRIX OMEGA) ALPHA
                               (LAMBDA (ARG1 ARG2)
                                 (APPLY-SCALAR-DYADIC #'* ARG1 ARG2))
                               #'+))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (VECTOR 3 1 4 1 5 9 2 6 5) (VECTOR 3 3)))
      (VECTOR 35 89 79)))
 NIL) 
  [32m✓ [90m#(193/90 739/90 229/45) is expected to be #(193/90 739/90 229/45)[0m 
[0m
(:NXT ""
 ((1 1 1 0 1 1 0 0 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
   (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE)
   ((10 9 6 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 3))))) 
"" 
(:CLOS
 (((1 1 1 0 1 1 0 0 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE)
    ((10 9 6 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 3)))))) 
(:EXX
 (1 1 1 0 1 1 0 0 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE)
  ((10 9 6 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 3)))
 (VECTOR 1 0 0 1 1 0 1 1 1)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
  (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE)
  ((10 9 6 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 3)))) 
(:CLOS (((10 9 6 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 3)))) 
(:EXX (10 9 6 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 3)
 (VECTOR 1 2 3 6 9 10) ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 3)) 
(:EXX
 (((1 1 1 0 1 1 0 0 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    (:FN #\APL_FUNCTIONAL_SYMBOL_QUAD_DIVIDE)
    ((10 9 6 3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 2 3)))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (ARRAY-INNER-PRODUCT (INVERT-MATRIX OMEGA) ALPHA
                               (LAMBDA (ARG1 ARG2)
                                 (APPLY-SCALAR-DYADIC #'* ARG1 ARG2))
                               #'+))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (VECTOR 1 0 0 1 1 0 1 1 1) (VECTOR 3 3)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (VECTOR 1 2 3 6 9 10) (VECTOR 3 2)))))
 NIL) 
  [32m✓ [90m#2A((1 2) (2 4) (6 4)) is expected to be #2A((1 2) (2 4) (6 4))[0m 
[0m

[⍋] Grade Up / Grade Up By
(:NXT "" ((2 5 1 9 4 3 8 (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE)))) 
"" 
(:CLOS (((2 5 1 9 4 3 8 (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))))) 
(:EXX (2 5 1 9 4 3 8 (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))
 (VECTOR 8 3 4 9 1 5 2) ((:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))) 
(:EXX (((2 5 1 9 4 3 8 (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (GRADE OMEGA
                 (ALPHA-COMPARE (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR) #'<=)
                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
      (VECTOR 8 3 4 9 1 5 2)))
 NIL) 
  [32m✓ [90m#(5 7 2 3 6 1 4) is expected to be #(5 7 2 3 6 1 4)[0m 
[0m
(:NXT ""
 ((16 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
   (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE)))) 
"" 
(:CLOS
 (((16 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
    (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))))) 
(:EXX
 (16 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
  (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))
 (VECTOR 16)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
  (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))) 
(:EXX
 (((16 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
    (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (GRADE OMEGA
                 (ALPHA-COMPARE (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR) #'<=)
                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 16))
                    (DISCLOSE (VECTOR 16))
                    (VECTOR 16))))
           (VECTOR 5 6)))))
 NIL) 
  [32m✓ [90m#(1 4 2 5 3) is expected to be #(1 4 2 5 3)[0m 
[0m
(:NXT " st[⍋st]" (("aodjeignwug" (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5518))) 
" st[⍋st]" 
(:CLOS ((("aodjeignwug" (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5518)))) 
(:EXX ("aodjeignwug" (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5518) "aodjeignwug"
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G5518)) 
(:EXX ((("aodjeignwug" (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5518)))
 (SETQ #:G5518 "aodjeignwug") NIL) 
(:NXT ""
 (((:AXES (#:G5518 (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))) #:G5518))) 
"" 
(:CLOS
 ((((:AXES (#:G5518 (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))) #:G5518)))) 
(:CLOS (((#:G5518 (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))))) 
(:EXX (#:G5518 (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE)) #:G5518
 ((:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))) 
(:EXX (((#:G5518 (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (GRADE OMEGA
                 (ALPHA-COMPARE (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR) #'<=)
                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
      #:G5518))
 NIL) 
(:EXX ((:AXES (#:G5518 (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))) #:G5518)
 (AREF-ELIDING (DISCLOSE #:G5518)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (AND)
                      (FUNCALL
                       #'(LAMBDA (OMEGA)
                           (GRADE OMEGA
                                  (ALPHA-COMPARE
                                   (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR)
                                   #'<=)
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                       #:G5518))))
 NIL) 
(:EXX ((((:AXES (#:G5518 (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE))) #:G5518)))
 (AREF-ELIDING (DISCLOSE #:G5518)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (AND)
                      (FUNCALL
                       #'(LAMBDA (OMEGA)
                           (GRADE OMEGA
                                  (ALPHA-COMPARE
                                   (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR)
                                   #'<=)
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                       #:G5518))))
 NIL) 
  [31m× Raised an error The value
                      T
                    is not of type
                      SEQUENCE (expected: "adeggijnouw")[0m

(:NXT ""
 (("ACaEed" (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE)
   (("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2))))) 
"" 
(:CLOS
 ((("ACaEed" (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE)
    (("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)))))) 
(:EXX
 ("ACaEed" (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE)
  (("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)))
 "ACaEed"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE)
  (("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)))) 
(:CLOS ((("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)))) 
(:EXX ("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2) "ABCDEabcde"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)) 
(:EXX
 ((("ACaEed" (:FN #\APL_FUNCTIONAL_SYMBOL_DELTA_STILE)
    (("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (GRADE
           (IF (VECTORP ALPHA)
               (INDEX-OF ALPHA OMEGA (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
               (ARRAY-GRADE ALPHA OMEGA))
           (ALPHA-COMPARE (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR) #'<)
           (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
      "ACaEed"
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           "ABCDEabcde" (VECTOR 2 5)))))
 NIL) 
  [32m✓ [90m#(1 3 2 6 4 5) is expected to be #(1 3 2 6 4 5)[0m 
[0m

[⍒] Grade Down / Grade Down By
(:NXT "" ((9 3 4 2 8 1 6 (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE)))) 
"" 
(:CLOS (((9 3 4 2 8 1 6 (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))))) 
(:EXX (9 3 4 2 8 1 6 (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))
 (VECTOR 6 1 8 2 4 3 9) ((:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))) 
(:EXX (((9 3 4 2 8 1 6 (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (GRADE OMEGA
                 (ALPHA-COMPARE (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR) #'>=)
                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
      (VECTOR 6 1 8 2 4 3 9)))
 NIL) 
  [32m✓ [90m#(7 3 1 5 6 4 2) is expected to be #(7 3 1 5 6 4 2)[0m 
[0m
(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
   (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
    (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
  (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
  (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 6 5
    (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (GRADE OMEGA
                 (ALPHA-COMPARE (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR) #'>=)
                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                (IOTA OMEGA :START
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
                (IF (ARRAYP (VECTOR 12))
                    (DISCLOSE (VECTOR 12))
                    (VECTOR 12))))
           (VECTOR 5 6)))))
 NIL) 
  [32m✓ [90m#(2 4 1 3 5) is expected to be #(2 4 1 3 5)[0m 
[0m
(:NXT " st[⍒st]" (("aodjeignwug" (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5539))) 
" st[⍒st]" 
(:CLOS ((("aodjeignwug" (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5539)))) 
(:EXX ("aodjeignwug" (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5539) "aodjeignwug"
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G5539)) 
(:EXX ((("aodjeignwug" (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5539)))
 (SETQ #:G5539 "aodjeignwug") NIL) 
(:NXT "" (((:AXES (#:G5539 (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))) #:G5539))) 
"" 
(:CLOS ((((:AXES (#:G5539 (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))) #:G5539)))) 
(:CLOS (((#:G5539 (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))))) 
(:EXX (#:G5539 (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE)) #:G5539
 ((:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))) 
(:EXX (((#:G5539 (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA)
          (GRADE OMEGA
                 (ALPHA-COMPARE (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR) #'>=)
                 (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
      #:G5539))
 NIL) 
(:EXX ((:AXES (#:G5539 (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))) #:G5539)
 (AREF-ELIDING (DISCLOSE #:G5539)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (AND)
                      (FUNCALL
                       #'(LAMBDA (OMEGA)
                           (GRADE OMEGA
                                  (ALPHA-COMPARE
                                   (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR)
                                   #'>=)
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                       #:G5539))))
 NIL) 
(:EXX ((((:AXES (#:G5539 (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE))) #:G5539)))
 (AREF-ELIDING (DISCLOSE #:G5539)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (AND)
                      (FUNCALL
                       #'(LAMBDA (OMEGA)
                           (GRADE OMEGA
                                  (ALPHA-COMPARE
                                   (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR)
                                   #'>=)
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                       #:G5539))))
 NIL) 
  [31m× Raised an error The value
                      T
                    is not of type
                      SEQUENCE (expected: "wuonjiggeda")[0m

(:NXT ""
 (("ACaEed" (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE)
   (("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2))))) 
"" 
(:CLOS
 ((("ACaEed" (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE)
    (("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)))))) 
(:EXX
 ("ACaEed" (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE)
  (("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)))
 "ACaEed"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE)
  (("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)))) 
(:CLOS ((("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)))) 
(:EXX ("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2) "ABCDEabcde"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)) 
(:EXX
 ((("ACaEed" (:FN #\APL_FUNCTIONAL_SYMBOL_DEL_STILE)
    (("ABCDEabcde" (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 2)))))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (GRADE
           (IF (VECTORP ALPHA)
               (INDEX-OF ALPHA OMEGA (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
               (ARRAY-GRADE ALPHA OMEGA))
           (ALPHA-COMPARE (OF-STATE *APRIL-IDIOM* :ATOMIC-VECTOR) #'>)
           (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
      "ACaEed"
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           "ABCDEabcde" (VECTOR 2 5)))))
 NIL) 
  [32m✓ [90m#(5 4 6 2 3 1) is expected to be #(5 4 6 2 3 1)[0m 
[0m

[⊤] Encode
(:NXT "" ((82 (:FN #\DOWN_TACK) 12 3 1760))) 
"" 
(:CLOS (((82 (:FN #\DOWN_TACK) 12 3 1760)))) 
(:EXX (82 (:FN #\DOWN_TACK) 12 3 1760) (VECTOR 82)
 ((:FN #\DOWN_TACK) 12 3 1760)) 
(:EXX (((82 (:FN #\DOWN_TACK) 12 3 1760)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (FLET ((REBASE (BASES NUMBER)
                   (LET ((OPERAND NUMBER)
                         (LAST-BASE 1)
                         (BASE 1)
                         (COMPONENT 1)
                         (ELEMENT NIL))
                     (LOOP FOR INDEX FROM (1- (LENGTH BASES)) DOWNTO 0
                           DO (SETQ LAST-BASE BASE
                                    BASE (* BASE (AREF BASES INDEX))
                                    COMPONENT
                                      (IF (= 0 BASE)
                                          OPERAND
                                          (* BASE
                                             (NTH-VALUE 1
                                                        (FLOOR
                                                         (/ OPERAND BASE)))))
                                    OPERAND (- OPERAND COMPONENT)
                                    ELEMENT (/ COMPONENT LAST-BASE))
                           COLLECT ELEMENT))))
            (IF (= 1 (LENGTH OMEGA))
                (LET ((RESULT (REBASE ALPHA (AREF OMEGA 0))))
                  (MAKE-ARRAY (LIST (LENGTH RESULT)) :INITIAL-CONTENTS
                              (REVERSE RESULT)))
                (PERMUTE (LIST 1 0)
                         (MAKE-ARRAY (LIST (LENGTH OMEGA) (LENGTH ALPHA))
                                     :INITIAL-CONTENTS
                                     (MAPCAR
                                      (LAMBDA (ITEM)
                                        (REVERSE (REBASE ALPHA ITEM)))
                                      (ARRAY-TO-LIST OMEGA)))))))
      (VECTOR 82) (VECTOR 1760 3 12)))
 NIL) 
  [32m✓ [90m#(2 0 10) is expected to be #(2 0 10)[0m 
[0m
(:NXT "" ((100 (:FN #\DOWN_TACK) 16 16 16 16))) 
"" 
(:CLOS (((100 (:FN #\DOWN_TACK) 16 16 16 16)))) 
(:EXX (100 (:FN #\DOWN_TACK) 16 16 16 16) (VECTOR 100)
 ((:FN #\DOWN_TACK) 16 16 16 16)) 
(:EXX (((100 (:FN #\DOWN_TACK) 16 16 16 16)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (FLET ((REBASE (BASES NUMBER)
                   (LET ((OPERAND NUMBER)
                         (LAST-BASE 1)
                         (BASE 1)
                         (COMPONENT 1)
                         (ELEMENT NIL))
                     (LOOP FOR INDEX FROM (1- (LENGTH BASES)) DOWNTO 0
                           DO (SETQ LAST-BASE BASE
                                    BASE (* BASE (AREF BASES INDEX))
                                    COMPONENT
                                      (IF (= 0 BASE)
                                          OPERAND
                                          (* BASE
                                             (NTH-VALUE 1
                                                        (FLOOR
                                                         (/ OPERAND BASE)))))
                                    OPERAND (- OPERAND COMPONENT)
                                    ELEMENT (/ COMPONENT LAST-BASE))
                           COLLECT ELEMENT))))
            (IF (= 1 (LENGTH OMEGA))
                (LET ((RESULT (REBASE ALPHA (AREF OMEGA 0))))
                  (MAKE-ARRAY (LIST (LENGTH RESULT)) :INITIAL-CONTENTS
                              (REVERSE RESULT)))
                (PERMUTE (LIST 1 0)
                         (MAKE-ARRAY (LIST (LENGTH OMEGA) (LENGTH ALPHA))
                                     :INITIAL-CONTENTS
                                     (MAPCAR
                                      (LAMBDA (ITEM)
                                        (REVERSE (REBASE ALPHA ITEM)))
                                      (ARRAY-TO-LIST OMEGA)))))))
      (VECTOR 100) (VECTOR 16 16 16 16)))
 NIL) 
  [32m✓ [90m#(0 0 6 4) is expected to be #(0 0 6 4)[0m 
[0m
(:NXT "" ((5 4 3 2 1 (:FN #\DOWN_TACK) 2 2 2 2 2))) 
"" 
(:CLOS (((5 4 3 2 1 (:FN #\DOWN_TACK) 2 2 2 2 2)))) 
(:EXX (5 4 3 2 1 (:FN #\DOWN_TACK) 2 2 2 2 2) (VECTOR 1 2 3 4 5)
 ((:FN #\DOWN_TACK) 2 2 2 2 2)) 
(:EXX (((5 4 3 2 1 (:FN #\DOWN_TACK) 2 2 2 2 2)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (FLET ((REBASE (BASES NUMBER)
                   (LET ((OPERAND NUMBER)
                         (LAST-BASE 1)
                         (BASE 1)
                         (COMPONENT 1)
                         (ELEMENT NIL))
                     (LOOP FOR INDEX FROM (1- (LENGTH BASES)) DOWNTO 0
                           DO (SETQ LAST-BASE BASE
                                    BASE (* BASE (AREF BASES INDEX))
                                    COMPONENT
                                      (IF (= 0 BASE)
                                          OPERAND
                                          (* BASE
                                             (NTH-VALUE 1
                                                        (FLOOR
                                                         (/ OPERAND BASE)))))
                                    OPERAND (- OPERAND COMPONENT)
                                    ELEMENT (/ COMPONENT LAST-BASE))
                           COLLECT ELEMENT))))
            (IF (= 1 (LENGTH OMEGA))
                (LET ((RESULT (REBASE ALPHA (AREF OMEGA 0))))
                  (MAKE-ARRAY (LIST (LENGTH RESULT)) :INITIAL-CONTENTS
                              (REVERSE RESULT)))
                (PERMUTE (LIST 1 0)
                         (MAKE-ARRAY (LIST (LENGTH OMEGA) (LENGTH ALPHA))
                                     :INITIAL-CONTENTS
                                     (MAPCAR
                                      (LAMBDA (ITEM)
                                        (REVERSE (REBASE ALPHA ITEM)))
                                      (ARRAY-TO-LIST OMEGA)))))))
      (VECTOR 1 2 3 4 5) (VECTOR 2 2 2 2 2)))
 NIL) 
  [32m✓ [90m#2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1)) is expected to be #2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1))[0m 
[0m

[⊥] Decode
(:NXT "" ((1 7 6 2 (:FN #\UP_TACK) 10))) 
"" 
(:CLOS (((1 7 6 2 (:FN #\UP_TACK) 10)))) 
(:EXX (1 7 6 2 (:FN #\UP_TACK) 10) (VECTOR 2 6 7 1) ((:FN #\UP_TACK) 10)) 
(:EXX (((1 7 6 2 (:FN #\UP_TACK) 10)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (FLET ((REBASE (BASES NUMERATORS)
                   (LET ((RESULT 0) (BASE 1))
                     (LOOP FOR INDEX FROM (1- (LENGTH NUMERATORS)) DOWNTO 0
                           DO (INCF RESULT
                                    (* BASE (AREF NUMERATORS INDEX))) (SETF BASE
                                                                              (*
                                                                               BASE
                                                                               (AREF
                                                                                BASES
                                                                                INDEX))))
                     RESULT)))
            (LET ((BASES
                   (IF (= 1 (LENGTH ALPHA))
                       (MAKE-ARRAY (LIST (FIRST (DIMS OMEGA))) :INITIAL-ELEMENT
                                   (AREF ALPHA 0))
                       (IF (NOT
                            (= (LENGTH ALPHA)
                               (LET ((D-O (DIMS OMEGA)))
                                 (IF (= 1 (LENGTH D-O))
                                     (FIRST D-O)
                                     (SECOND D-O)))))
                           (ERROR "Base/element length mismatch.")
                           ALPHA))))
              (IF (= 1 (RANK OMEGA))
                  (VECTOR (REBASE BASES OMEGA))
                  (MARGIN (LAMBDA (SUB-ARRAY) (REBASE BASES SUB-ARRAY)) OMEGA
                          0)))))
      (VECTOR 2 6 7 1) (VECTOR 10)))
 NIL) 
  [32m✓ [90m2671 is expected to be 2671[0m 
[0m
(:NXT "" ((5 2 2 (:FN #\UP_TACK) 12 3 1760))) 
"" 
(:CLOS (((5 2 2 (:FN #\UP_TACK) 12 3 1760)))) 
(:EXX (5 2 2 (:FN #\UP_TACK) 12 3 1760) (VECTOR 2 2 5)
 ((:FN #\UP_TACK) 12 3 1760)) 
(:EXX (((5 2 2 (:FN #\UP_TACK) 12 3 1760)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (FLET ((REBASE (BASES NUMERATORS)
                   (LET ((RESULT 0) (BASE 1))
                     (LOOP FOR INDEX FROM (1- (LENGTH NUMERATORS)) DOWNTO 0
                           DO (INCF RESULT
                                    (* BASE (AREF NUMERATORS INDEX))) (SETF BASE
                                                                              (*
                                                                               BASE
                                                                               (AREF
                                                                                BASES
                                                                                INDEX))))
                     RESULT)))
            (LET ((BASES
                   (IF (= 1 (LENGTH ALPHA))
                       (MAKE-ARRAY (LIST (FIRST (DIMS OMEGA))) :INITIAL-ELEMENT
                                   (AREF ALPHA 0))
                       (IF (NOT
                            (= (LENGTH ALPHA)
                               (LET ((D-O (DIMS OMEGA)))
                                 (IF (= 1 (LENGTH D-O))
                                     (FIRST D-O)
                                     (SECOND D-O)))))
                           (ERROR "Base/element length mismatch.")
                           ALPHA))))
              (IF (= 1 (RANK OMEGA))
                  (VECTOR (REBASE BASES OMEGA))
                  (MARGIN (LAMBDA (SUB-ARRAY) (REBASE BASES SUB-ARRAY)) OMEGA
                          0)))))
      (VECTOR 2 2 5) (VECTOR 1760 3 12)))
 NIL) 
  [32m✓ [90m101 is expected to be 101[0m 
[0m
(:NXT ""
 ((7 3 2 2 0 5 1 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 (:FN #\UP_TACK) 12 3
   1760))) 
"" 
(:CLOS
 (((7 3 2 2 0 5 1 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 (:FN #\UP_TACK) 12
    3 1760)))) 
(:EXX
 (7 3 2 2 0 5 1 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 (:FN #\UP_TACK) 12 3
  1760)
 (VECTOR 1 2 1 5 0 2 2 3 7)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 (:FN #\UP_TACK) 12 3 1760)) 
(:EXX
 (((7 3 2 2 0 5 1 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 (:FN #\UP_TACK) 12
    3 1760)))
 (IF (AND)
     (FUNCALL
      #'(LAMBDA (OMEGA ALPHA)
          (FLET ((REBASE (BASES NUMERATORS)
                   (LET ((RESULT 0) (BASE 1))
                     (LOOP FOR INDEX FROM (1- (LENGTH NUMERATORS)) DOWNTO 0
                           DO (INCF RESULT
                                    (* BASE (AREF NUMERATORS INDEX))) (SETF BASE
                                                                              (*
                                                                               BASE
                                                                               (AREF
                                                                                BASES
                                                                                INDEX))))
                     RESULT)))
            (LET ((BASES
                   (IF (= 1 (LENGTH ALPHA))
                       (MAKE-ARRAY (LIST (FIRST (DIMS OMEGA))) :INITIAL-ELEMENT
                                   (AREF ALPHA 0))
                       (IF (NOT
                            (= (LENGTH ALPHA)
                               (LET ((D-O (DIMS OMEGA)))
                                 (IF (= 1 (LENGTH D-O))
                                     (FIRST D-O)
                                     (SECOND D-O)))))
                           (ERROR "Base/element length mismatch.")
                           ALPHA))))
              (IF (= 1 (RANK OMEGA))
                  (VECTOR (REBASE BASES OMEGA))
                  (MARGIN (LAMBDA (SUB-ARRAY) (REBASE BASES SUB-ARRAY)) OMEGA
                          0)))))
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (VECTOR 1 2 1 5 0 2 2 3 7) (VECTOR 3 3)))
      (VECTOR 1760 3 12)))
 NIL) 
  [32m✓ [90m#(98 75 67) is expected to be #(98 75 67)[0m 
[0m

[⍎] Evaluate
(:NXT "" (("1+1" (:FN #\APL_FUNCTIONAL_SYMBOL_DOWN_TACK_JOT)))) 
"" 
(:CLOS ((("1+1" (:FN #\APL_FUNCTIONAL_SYMBOL_DOWN_TACK_JOT))))) 
(:EXX ("1+1" (:FN #\APL_FUNCTIONAL_SYMBOL_DOWN_TACK_JOT)) "1+1"
 ((:FN #\APL_FUNCTIONAL_SYMBOL_DOWN_TACK_JOT))) 
(:EXX ((("1+1" (:FN #\APL_FUNCTIONAL_SYMBOL_DOWN_TACK_JOT)))) (APRIL "1+1") NIL) 
(:NXT "" ((1 (:FN #\+) 1))) 
"" 
(:CLOS (((1 (:FN #\+) 1)))) 
(:EXX (1 (:FN #\+) 1) (VECTOR 1) ((:FN #\+) 1)) 
(:EXX (((1 (:FN #\+) 1)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 1) (VECTOR 1)) NIL) 
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[←] Assign Result Of
(:NXT " a+←5 ◊ a" ((1 2 3 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5585))) 
" a+←5 ◊ a" 
(:CLOS (((1 2 3 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5585)))) 
(:EXX (1 2 3 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5585) (VECTOR 3 2 1)
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G5585)) 
(:EXX (((1 2 3 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5585)))
 (SETQ #:G5585 (VECTOR 3 2 1)) NIL) 
(:NXT " a" ((5 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) #:G5585))) 
" a" 
(:CLOS (((5 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) #:G5585)))) 
(:EXX (5 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) #:G5585) (VECTOR 5)
 ((:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) #:G5585)) 
(:EXX (((5 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) #:G5585)))
 (SETQ #:G5585
         (FUNCALL
          (LAMBDA (OMEGA ALPHA)
            (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
          (VECTOR 5) (DISCLOSE #:G5585)))
 NIL) 
(:NXT "" ((#:G5585))) 
"" 
(:CLOS (((#:G5585)))) 
(:EXX (#:G5585) #:G5585 NIL) 
(:EXX (((#:G5585))) #:G5585 NIL) 
  [32m✓ [90m#(8 7 6) is expected to be #(8 7 6)[0m 
[0m
(:NXT " a[2]+←5 ◊ a" ((1 2 3 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5591))) 
" a[2]+←5 ◊ a" 
(:CLOS (((1 2 3 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5591)))) 
(:EXX (1 2 3 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5591) (VECTOR 3 2 1)
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G5591)) 
(:EXX (((1 2 3 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5591)))
 (SETQ #:G5591 (VECTOR 3 2 1)) NIL) 
(:NXT " a" ((5 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (2)) #:G5591))) 
" a" 
(:CLOS (((5 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (2)) #:G5591)))) 
(:EXX (5 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (2)) #:G5591)
 (VECTOR 5) ((:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (2)) #:G5591)) 
(:CLOS (((2)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (((2))) (VECTOR 2) NIL) 
(:EXX (((5 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (2)) #:G5591)))
 (AREF-ELIDING (DISCLOSE #:G5591)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 2))
               :SET
               (LAMBDA (ITEM)
                 (FUNCALL
                  (LAMBDA (OMEGA ALPHA)
                    (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                  (VECTOR 5) ITEM)))
 NIL) 
(:NXT "" ((#:G5591))) 
"" 
(:CLOS (((#:G5591)))) 
(:EXX (#:G5591) #:G5591 NIL) 
(:EXX (((#:G5591))) #:G5591 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #(3 7 1))[0m


[/] Reduce
(:NXT "" ((5 4 3 2 1 (:OP :LATERAL #\/) (:FN #\+)))) 
"" 
(:CLOS (((5 4 3 2 1 (:OP :LATERAL #\/) (:FN #\+))))) 
(:EXX (5 4 3 2 1 (:OP :LATERAL #\/) (:FN #\+)) (VECTOR 1 2 3 4 5)
 ((:OP :LATERAL #\/) (:FN #\+))) 
(:EXX (((5 4 3 2 1 (:OP :LATERAL #\/) (:FN #\+))))
 (LET ((NEW-ARRAY (COPY-ARRAY (VECTOR 1 2 3 4 5))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB8BB}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB71B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY
         (IF (LIST)
             (1- (AREF (FIRST (LIST)) 0))
             (1- (RANK NEW-ARRAY)))))))
 NIL) 
  [32m✓ [90m15 is expected to be 15[0m 
[0m
(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:OP :LATERAL #\/) (:FN #\+)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\/) (:FN #\+))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\/) (:FN #\+))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\/) (:FN #\+))) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\/) (:FN #\+))))
 (LET ((NEW-ARRAY
        (COPY-ARRAY
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 12))
                       (DISCLOSE (VECTOR 12))
                       (VECTOR 12))))
              (VECTOR 3 4))))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB8BB}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB71B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY
         (IF (LIST)
             (1- (AREF (FIRST (LIST)) 0))
             (1- (RANK NEW-ARRAY)))))))
 NIL) 
  [32m✓ [90m#(10 26 42) is expected to be #(10 26 42)[0m 
[0m
(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:AXES (1)) (:OP :LATERAL #\/) (:FN #\+)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (1)) (:OP :LATERAL #\/) (:FN #\+))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (1)) (:OP :LATERAL #\/) (:FN #\+))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (1)) (:OP :LATERAL #\/) (:FN #\+))) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (1)) (:OP :LATERAL #\/) (:FN #\+))))
 (LET ((NEW-ARRAY
        (COPY-ARRAY
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 12))
                       (DISCLOSE (VECTOR 12))
                       (VECTOR 12))))
              (VECTOR 3 4))))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB8BB}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB71B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY
         (IF (LIST (VECTOR 1))
             (1- (AREF (FIRST (LIST (VECTOR 1))) 0))
             (1- (RANK NEW-ARRAY)))))))
 NIL) 
  [32m✓ [90m#(15 18 21 24) is expected to be #(15 18 21 24)[0m 
[0m
(:NXT "" ((⍵ (:FN #\+) ⍺))) 
"" 
(:CLOS (((⍵ (:FN #\+) ⍺)))) 
(:EXX (⍵ (:FN #\+) ⍺) ⍵ ((:FN #\+) ⍺)) 
(:EXX (((⍵ (:FN #\+) ⍺))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ ⍺) NIL) 
(:NXT " fn/1 2 3 4 5"
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1007ACE3FB}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5612))) 
(:NXT "" ((⍵ (:FN #\+) ⍺))) 
"" 
(:CLOS (((⍵ (:FN #\+) ⍺)))) 
(:EXX (⍵ (:FN #\+) ⍺) ⍵ ((:FN #\+) ⍺)) 
(:EXX (((⍵ (:FN #\+) ⍺))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ ⍺) NIL) 
" fn/1 2 3 4 5" 
(:CLOS
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1007AE15FB}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5612)))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007AE15FB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5612)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G5612 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ ⍺))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G5612)) 
(:EXX
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1007AE15FB}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5612)))
 (SETQ #:G5612
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (LET* ((#:G5612 NIL))
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ ⍺))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
 NIL) 
(:NXT "" ((5 4 3 2 1 (:OP :LATERAL #\/) #:G5612))) 
"" 
(:CLOS (((5 4 3 2 1 (:OP :LATERAL #\/) #:G5612)))) 
(:EXX (5 4 3 2 1 (:OP :LATERAL #\/) #:G5612) (VECTOR 1 2 3 4 5)
 ((:OP :LATERAL #\/) #:G5612)) 
(:EXX (((5 4 3 2 1 (:OP :LATERAL #\/) #:G5612)))
 (LET ((NEW-ARRAY (COPY-ARRAY (VECTOR 1 2 3 4 5))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB8BB}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #:G5612 OMEGA ALPHA)) NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB71B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #:G5612 OMEGA ALPHA)) NEW-ARRAY
         (IF (LIST)
             (1- (AREF (FIRST (LIST)) 0))
             (1- (RANK NEW-ARRAY)))))))
 NIL) ; in: LET* ((#:G5612 :UNDEFINED))
;     (LET* ((#:G5612 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ APRIL::⍺)))
; 
; caught STYLE-WARNING:
;   The variable #:G5612 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
  [32m✓ [90m15 is expected to be 15[0m 
[0m
(:NXT "" ((⍵ (:FN #\DIVISION_SIGN) (:FN #\+) ⍺))) 
"" 
(:CLOS (((⍵ (:FN #\DIVISION_SIGN) (:FN #\+) ⍺)))) 
(:EXX (⍵ (:FN #\DIVISION_SIGN) (:FN #\+) ⍺) ⍵
 ((:FN #\DIVISION_SIGN) (:FN #\+) ⍺)) 
(:EXX (((⍵ (:FN #\DIVISION_SIGN) (:FN #\+) ⍺)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (FUNCALL #'APPLY-SCALAR-MONADIC #'/ ⍵) ⍺)
 NIL) 
(:NXT ""
 ((1 (:OP :LATERAL #\/) 40 (:OP :LATERAL #\/)
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1007C5F25B}>)
   (:FN #\MULTIPLICATION_SIGN) 10000 (:FN #\LEFT_FLOOR)))) 
(:NXT "" ((⍵ (:FN #\DIVISION_SIGN) (:FN #\+) ⍺))) 
"" 
(:CLOS (((⍵ (:FN #\DIVISION_SIGN) (:FN #\+) ⍺)))) 
(:EXX (⍵ (:FN #\DIVISION_SIGN) (:FN #\+) ⍺) ⍵
 ((:FN #\DIVISION_SIGN) (:FN #\+) ⍺)) 
(:EXX (((⍵ (:FN #\DIVISION_SIGN) (:FN #\+) ⍺)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (FUNCALL #'APPLY-SCALAR-MONADIC #'/ ⍵) ⍺)
 NIL) 
"" 
(:CLOS
 (((1 (:OP :LATERAL #\/) 40 (:OP :LATERAL #\/)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1007C8479B}>)
    (:FN #\MULTIPLICATION_SIGN) 10000 (:FN #\LEFT_FLOOR))))) 
(:EXX
 (1 (:OP :LATERAL #\/) 40 (:OP :LATERAL #\/)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007C8479B}>)
  (:FN #\MULTIPLICATION_SIGN) 10000 (:FN #\LEFT_FLOOR))
 (VECTOR 1)
 ((:OP :LATERAL #\/) 40 (:OP :LATERAL #\/)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1007C8479B}>)
  (:FN #\MULTIPLICATION_SIGN) 10000 (:FN #\LEFT_FLOOR))) 
(:EXX
 (((1 (:OP :LATERAL #\/) 40 (:OP :LATERAL #\/)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1007C8479B}>)
    (:FN #\MULTIPLICATION_SIGN) 10000 (:FN #\LEFT_FLOOR))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR
          (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                   (LET ((NEW-ARRAY
                          (COPY-ARRAY
                           (IF (AND)
                               (FUNCALL
                                #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                    (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                                                  (IF AXES
                                                      (- (RANK OMEGA)
                                                         (-
                                                          (AREF (FIRST AXES) 0)
                                                          (1-
                                                           (OF-STATE
                                                            *APRIL-IDIOM*
                                                            :COUNT-FROM)))))
                                                  0 :COMPRESS-MODE T))
                                (VECTOR 1) (VECTOR 40) (LIST))))))
                     (DISCLOSE
                      (IF (VECTORP NEW-ARRAY)
                          (FUNCALL
                           #<FUNCTION (LAMBDA (FUNCTION INPUT)
                                        :IN
                                        "/Users/owner/Documents/src/april/april.lisp") {227DB8BB}>
                           (LAMBDA (OMEGA ALPHA)
                             (FUNCALL
                              (LAMBDA (⍵ &OPTIONAL ⍺)
                                (DECLARE (IGNORABLE ⍺))
                                (PROGN
                                 (DISCLOSE
                                  (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                                           (FUNCALL #'APPLY-SCALAR-MONADIC #'/
                                                    ⍵)
                                           ⍺))))
                              (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
                           NEW-ARRAY)
                          (FUNCALL
                           #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                                        :IN
                                        "/Users/owner/Documents/src/april/april.lisp") {227DB71B}>
                           (LAMBDA (OMEGA ALPHA)
                             (FUNCALL
                              (LAMBDA (⍵ &OPTIONAL ⍺)
                                (DECLARE (IGNORABLE ⍺))
                                (PROGN
                                 (DISCLOSE
                                  (FUNCALL #'APPLY-SCALAR-DYADIC #'+
                                           (FUNCALL #'APPLY-SCALAR-MONADIC #'/
                                                    ⍵)
                                           ⍺))))
                              (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
                           NEW-ARRAY
                           (IF (LIST)
                               (1- (AREF (FIRST (LIST)) 0))
                               (1- (RANK NEW-ARRAY)))))))
                   (VECTOR 10000)))
 NIL) 
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m

[⌿] Reduce First
(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) (:FN #\+)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) (:FN #\+))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) (:FN #\+))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) (:FN #\+))) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) (:FN #\+))))
 (LET ((NEW-ARRAY
        (COPY-ARRAY
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 12))
                       (DISCLOSE (VECTOR 12))
                       (VECTOR 12))))
              (VECTOR 3 4))))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB4CB}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB32B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY
         (IF (LIST)
             (1- (AREF (FIRST (LIST)) 0))
             0)))))
 NIL) 
  [32m✓ [90m#(15 18 21 24) is expected to be #(15 18 21 24)[0m 
[0m
(:NXT "" ((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺))) 
"" 
(:CLOS (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))) 
(:EXX (3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺) (VECTOR 3)
 ((:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)) 
(:EXX (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'*
          (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) ⍺)
 NIL) 
(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR)
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1008068BEB}>)))) 
(:NXT "" ((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺))) 
"" 
(:CLOS (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))) 
(:EXX (3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺) (VECTOR 3)
 ((:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)) 
(:EXX (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'*
          (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) ⍺)
 NIL) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {10080B058B}>))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10080B058B}>))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {10080B058B}>))) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {10080B058B}>))))
 (LET ((NEW-ARRAY
        (COPY-ARRAY
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 12))
                       (DISCLOSE (VECTOR 12))
                       (VECTOR 12))))
              (VECTOR 3 4))))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB4CB}>
         (LAMBDA (OMEGA ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (PROGN
               (DISCLOSE
                (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                         (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) ⍺))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB32B}>
         (LAMBDA (OMEGA ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (PROGN
               (DISCLOSE
                (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                         (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) ⍺))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
         NEW-ARRAY
         (IF (LIST)
             (1- (AREF (FIRST (LIST)) 0))
             0)))))
 NIL) 
  [32m✓ [90m#(207 330 495 708) is expected to be #(207 330 495 708)[0m 
[0m
(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) (:FN #\+)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) (:FN #\+))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) (:FN #\+))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) (:FN #\+))) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_SLASH_BAR) (:FN #\+))))
 (LET ((NEW-ARRAY
        (COPY-ARRAY
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 12))
                       (DISCLOSE (VECTOR 12))
                       (VECTOR 12))))
              (VECTOR 3 4))))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB4CB}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB32B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY
         (IF (LIST (VECTOR 2))
             (1- (AREF (FIRST (LIST (VECTOR 2))) 0))
             0)))))
 NIL) 
  [32m✓ [90m#(10 26 42) is expected to be #(10 26 42)[0m 
[0m

[\] Scan
(:NXT "" ((5 4 3 2 1 (:OP :LATERAL #\\) (:FN #\+)))) 
"" 
(:CLOS (((5 4 3 2 1 (:OP :LATERAL #\\) (:FN #\+))))) 
(:EXX (5 4 3 2 1 (:OP :LATERAL #\\) (:FN #\+)) (VECTOR 1 2 3 4 5)
 ((:OP :LATERAL #\\) (:FN #\+))) 
(:EXX (((5 4 3 2 1 (:OP :LATERAL #\\) (:FN #\+))))
 (LET ((NEW-ARRAY (COPY-ARRAY (VECTOR 1 2 3 4 5))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB15B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB09B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY
         (IF (LIST)
             (1- (AREF (FIRST (LIST)) 0))
             (1- (RANK NEW-ARRAY)))))))
 NIL) 
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:OP :LATERAL #\\) (:FN #\+)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\\) (:FN #\+))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\\) (:FN #\+))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\\) (:FN #\+))) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\\) (:FN #\+))))
 (LET ((NEW-ARRAY
        (COPY-ARRAY
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 12))
                       (DISCLOSE (VECTOR 12))
                       (VECTOR 12))))
              (VECTOR 3 4))))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB15B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB09B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY
         (IF (LIST)
             (1- (AREF (FIRST (LIST)) 0))
             (1- (RANK NEW-ARRAY)))))))
 NIL) 
  [32m✓ [90m#2A((1 3 6 10) (5 11 18 26) (9 19 30 42)) is expected to be #2A((1 3 6 10) (5 11 18 26) (9 19 30 42))[0m 
[0m
(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:AXES (1)) (:OP :LATERAL #\\) (:FN #\+)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (1)) (:OP :LATERAL #\\) (:FN #\+))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (1)) (:OP :LATERAL #\\) (:FN #\+))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (1)) (:OP :LATERAL #\\) (:FN #\+))) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (1)) (:OP :LATERAL #\\) (:FN #\+))))
 (LET ((NEW-ARRAY
        (COPY-ARRAY
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 12))
                       (DISCLOSE (VECTOR 12))
                       (VECTOR 12))))
              (VECTOR 3 4))))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB15B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DB09B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY
         (IF (LIST (VECTOR 1))
             (1- (AREF (FIRST (LIST (VECTOR 1))) 0))
             (1- (RANK NEW-ARRAY)))))))
 NIL) 
  [32m✓ [90m#2A((1 2 3 4) (6 8 10 12) (15 18 21 24)) is expected to be #2A((1 2 3 4) (6 8 10 12) (15 18 21 24))[0m 
[0m

[⍀] Scan First
(:NXT ""
 ((5 4 3 2 1 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+)))) 
"" 
(:CLOS
 (((5 4 3 2 1 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+))))) 
(:EXX
 (5 4 3 2 1 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+))
 (VECTOR 1 2 3 4 5)
 ((:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+))) 
(:EXX
 (((5 4 3 2 1 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+))))
 (LET ((NEW-ARRAY (COPY-ARRAY (VECTOR 1 2 3 4 5))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DAEEB}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DAE2B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY
         (IF (LIST)
             (1- (AREF (FIRST (LIST)) 0))
             0)))))
 NIL) 
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+))) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+))))
 (LET ((NEW-ARRAY
        (COPY-ARRAY
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 12))
                       (DISCLOSE (VECTOR 12))
                       (VECTOR 12))))
              (VECTOR 3 4))))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DAEEB}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DAE2B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY
         (IF (LIST)
             (1- (AREF (FIRST (LIST)) 0))
             0)))))
 NIL) 
  [32m✓ [90m#2A((1 2 3 4) (6 8 10 12) (15 18 21 24)) is expected to be #2A((1 2 3 4) (6 8 10 12) (15 18 21 24))[0m 
[0m
(:NXT "" ((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺))) 
"" 
(:CLOS (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))) 
(:EXX (3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺) (VECTOR 3)
 ((:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)) 
(:EXX (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'*
          (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) ⍺)
 NIL) 
(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR)
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1008FC514B}>)))) 
(:NXT "" ((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺))) 
"" 
(:CLOS (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))) 
(:EXX (3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺) (VECTOR 3)
 ((:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)) 
(:EXX (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'*
          (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) ⍺)
 NIL) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008FF9CDB}>))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008FF9CDB}>))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008FF9CDB}>))) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008FF9CDB}>))))
 (LET ((NEW-ARRAY
        (COPY-ARRAY
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 12))
                       (DISCLOSE (VECTOR 12))
                       (VECTOR 12))))
              (VECTOR 3 4))))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DAEEB}>
         (LAMBDA (OMEGA ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (PROGN
               (DISCLOSE
                (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                         (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) ⍺))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DAE2B}>
         (LAMBDA (OMEGA ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (PROGN
               (DISCLOSE
                (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                         (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) ⍺))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
         NEW-ARRAY
         (IF (LIST)
             (1- (AREF (FIRST (LIST)) 0))
             0)))))
 NIL) 
  [32m✓ [90m#2A((1 2 3 4) (20 30 42 56) (288 450 660 924)) is expected to be #2A((1 2 3 4) (20 30 42 56) (288 450 660 924))[0m 
[0m
(:NXT ""
 ((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
   (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+)))) 
"" 
(:CLOS
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR)
    (:FN #\+))))) 
(:EXX
 (12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+))
 (VECTOR 12)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
  (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR) (:FN #\+))) 
(:EXX
 (((12 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    (:AXES (2)) (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_BACKSLASH_BAR)
    (:FN #\+))))
 (LET ((NEW-ARRAY
        (COPY-ARRAY
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 12))
                       (DISCLOSE (VECTOR 12))
                       (VECTOR 12))))
              (VECTOR 3 4))))))
   (DISCLOSE
    (IF (VECTORP NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DAEEB}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY)
        (FUNCALL
         #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                      :IN
                      "/Users/owner/Documents/src/april/april.lisp") {227DAE2B}>
         (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
         NEW-ARRAY
         (IF (LIST (VECTOR 2))
             (1- (AREF (FIRST (LIST (VECTOR 2))) 0))
             0)))))
 NIL) 
  [32m✓ [90m#2A((1 3 6 10) (5 11 18 26) (9 19 30 42)) is expected to be #2A((1 3 6 10) (5 11 18 26) (9 19 30 42))[0m 
[0m

[.] Inner/Outer Product
(:NXT "" ((5 4 3 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 2))) 
"" 
(:CLOS (((5 4 3 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 2)))) 
(:EXX (5 4 3 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 2)
 (VECTOR 3 4 5) ((:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 2)) 
(:EXX (((5 4 3 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 2)))
 (IF (AND (VECTORP (VECTOR 3 4 5)) (VECTORP (VECTOR 2)))
     (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT
                 (REDUCE
                  (LAMBDA (OMEGA ALPHA)
                    (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                  (APPLY-SCALAR-DYADIC
                   (LAMBDA (OMEGA ALPHA)
                     (FUNCALL #'APPLY-SCALAR-DYADIC #'* OMEGA ALPHA))
                   (VECTOR 2) (VECTOR 3 4 5))))
     (ARRAY-INNER-PRODUCT (VECTOR 2) (VECTOR 3 4 5)
                          (LET ((F1
                                 (LAMBDA (OMEGA ALPHA)
                                   (FUNCALL #'APPLY-SCALAR-DYADIC #'* OMEGA
                                            ALPHA))))
                            (LAMBDA (ARG1 ARG2)
                              (IF (OR (ARRAYP ARG1) (ARRAYP ARG2))
                                  (APPLY-SCALAR-DYADIC F1 ARG1 ARG2)
                                  (FUNCALL F1 ARG1 ARG2))))
                          (LAMBDA (OMEGA ALPHA)
                            (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))))
 NIL) 
  [32m✓ [90m24 is expected to be 24[0m 
[0m
(:NXT ""
 ((21 15 8 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 4 3 2))) 
"" 
(:CLOS
 (((21 15 8 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 4 3 2)))) 
(:EXX (21 15 8 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 4 3 2)
 (VECTOR 8 15 21)
 ((:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 4 3 2)) 
(:EXX
 (((21 15 8 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 4 3 2)))
 (IF (AND (VECTORP (VECTOR 8 15 21)) (VECTORP (VECTOR 2 3 4)))
     (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT
                 (REDUCE
                  (LAMBDA (OMEGA ALPHA)
                    (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                  (APPLY-SCALAR-DYADIC
                   (LAMBDA (OMEGA ALPHA)
                     (FUNCALL #'APPLY-SCALAR-DYADIC #'* OMEGA ALPHA))
                   (VECTOR 2 3 4) (VECTOR 8 15 21))))
     (ARRAY-INNER-PRODUCT (VECTOR 2 3 4) (VECTOR 8 15 21)
                          (LET ((F1
                                 (LAMBDA (OMEGA ALPHA)
                                   (FUNCALL #'APPLY-SCALAR-DYADIC #'* OMEGA
                                            ALPHA))))
                            (LAMBDA (ARG1 ARG2)
                              (IF (OR (ARRAYP ARG1) (ARRAYP ARG2))
                                  (APPLY-SCALAR-DYADIC F1 ARG1 ARG2)
                                  (FUNCALL F1 ARG1 ARG2))))
                          (LAMBDA (OMEGA ALPHA)
                            (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))))
 NIL) 
  [32m✓ [90m145 is expected to be 145[0m 
[0m
(:NXT ""
 ((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
   (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 4 3 2))) 
"" 
(:CLOS
 (((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 4 3 2)))) 
(:EXX
 (5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
  (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 4 3 2)
 (VECTOR 3 1 4 1 5 9 2 6 5)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3 (:FN #\MULTIPLICATION_SIGN)
  (:OP :PIVOTAL #\.) (:FN #\+) 4 3 2)) 
(:EXX
 (((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3
    (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+) 4 3 2)))
 (IF (AND
      (VECTORP
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA ALPHA)
                (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
            (VECTOR 3 1 4 1 5 9 2 6 5) (VECTOR 3 3))))
      (VECTORP (VECTOR 2 3 4)))
     (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT
                 (REDUCE
                  (LAMBDA (OMEGA ALPHA)
                    (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                  (APPLY-SCALAR-DYADIC
                   (LAMBDA (OMEGA ALPHA)
                     (FUNCALL #'APPLY-SCALAR-DYADIC #'* OMEGA ALPHA))
                   (VECTOR 2 3 4)
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA ALPHA)
                            (RESHAPE-ARRAY-FITTING OMEGA
                                                   (ARRAY-TO-LIST ALPHA)))
                        (VECTOR 3 1 4 1 5 9 2 6 5) (VECTOR 3 3))))))
     (ARRAY-INNER-PRODUCT (VECTOR 2 3 4)
                          (IF (AND)
                              (FUNCALL
                               #'(LAMBDA (OMEGA ALPHA)
                                   (RESHAPE-ARRAY-FITTING OMEGA
                                                          (ARRAY-TO-LIST
                                                           ALPHA)))
                               (VECTOR 3 1 4 1 5 9 2 6 5) (VECTOR 3 3)))
                          (LET ((F1
                                 (LAMBDA (OMEGA ALPHA)
                                   (FUNCALL #'APPLY-SCALAR-DYADIC #'* OMEGA
                                            ALPHA))))
                            (LAMBDA (ARG1 ARG2)
                              (IF (OR (ARRAYP ARG1) (ARRAYP ARG2))
                                  (APPLY-SCALAR-DYADIC F1 ARG1 ARG2)
                                  (FUNCALL F1 ARG1 ARG2))))
                          (LAMBDA (OMEGA ALPHA)
                            (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))))
 NIL) 
  [32m✓ [90m#(17 41 55) is expected to be #(17 41 55)[0m 
[0m
(:NXT ""
 ((4 3 2 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+)
   ((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3))))) 
"" 
(:CLOS
 (((4 3 2 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+)
    ((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3)))))) 
(:EXX
 (4 3 2 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+)
  ((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3)))
 (VECTOR 2 3 4)
 ((:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+)
  ((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3)))) 
(:CLOS (((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3)))) 
(:EXX (5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3)
 (VECTOR 3 1 4 1 5 9 2 6 5) ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3)) 
(:EXX
 (((4 3 2 (:FN #\MULTIPLICATION_SIGN) (:OP :PIVOTAL #\.) (:FN #\+)
    ((5 6 2 9 5 1 4 1 3 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 3)))))
 (IF (AND (VECTORP (VECTOR 2 3 4))
          (VECTORP
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA ALPHA)
                    (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                (VECTOR 3 1 4 1 5 9 2 6 5) (VECTOR 3 3)))))
     (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT
                 (REDUCE
                  (LAMBDA (OMEGA ALPHA)
                    (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                  (APPLY-SCALAR-DYADIC
                   (LAMBDA (OMEGA ALPHA)
                     (FUNCALL #'APPLY-SCALAR-DYADIC #'* OMEGA ALPHA))
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA ALPHA)
                            (RESHAPE-ARRAY-FITTING OMEGA
                                                   (ARRAY-TO-LIST ALPHA)))
                        (VECTOR 3 1 4 1 5 9 2 6 5) (VECTOR 3 3)))
                   (VECTOR 2 3 4))))
     (ARRAY-INNER-PRODUCT
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA ALPHA)
               (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
           (VECTOR 3 1 4 1 5 9 2 6 5) (VECTOR 3 3)))
      (VECTOR 2 3 4)
      (LET ((F1
             (LAMBDA (OMEGA ALPHA)
               (FUNCALL #'APPLY-SCALAR-DYADIC #'* OMEGA ALPHA))))
        (LAMBDA (ARG1 ARG2)
          (IF (OR (ARRAYP ARG1) (ARRAYP ARG2))
              (APPLY-SCALAR-DYADIC F1 ARG1 ARG2)
              (FUNCALL F1 ARG1 ARG2))))
      (LAMBDA (OMEGA ALPHA) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))))
 NIL) 
  [32m✓ [90m#(25 53 42) is expected to be #(25 53 42)[0m 
[0m
(:NXT ""
 ((50 40 30 20 (:FN #\+) (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 6 5
   4))) 
"" 
(:CLOS
 (((50 40 30 20 (:FN #\+) (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 6 5
    4)))) 
(:EXX
 (50 40 30 20 (:FN #\+) (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 6 5
  4)
 (VECTOR 20 30 40 50)
 ((:FN #\+) (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 6 5 4)) 
(:EXX
 (((50 40 30 20 (:FN #\+) (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 6 5
    4)))
 (IF (IS-SINGLETON (VECTOR 20 30 40 50))
     (EACH
      (LAMBDA (ELEMENT)
        (LET ((ALPHA ELEMENT) (OMEGA (DISCLOSE (VECTOR 20 30 40 50))))
          (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))))
      (VECTOR 4 5 6))
     (LET ((INVERSE
            (OUTER
             (LAMBDA (OMEGA ALPHA)
               (LET ((OMEGA (ENCLOSE OMEGA)) (ALPHA (ENCLOSE ALPHA)))
                 (IF (IS-SINGLETON OMEGA)
                     (LET ((PLACEHOLDER ALPHA))
                       (SETQ ALPHA OMEGA
                             OMEGA PLACEHOLDER)))
                 (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))))
             (VECTOR 4 5 6) (VECTOR 20 30 40 50))))
       (IF (NOT (IS-SINGLETON (VECTOR 4 5 6)))
           INVERSE
           (PERMUTE (REVERSE (IOTA (RANK INVERSE))) INVERSE))))
 NIL) 
  [32m✓ [90m#2A((24 34 44 54) (25 35 45 55) (26 36 46 56)) is expected to be #2A((24 34 44 54) (25 35 45 55) (26 36 46 56))[0m 
[0m
(:NXT ""
 ((3 2 1 (:FN #\-) (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1))) 
"" 
(:CLOS
 (((3 2 1 (:FN #\-) (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)))) 
(:EXX (3 2 1 (:FN #\-) (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)
 (VECTOR 1 2 3)
 ((:FN #\-) (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)) 
(:EXX
 (((3 2 1 (:FN #\-) (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)))
 (IF (IS-SINGLETON (VECTOR 1 2 3))
     (EACH
      (LAMBDA (ELEMENT)
        (LET ((ALPHA ELEMENT) (OMEGA (DISCLOSE (VECTOR 1 2 3))))
          (DISCLOSE
           (FUNCALL #'APPLY-SCALAR-DYADIC
                    #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                        (FUNCALL #'- VEX::ALPHA VEX::OMEGA))
                    OMEGA ALPHA))))
      (VECTOR 1 2 3))
     (LET ((INVERSE
            (OUTER
             (LAMBDA (OMEGA ALPHA)
               (LET ((OMEGA (ENCLOSE OMEGA)) (ALPHA (ENCLOSE ALPHA)))
                 (IF (IS-SINGLETON OMEGA)
                     (LET ((PLACEHOLDER ALPHA))
                       (SETQ ALPHA OMEGA
                             OMEGA PLACEHOLDER)))
                 (DISCLOSE
                  (FUNCALL #'APPLY-SCALAR-DYADIC
                           #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                               (FUNCALL #'- VEX::ALPHA VEX::OMEGA))
                           OMEGA ALPHA))))
             (VECTOR 1 2 3) (VECTOR 1 2 3))))
       (IF (NOT (IS-SINGLETON (VECTOR 1 2 3)))
           INVERSE
           (PERMUTE (REVERSE (IOTA (RANK INVERSE))) INVERSE))))
 NIL) 
  [32m✓ [90m#2A((0 -1 -2) (1 0 -1) (2 1 0)) is expected to be #2A((0 -1 -2) (1 0 -1) (2 1 0))[0m 
[0m
(:NXT ""
 ((3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\.)
   (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1))) 
"" 
(:CLOS
 (((3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\.)
    (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)))) 
(:EXX
 (3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\.)
  (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)
 (VECTOR 1 2 3)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\.)
  (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)) 
(:EXX
 (((3 2 1 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\.)
    (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)))
 (IF (IS-SINGLETON (VECTOR 1 2 3))
     (EACH
      (LAMBDA (ELEMENT)
        (LET ((ALPHA ELEMENT) (OMEGA (DISCLOSE (VECTOR 1 2 3))))
          (DISCLOSE
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA ALPHA)
                    (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                OMEGA ALPHA)))))
      (VECTOR 1 2 3))
     (LET ((INVERSE
            (OUTER
             (LAMBDA (OMEGA ALPHA)
               (LET ((OMEGA (ENCLOSE OMEGA)) (ALPHA (ENCLOSE ALPHA)))
                 (IF (IS-SINGLETON OMEGA)
                     (LET ((PLACEHOLDER ALPHA))
                       (SETQ ALPHA OMEGA
                             OMEGA PLACEHOLDER)))
                 (DISCLOSE
                  (IF (AND)
                      (FUNCALL
                       #'(LAMBDA (OMEGA ALPHA)
                           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                       OMEGA ALPHA)))))
             (VECTOR 1 2 3) (VECTOR 1 2 3))))
       (IF (NOT (IS-SINGLETON (VECTOR 1 2 3)))
           INVERSE
           (PERMUTE (REVERSE (IOTA (RANK INVERSE))) INVERSE))))
 NIL) 
  [32m✓ [90m#2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3))) is expected to be #2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3)))[0m 
[0m
(:NXT ""
 ((3 2 1 (:FN #\SUBSET_OF) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\.)
   (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1))) 
"" 
(:CLOS
 (((3 2 1 (:FN #\SUBSET_OF) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO)
    (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)))) 
(:EXX
 (3 2 1 (:FN #\SUBSET_OF) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\.)
  (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)
 (VECTOR 1 2 3)
 ((:FN #\SUBSET_OF) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\.)
  (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)) 
(:EXX
 (((3 2 1 (:FN #\SUBSET_OF) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO)
    (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)))
 (IF (IS-SINGLETON
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA &OPTIONAL AXES)
               (IF AXES
                   (RE-ENCLOSE OMEGA
                               (EACH
                                (LAMBDA (AXEL)
                                  (- AXEL
                                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                                (FIRST AXES)))
                   (IF (LOOP FOR DIM IN (DIMS OMEGA)
                             ALWAYS (= 1 DIM))
                       OMEGA
                       (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
           (VECTOR 1 2 3) (LIST))))
     (EACH
      (LAMBDA (ELEMENT)
        (LET ((ALPHA ELEMENT)
              (OMEGA
               (DISCLOSE
                (IF (AND)
                    (FUNCALL
                     #'(LAMBDA (OMEGA &OPTIONAL AXES)
                         (IF AXES
                             (RE-ENCLOSE OMEGA
                                         (EACH
                                          (LAMBDA (AXEL)
                                            (- AXEL
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM)))
                                          (FIRST AXES)))
                             (IF (LOOP FOR DIM IN (DIMS OMEGA)
                                       ALWAYS (= 1 DIM))
                                 OMEGA
                                 (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT
                                             OMEGA))))
                     (VECTOR 1 2 3) (LIST))))))
          (DISCLOSE
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA ALPHA)
                    (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                OMEGA ALPHA)))))
      (VECTOR 1 2 3))
     (LET ((INVERSE
            (OUTER
             (LAMBDA (OMEGA ALPHA)
               (LET ((OMEGA (ENCLOSE OMEGA)) (ALPHA (ENCLOSE ALPHA)))
                 (IF (IS-SINGLETON OMEGA)
                     (LET ((PLACEHOLDER ALPHA))
                       (SETQ ALPHA OMEGA
                             OMEGA PLACEHOLDER)))
                 (DISCLOSE
                  (IF (AND)
                      (FUNCALL
                       #'(LAMBDA (OMEGA ALPHA)
                           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                       OMEGA ALPHA)))))
             (VECTOR 1 2 3)
             (IF (AND)
                 (FUNCALL
                  #'(LAMBDA (OMEGA &OPTIONAL AXES)
                      (IF AXES
                          (RE-ENCLOSE OMEGA
                                      (EACH
                                       (LAMBDA (AXEL)
                                         (- AXEL
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                       (FIRST AXES)))
                          (IF (LOOP FOR DIM IN (DIMS OMEGA)
                                    ALWAYS (= 1 DIM))
                              OMEGA
                              (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
                  (VECTOR 1 2 3) (LIST))))))
       (IF (NOT (IS-SINGLETON (VECTOR 1 2 3)))
           INVERSE
           (PERMUTE (REVERSE (IOTA (RANK INVERSE))) INVERSE))))
 NIL) 
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
(:NXT ""
 ((3 2 1 (:FN #\SUBSET_OF) (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE)
   (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1))) 
"" 
(:CLOS
 (((3 2 1 (:FN #\SUBSET_OF) (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE)
    (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)))) 
(:EXX
 (3 2 1 (:FN #\SUBSET_OF) (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE)
  (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)
 (VECTOR 1 2 3)
 ((:FN #\SUBSET_OF) (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE)
  (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)) 
(:EXX
 (((3 2 1 (:FN #\SUBSET_OF) (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE)
    (:OP :PIVOTAL #\.) (:OP :PIVOTAL #\RING_OPERATOR) 3 2 1)))
 (IF (IS-SINGLETON
      (IF (AND)
          (FUNCALL
           #'(LAMBDA (OMEGA &OPTIONAL AXES)
               (IF AXES
                   (RE-ENCLOSE OMEGA
                               (EACH
                                (LAMBDA (AXEL)
                                  (- AXEL
                                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                                (FIRST AXES)))
                   (IF (LOOP FOR DIM IN (DIMS OMEGA)
                             ALWAYS (= 1 DIM))
                       OMEGA
                       (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
           (VECTOR 1 2 3) (LIST))))
     (EACH
      (LAMBDA (ELEMENT)
        (LET ((ALPHA ELEMENT)
              (OMEGA
               (DISCLOSE
                (IF (AND)
                    (FUNCALL
                     #'(LAMBDA (OMEGA &OPTIONAL AXES)
                         (IF AXES
                             (RE-ENCLOSE OMEGA
                                         (EACH
                                          (LAMBDA (AXEL)
                                            (- AXEL
                                               (OF-STATE *APRIL-IDIOM*
                                                         :COUNT-FROM)))
                                          (FIRST AXES)))
                             (IF (LOOP FOR DIM IN (DIMS OMEGA)
                                       ALWAYS (= 1 DIM))
                                 OMEGA
                                 (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT
                                             OMEGA))))
                     (VECTOR 1 2 3) (LIST))))))
          (DISCLOSE
           (IF (AND (IS-SINGLETON ALPHA))
               (FUNCALL
                #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                    (IF (VECTORP OMEGA)
                        (LET ((NEW-ARRAY (COPY-ARRAY OMEGA)))
                          (FUNCALL (MAKE-ROTATOR ALPHA) NEW-ARRAY)
                          NEW-ARRAY)
                        (IF (ARRAYP OMEGA)
                            (APPLY-MARGINAL (MAKE-ROTATOR ALPHA) OMEGA
                                            (IF AXES
                                                (1- (AREF (FIRST AXES) 0)))
                                            (1- (RANK OMEGA))))))
                OMEGA (DISCLOSE ALPHA) (LIST))))))
      (VECTOR 1 2 3))
     (LET ((INVERSE
            (OUTER
             (LAMBDA (OMEGA ALPHA)
               (LET ((OMEGA (ENCLOSE OMEGA)) (ALPHA (ENCLOSE ALPHA)))
                 (IF (IS-SINGLETON OMEGA)
                     (LET ((PLACEHOLDER ALPHA))
                       (SETQ ALPHA OMEGA
                             OMEGA PLACEHOLDER)))
                 (DISCLOSE
                  (IF (AND (IS-SINGLETON ALPHA))
                      (FUNCALL
                       #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                           (IF (VECTORP OMEGA)
                               (LET ((NEW-ARRAY (COPY-ARRAY OMEGA)))
                                 (FUNCALL (MAKE-ROTATOR ALPHA) NEW-ARRAY)
                                 NEW-ARRAY)
                               (IF (ARRAYP OMEGA)
                                   (APPLY-MARGINAL (MAKE-ROTATOR ALPHA) OMEGA
                                                   (IF AXES
                                                       (1-
                                                        (AREF (FIRST AXES) 0)))
                                                   (1- (RANK OMEGA))))))
                       OMEGA (DISCLOSE ALPHA) (LIST))))))
             (VECTOR 1 2 3)
             (IF (AND)
                 (FUNCALL
                  #'(LAMBDA (OMEGA &OPTIONAL AXES)
                      (IF AXES
                          (RE-ENCLOSE OMEGA
                                      (EACH
                                       (LAMBDA (AXEL)
                                         (- AXEL
                                            (OF-STATE *APRIL-IDIOM*
                                                      :COUNT-FROM)))
                                       (FIRST AXES)))
                          (IF (LOOP FOR DIM IN (DIMS OMEGA)
                                    ALWAYS (= 1 DIM))
                              OMEGA
                              (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
                  (VECTOR 1 2 3) (LIST))))))
       (IF (NOT (IS-SINGLETON (VECTOR 1 2 3)))
           INVERSE
           (PERMUTE (REVERSE (IOTA (RANK INVERSE))) INVERSE))))
 NIL) 
  [32m✓ [90m#(#(2 3 1) #(3 1 2) #(1 2 3)) is expected to be #(#(2 3 1) #(3 1 2) #(1 2 3))[0m 
[0m

[¨] Each
(:NXT ""
 ((3 2 1 (:OP :LATERAL #\DIAERESIS) (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)))) 
"" 
(:CLOS
 (((3 2 1 (:OP :LATERAL #\DIAERESIS) (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA))))) 
(:EXX (3 2 1 (:OP :LATERAL #\DIAERESIS) (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA))
 (VECTOR 1 2 3) ((:OP :LATERAL #\DIAERESIS) (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA))) 
(:EXX (((3 2 1 (:OP :LATERAL #\DIAERESIS) (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA))))
 (LET ((NEW-ARRAY (COPY-ARRAY (VECTOR 1 2 3))))
   (EACH
    (LAMBDA (ITEM)
      (DISCLOSE
       (FUNCALL
        (LAMBDA (OMEGA)
          (IF (AND)
              (FUNCALL
               #'(LAMBDA (OMEGA)
                   (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                               (IOTA OMEGA :START
                                     (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
               (IF (ARRAYP OMEGA)
                   (DISCLOSE OMEGA)
                   OMEGA))))
        ITEM)))
    NEW-ARRAY))
 NIL) 
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
(:NXT ""
 ((5 4 3 2 1 (:FN #\SUBSET_OF) (:OP :LATERAL #\DIAERESIS)
   (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE) -1 1))) 
"" 
(:CLOS
 (((5 4 3 2 1 (:FN #\SUBSET_OF) (:OP :LATERAL #\DIAERESIS)
    (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE) -1 1)))) 
(:EXX
 (5 4 3 2 1 (:FN #\SUBSET_OF) (:OP :LATERAL #\DIAERESIS)
  (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE) -1 1)
 (VECTOR 1 2 3 4 5)
 ((:FN #\SUBSET_OF) (:OP :LATERAL #\DIAERESIS)
  (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE) -1 1)) 
(:EXX
 (((5 4 3 2 1 (:FN #\SUBSET_OF) (:OP :LATERAL #\DIAERESIS)
    (:FN #\APL_FUNCTIONAL_SYMBOL_CIRCLE_STILE) -1 1)))
 (LET ((NEW-ARRAY
        (COPY-ARRAY
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA &OPTIONAL AXES)
                  (IF AXES
                      (RE-ENCLOSE OMEGA
                                  (EACH
                                   (LAMBDA (AXEL)
                                     (- AXEL
                                        (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                                   (FIRST AXES)))
                      (IF (LOOP FOR DIM IN (DIMS OMEGA)
                                ALWAYS (= 1 DIM))
                          OMEGA
                          (MAKE-ARRAY (LIST 1) :INITIAL-ELEMENT OMEGA))))
              (VECTOR 1 2 3 4 5) (LIST))))))
   (LET ((RIGHT-ARG (VECTOR 1 -1)))
     (MAKE-ARRAY (DIMS RIGHT-ARG) :INITIAL-CONTENTS
                 (LOOP FOR INDEX FROM 0 TO (1- (LENGTH RIGHT-ARG))
                       COLLECT (DISCLOSE
                                (FUNCALL
                                 (LAMBDA (OMEGA ALPHA)
                                   (IF (AND (IS-SINGLETON ALPHA))
                                       (FUNCALL
                                        #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                            (IF (VECTORP OMEGA)
                                                (LET ((NEW-ARRAY
                                                       (COPY-ARRAY OMEGA)))
                                                  (FUNCALL (MAKE-ROTATOR ALPHA)
                                                           NEW-ARRAY)
                                                  NEW-ARRAY)
                                                (IF (ARRAYP OMEGA)
                                                    (APPLY-MARGINAL
                                                     (MAKE-ROTATOR ALPHA) OMEGA
                                                     (IF AXES
                                                         (1-
                                                          (AREF (FIRST AXES)
                                                                0)))
                                                     (1- (RANK OMEGA))))))
                                        OMEGA (DISCLOSE ALPHA) (LIST))))
                                 (AREF NEW-ARRAY 0)
                                 (VECTOR (AREF RIGHT-ARG INDEX))))))))
 NIL) 
  [32m✓ [90m#(#(2 3 4 5 1) #(5 1 2 3 4)) is expected to be #(#(2 3 4 5 1) #(5 1 2 3 4))[0m 
[0m

[⍨] Commute
(:NXT ""
 ((10 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_TILDE_DIAERESIS) (:FN #\-) 5))) 
"" 
(:CLOS
 (((10 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_TILDE_DIAERESIS) (:FN #\-) 5)))) 
(:EXX (10 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_TILDE_DIAERESIS) (:FN #\-) 5)
 (VECTOR 10)
 ((:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_TILDE_DIAERESIS) (:FN #\-) 5)) 
(:EXX
 (((10 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_TILDE_DIAERESIS) (:FN #\-) 5)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
              (FUNCALL #'- VEX::ALPHA VEX::OMEGA))
          (VECTOR 5) (VECTOR 10))
 NIL) 
  [32m✓ [90m5 is expected to be 5[0m 
[0m
(:NXT ""
 ((10 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_TILDE_DIAERESIS) (:FN #\+)))) 
"" 
(:CLOS
 (((10 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_TILDE_DIAERESIS) (:FN #\+))))) 
(:EXX (10 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_TILDE_DIAERESIS) (:FN #\+))
 (VECTOR 10) ((:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_TILDE_DIAERESIS) (:FN #\+))) 
(:EXX (((10 (:OP :LATERAL #\APL_FUNCTIONAL_SYMBOL_TILDE_DIAERESIS) (:FN #\+))))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 10) (VECTOR 10)) NIL) 
  [32m✓ [90m20 is expected to be 20[0m 
[0m

[∘] Compose
(:NXT " fn 2 3 4⍴⍳9"
 (((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
   (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5738))) 
" fn 2 3 4⍴⍳9" 
(:CLOS
 ((((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
    (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :LATERAL #\LEFTWARDS_ARROW)
    #:G5738)))) 
(:EXX
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5738)
 :FUN-COMP
 ((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5738)) 
(:EXX
 ((((:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
    (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :LATERAL #\LEFTWARDS_ARROW)
    #:G5738)))
 (SETQ #:G5738
         (LAMBDA (OMEGA-COMP &OPTIONAL ALPHA-COMP)
           (IF ALPHA-COMP
               (FUNCALL
                (LAMBDA (OMEGA ALPHA)
                  (DECLARE (IGNORABLE ALPHA))
                  (IF (AND)
                      (FUNCALL
                       #'(LAMBDA (OMEGA ALPHA)
                           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                       OMEGA ALPHA)))
                (ENCLOSE ALPHA-COMP)
                (FUNCALL
                 (LAMBDA (OMEGA)
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA)
                            (LET ((OMEGA-DIMS (DIMS OMEGA)))
                              (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS))
                                          :INITIAL-CONTENTS OMEGA-DIMS)))
                        OMEGA)))
                 (ENCLOSE OMEGA-COMP)))
               (FUNCALL
                (LAMBDA (OMEGA)
                  (IF (AND)
                      (FUNCALL
                       #'(LAMBDA (OMEGA)
                           (LET ((OMEGA-DIMS (DIMS OMEGA)))
                             (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS))
                                         :INITIAL-CONTENTS OMEGA-DIMS)))
                       OMEGA)))
                (FUNCALL
                 (LAMBDA (OMEGA)
                   (IF (AND)
                       (FUNCALL
                        #'(LAMBDA (OMEGA)
                            (LET ((OMEGA-DIMS (DIMS OMEGA)))
                              (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS))
                                          :INITIAL-CONTENTS OMEGA-DIMS)))
                        OMEGA)))
                 (ENCLOSE OMEGA-COMP))))))
 NIL) 
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   #:G5738))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 #:G5738)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  #:G5738)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  #:G5738)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 #:G5738)))
 (FUNCALL #:G5738
          (IF (AND)
              (FUNCALL
               #'(LAMBDA (OMEGA ALPHA)
                   (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
               (IF (AND)
                   (FUNCALL
                    #'(LAMBDA (OMEGA)
                        (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                    (IOTA OMEGA :START
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM))))
                    (IF (ARRAYP (VECTOR 9))
                        (DISCLOSE (VECTOR 9))
                        (VECTOR 9))))
               (VECTOR 2 3 4))))
 NIL) 
  [32m✓ [90m3 is expected to be 3[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
   (:FN #\APL_FUNCTIONAL_SYMBOL_RHO)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
    (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
    (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))))
 (FUNCALL
  (LAMBDA (OMEGA-COMP &OPTIONAL ALPHA-COMP)
    (IF ALPHA-COMP
        (FUNCALL
         (LAMBDA (OMEGA ALPHA)
           (DECLARE (IGNORABLE ALPHA))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA ALPHA)
                    (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                OMEGA ALPHA)))
         (ENCLOSE ALPHA-COMP)
         (FUNCALL
          (LAMBDA (OMEGA)
            (IF (AND)
                (FUNCALL
                 #'(LAMBDA (OMEGA)
                     (LET ((OMEGA-DIMS (DIMS OMEGA)))
                       (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS)) :INITIAL-CONTENTS
                                   OMEGA-DIMS)))
                 OMEGA)))
          (ENCLOSE OMEGA-COMP)))
        (FUNCALL
         (LAMBDA (OMEGA)
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (LET ((OMEGA-DIMS (DIMS OMEGA)))
                      (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS)) :INITIAL-CONTENTS
                                  OMEGA-DIMS)))
                OMEGA)))
         (FUNCALL
          (LAMBDA (OMEGA)
            (IF (AND)
                (FUNCALL
                 #'(LAMBDA (OMEGA)
                     (LET ((OMEGA-DIMS (DIMS OMEGA)))
                       (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS)) :INITIAL-CONTENTS
                                   OMEGA-DIMS)))
                 OMEGA)))
          (ENCLOSE OMEGA-COMP)))))
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 9))
                (DISCLOSE (VECTOR 9))
                (VECTOR 9))))
       (VECTOR 2 3 4)))
  NIL)
 NIL) 
  [32m✓ [90m3 is expected to be 3[0m 
[0m
(:NXT ""
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
   (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
   (:FN #\APL_FUNCTIONAL_SYMBOL_RHO)))) 
"" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
    (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
    (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
  (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
    (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) (:OP :PIVOTAL #\RING_OPERATOR)
    (:FN #\APL_FUNCTIONAL_SYMBOL_RHO))))
 (FUNCALL
  (LAMBDA (OMEGA-COMP &OPTIONAL ALPHA-COMP)
    (IF ALPHA-COMP
        (FUNCALL
         (LAMBDA (OMEGA ALPHA)
           (DECLARE (IGNORABLE ALPHA))
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA ALPHA)
                    (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
                OMEGA ALPHA)))
         (ENCLOSE ALPHA-COMP)
         (FUNCALL
          (LAMBDA (OMEGA)
            (IF (AND)
                (FUNCALL
                 #'(LAMBDA (OMEGA)
                     (LET ((OMEGA-DIMS (DIMS OMEGA)))
                       (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS)) :INITIAL-CONTENTS
                                   OMEGA-DIMS)))
                 OMEGA)))
          (FUNCALL
           (LAMBDA (OMEGA)
             (IF (AND)
                 (FUNCALL
                  #'(LAMBDA (OMEGA)
                      (LET ((OMEGA-DIMS (DIMS OMEGA)))
                        (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS))
                                    :INITIAL-CONTENTS OMEGA-DIMS)))
                  OMEGA)))
           (ENCLOSE OMEGA-COMP))))
        (FUNCALL
         (LAMBDA (OMEGA)
           (IF (AND)
               (FUNCALL
                #'(LAMBDA (OMEGA)
                    (LET ((OMEGA-DIMS (DIMS OMEGA)))
                      (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS)) :INITIAL-CONTENTS
                                  OMEGA-DIMS)))
                OMEGA)))
         (FUNCALL
          (LAMBDA (OMEGA)
            (IF (AND)
                (FUNCALL
                 #'(LAMBDA (OMEGA)
                     (LET ((OMEGA-DIMS (DIMS OMEGA)))
                       (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS)) :INITIAL-CONTENTS
                                   OMEGA-DIMS)))
                 OMEGA)))
          (FUNCALL
           (LAMBDA (OMEGA)
             (IF (AND)
                 (FUNCALL
                  #'(LAMBDA (OMEGA)
                      (LET ((OMEGA-DIMS (DIMS OMEGA)))
                        (MAKE-ARRAY (LIST (LENGTH OMEGA-DIMS))
                                    :INITIAL-CONTENTS OMEGA-DIMS)))
                  OMEGA)))
           (ENCLOSE OMEGA-COMP))))))
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 9))
                (DISCLOSE (VECTOR 9))
                (VECTOR 9))))
       (VECTOR 2 3 4)))
  NIL)
 NIL) 
  [32m✓ [90m1 is expected to be 1[0m 
[0m
(:NXT "" ((30 ((5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\DIVISION_SIGN)))))) 
"" 
(:CLOS (((30 ((5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\DIVISION_SIGN))))))) 
(:CLOS (((5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\DIVISION_SIGN))))) 
(:EXX (5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\DIVISION_SIGN)) (VECTOR 5)
 ((:OP :PIVOTAL #\RING_OPERATOR) (:FN #\DIVISION_SIGN))) 
(:EXX (30 ((5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\DIVISION_SIGN))))
 (VECTOR
  (LAMBDA (OMEGA)
    (FUNCALL
     (LAMBDA (OMEGA ALPHA)
       (FUNCALL #'APPLY-SCALAR-DYADIC
                #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                    (FUNCALL #'/ VEX::ALPHA VEX::OMEGA))
                OMEGA ALPHA))
     (VECTOR 5) OMEGA))
  30)
 NIL) 
(:EXX (((30 ((5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\DIVISION_SIGN))))))
 (VECTOR
  (LAMBDA (OMEGA)
    (FUNCALL
     (LAMBDA (OMEGA ALPHA)
       (FUNCALL #'APPLY-SCALAR-DYADIC
                #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                    (FUNCALL #'/ VEX::ALPHA VEX::OMEGA))
                OMEGA ALPHA))
     (VECTOR 5) OMEGA))
  30)
 NIL) 
  [31m× #(#<FUNCTION (LAMBDA (OMEGA)) {1005BFEF0B}> 30) is expected to be 6 
[0m
(:NXT ""
 ((25 16 4
   ((0.5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\*)
     (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+)))
   (:FN #\MULTIPLICATION_SIGN) 10000 (:FN #\LEFT_FLOOR)))) 
"" 
(:CLOS
 (((25 16 4
    ((0.5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\*)
      (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+)))
    (:FN #\MULTIPLICATION_SIGN) 10000 (:FN #\LEFT_FLOOR))))) 
(:CLOS
 (((0.5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\*) (:OP :PIVOTAL #\RING_OPERATOR)
    (:FN #\+)))
  (:FN #\MULTIPLICATION_SIGN) 10000 (:FN #\LEFT_FLOOR))) 
(:EXX
 (0.5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\*) (:OP :PIVOTAL #\RING_OPERATOR)
  (:FN #\+))
 (VECTOR 0.5)
 ((:OP :PIVOTAL #\RING_OPERATOR) (:FN #\*) (:OP :PIVOTAL #\RING_OPERATOR)
  (:FN #\+))) 
(:EXX
 (25 16 4
  ((0.5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\*) (:OP :PIVOTAL #\RING_OPERATOR)
    (:FN #\+)))
  (:FN #\MULTIPLICATION_SIGN) 10000 (:FN #\LEFT_FLOOR))
 (VECTOR
  (LAMBDA (OMEGA)
    (FUNCALL
     (LAMBDA (OMEGA ALPHA)
       (FUNCALL
        (LAMBDA (OMEGA-COMP &OPTIONAL ALPHA-COMP)
          (IF ALPHA-COMP
              (FUNCALL
               (LAMBDA (OMEGA ALPHA)
                 (DECLARE (IGNORABLE ALPHA))
                 (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
               (ENCLOSE ALPHA-COMP)
               (FUNCALL
                (LAMBDA (OMEGA) (FUNCALL #'APPLY-SCALAR-MONADIC #'EXP OMEGA))
                (ENCLOSE OMEGA-COMP)))
              (FUNCALL
               (LAMBDA (OMEGA)
                 (FUNCALL #'APPLY-SCALAR-MONADIC
                          #'(LAMBDA (OMEGA)
                              (IF (COMPLEXP OMEGA)
                                  (COMPLEX (REALPART OMEGA)
                                           (- (IMAGPART OMEGA)))
                                  OMEGA))
                          OMEGA))
               (FUNCALL
                (LAMBDA (OMEGA) (FUNCALL #'APPLY-SCALAR-MONADIC #'EXP OMEGA))
                (ENCLOSE OMEGA-COMP)))))
        OMEGA ALPHA))
     (VECTOR 0.5) OMEGA))
  4 16 25)
 ((:FN #\MULTIPLICATION_SIGN) 10000 (:FN #\LEFT_FLOOR))) 
(:EXX
 (((25 16 4
    ((0.5 (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\*)
      (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+)))
    (:FN #\MULTIPLICATION_SIGN) 10000 (:FN #\LEFT_FLOOR))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR
          (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                   (VECTOR
                    (LAMBDA (OMEGA)
                      (FUNCALL
                       (LAMBDA (OMEGA ALPHA)
                         (FUNCALL
                          (LAMBDA (OMEGA-COMP &OPTIONAL ALPHA-COMP)
                            (IF ALPHA-COMP
                                (FUNCALL
                                 (LAMBDA (OMEGA ALPHA)
                                   (DECLARE (IGNORABLE ALPHA))
                                   (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA
                                            ALPHA))
                                 (ENCLOSE ALPHA-COMP)
                                 (FUNCALL
                                  (LAMBDA (OMEGA)
                                    (FUNCALL #'APPLY-SCALAR-MONADIC #'EXP
                                             OMEGA))
                                  (ENCLOSE OMEGA-COMP)))
                                (FUNCALL
                                 (LAMBDA (OMEGA)
                                   (FUNCALL #'APPLY-SCALAR-MONADIC
                                            #'(LAMBDA (OMEGA)
                                                (IF (COMPLEXP OMEGA)
                                                    (COMPLEX (REALPART OMEGA)
                                                             (-
                                                              (IMAGPART
                                                               OMEGA)))
                                                    OMEGA))
                                            OMEGA))
                                 (FUNCALL
                                  (LAMBDA (OMEGA)
                                    (FUNCALL #'APPLY-SCALAR-MONADIC #'EXP
                                             OMEGA))
                                  (ENCLOSE OMEGA-COMP)))))
                          OMEGA ALPHA))
                       (VECTOR 0.5) OMEGA))
                    4 16 25)
                   (VECTOR 10000)))
 NIL) 
  [31m× Raised an error The value
                      #<FUNCTION (LAMBDA (OMEGA)) {1005BFF90B}>
                    is not of type
                      NUMBER (expected: #(56487 176487 266487))[0m

(:NXT " fn 2"
 (((:FN #\-) (:OP :PIVOTAL #\RING_OPERATOR) 5 (:OP :LATERAL #\LEFTWARDS_ARROW)
   #:G5764))) 
" fn 2" 
(:CLOS
 ((((:FN #\-) (:OP :PIVOTAL #\RING_OPERATOR) 5 (:OP :LATERAL #\LEFTWARDS_ARROW)
    #:G5764)))) 
(:EXX
 ((:FN #\-) (:OP :PIVOTAL #\RING_OPERATOR) 5 (:OP :LATERAL #\LEFTWARDS_ARROW)
  #:G5764)
 :FUN-COMP
 ((:FN #\-) (:OP :PIVOTAL #\RING_OPERATOR) 5 (:OP :LATERAL #\LEFTWARDS_ARROW)
  #:G5764)) 
(:EXX
 ((((:FN #\-) (:OP :PIVOTAL #\RING_OPERATOR) 5 (:OP :LATERAL #\LEFTWARDS_ARROW)
    #:G5764)))
 (SETQ #:G5764
         (LAMBDA (OMEGA)
           (FUNCALL
            (LAMBDA (OMEGA ALPHA)
              (FUNCALL #'APPLY-SCALAR-DYADIC
                       #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                           (FUNCALL #'- VEX::ALPHA VEX::OMEGA))
                       OMEGA ALPHA))
            OMEGA (VECTOR 5))))
 NIL) 
(:NXT "" ((2 #:G5764))) 
"" 
(:CLOS (((2 #:G5764)))) 
(:EXX (2 #:G5764) (VECTOR 2) (#:G5764)) 
(:EXX (((2 #:G5764))) (FUNCALL #:G5764 (VECTOR 2)) NIL) 
  [32m✓ [90m3 is expected to be 3[0m 
[0m
(:NXT ""
 ((12 8 5
   (((:FN #\*) (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+)
     (:OP :PIVOTAL #\RING_OPERATOR) 0.5))
   (:FN #\LEFT_FLOOR)))) 
"" 
(:CLOS
 (((12 8 5
    (((:FN #\*) (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+)
      (:OP :PIVOTAL #\RING_OPERATOR) 0.5))
    (:FN #\LEFT_FLOOR))))) 
(:CLOS
 ((((:FN #\*) (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+)
    (:OP :PIVOTAL #\RING_OPERATOR) 0.5))
  (:FN #\LEFT_FLOOR))) 
(:EXX
 ((:FN #\*) (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+)
  (:OP :PIVOTAL #\RING_OPERATOR) 0.5)
 :FUN-COMP
 ((:FN #\*) (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+)
  (:OP :PIVOTAL #\RING_OPERATOR) 0.5)) 
(:EXX
 (12 8 5
  (((:FN #\*) (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+)
    (:OP :PIVOTAL #\RING_OPERATOR) 0.5))
  (:FN #\LEFT_FLOOR))
 (VECTOR
  (LAMBDA (OMEGA-COMP &OPTIONAL ALPHA-COMP)
    (IF ALPHA-COMP
        (FUNCALL
         (LAMBDA (OMEGA ALPHA)
           (DECLARE (IGNORABLE ALPHA))
           (FUNCALL
            (LAMBDA (OMEGA &OPTIONAL ALPHA)
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
            OMEGA (VECTOR 0.5)))
         (ENCLOSE ALPHA-COMP)
         (FUNCALL (LAMBDA (OMEGA) (FUNCALL #'APPLY-SCALAR-MONADIC #'EXP OMEGA))
                  (ENCLOSE OMEGA-COMP)))
        (FUNCALL
         (LAMBDA (OMEGA)
           (FUNCALL
            (LAMBDA (OMEGA &OPTIONAL ALPHA)
              (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
            OMEGA (VECTOR 0.5)))
         (FUNCALL (LAMBDA (OMEGA) (FUNCALL #'APPLY-SCALAR-MONADIC #'EXP OMEGA))
                  (ENCLOSE OMEGA-COMP)))))
  5 8 12)
 ((:FN #\LEFT_FLOOR))) 
(:EXX
 (((12 8 5
    (((:FN #\*) (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+)
      (:OP :PIVOTAL #\RING_OPERATOR) 0.5))
    (:FN #\LEFT_FLOOR))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR
          (VECTOR
           (LAMBDA (OMEGA-COMP &OPTIONAL ALPHA-COMP)
             (IF ALPHA-COMP
                 (FUNCALL
                  (LAMBDA (OMEGA ALPHA)
                    (DECLARE (IGNORABLE ALPHA))
                    (FUNCALL
                     (LAMBDA (OMEGA &OPTIONAL ALPHA)
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                     OMEGA (VECTOR 0.5)))
                  (ENCLOSE ALPHA-COMP)
                  (FUNCALL
                   (LAMBDA (OMEGA)
                     (FUNCALL #'APPLY-SCALAR-MONADIC #'EXP OMEGA))
                   (ENCLOSE OMEGA-COMP)))
                 (FUNCALL
                  (LAMBDA (OMEGA)
                    (FUNCALL
                     (LAMBDA (OMEGA &OPTIONAL ALPHA)
                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                     OMEGA (VECTOR 0.5)))
                  (FUNCALL
                   (LAMBDA (OMEGA)
                     (FUNCALL #'APPLY-SCALAR-MONADIC #'EXP OMEGA))
                   (ENCLOSE OMEGA-COMP)))))
           5 8 12))
 NIL) 
  [31m× Raised an error The value
                      #<FUNCTION (LAMBDA
                                     (OMEGA-COMP
                                      &OPTIONAL ALPHA-COMP)) {10080112AB}>
    
                    is not of type
                      REAL (expected: #(148 2981 162755))[0m

(:NXT ""
 ((1 (:OP :LATERAL #\/) 40 (:OP :LATERAL #\/) (:FN #\DIVISION_SIGN)
   (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+) (:FN #\MULTIPLICATION_SIGN) 10000
   (:FN #\LEFT_FLOOR)))) 
"" 
(:CLOS
 (((1 (:OP :LATERAL #\/) 40 (:OP :LATERAL #\/) (:FN #\DIVISION_SIGN)
    (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+) (:FN #\MULTIPLICATION_SIGN) 10000
    (:FN #\LEFT_FLOOR))))) 
(:EXX
 (1 (:OP :LATERAL #\/) 40 (:OP :LATERAL #\/) (:FN #\DIVISION_SIGN)
  (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+) (:FN #\MULTIPLICATION_SIGN) 10000
  (:FN #\LEFT_FLOOR))
 (VECTOR 1)
 ((:OP :LATERAL #\/) 40 (:OP :LATERAL #\/) (:FN #\DIVISION_SIGN)
  (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+) (:FN #\MULTIPLICATION_SIGN) 10000
  (:FN #\LEFT_FLOOR))) 
(:EXX
 (((1 (:OP :LATERAL #\/) 40 (:OP :LATERAL #\/) (:FN #\DIVISION_SIGN)
    (:OP :PIVOTAL #\RING_OPERATOR) (:FN #\+) (:FN #\MULTIPLICATION_SIGN) 10000
    (:FN #\LEFT_FLOOR))))
 (FUNCALL #'APPLY-SCALAR-MONADIC #'FLOOR
          (FUNCALL #'APPLY-SCALAR-DYADIC #'*
                   (LET ((NEW-ARRAY
                          (COPY-ARRAY
                           (IF (AND)
                               (FUNCALL
                                #'(LAMBDA (OMEGA ALPHA &OPTIONAL AXES)
                                    (EXPAND-ARRAY (ARRAY-TO-LIST ALPHA) OMEGA
                                                  (IF AXES
                                                      (- (RANK OMEGA)
                                                         (-
                                                          (AREF (FIRST AXES) 0)
                                                          (1-
                                                           (OF-STATE
                                                            *APRIL-IDIOM*
                                                            :COUNT-FROM)))))
                                                  0 :COMPRESS-MODE T))
                                (VECTOR 1) (VECTOR 40) (LIST))))))
                     (DISCLOSE
                      (IF (VECTORP NEW-ARRAY)
                          (FUNCALL
                           #<FUNCTION (LAMBDA (FUNCTION INPUT)
                                        :IN
                                        "/Users/owner/Documents/src/april/april.lisp") {227DB8BB}>
                           (LAMBDA (OMEGA ALPHA)
                             (FUNCALL
                              (LAMBDA (OMEGA-COMP &OPTIONAL ALPHA-COMP)
                                (IF ALPHA-COMP
                                    (FUNCALL
                                     (LAMBDA (OMEGA ALPHA)
                                       (DECLARE (IGNORABLE ALPHA))
                                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA
                                                ALPHA))
                                     (ENCLOSE ALPHA-COMP)
                                     (FUNCALL
                                      (LAMBDA (OMEGA)
                                        (FUNCALL #'APPLY-SCALAR-MONADIC #'/
                                                 OMEGA))
                                      (ENCLOSE OMEGA-COMP)))
                                    (FUNCALL
                                     (LAMBDA (OMEGA)
                                       (FUNCALL #'APPLY-SCALAR-MONADIC
                                                #'(LAMBDA (OMEGA)
                                                    (IF (COMPLEXP OMEGA)
                                                        (COMPLEX
                                                         (REALPART OMEGA)
                                                         (- (IMAGPART OMEGA)))
                                                        OMEGA))
                                                OMEGA))
                                     (FUNCALL
                                      (LAMBDA (OMEGA)
                                        (FUNCALL #'APPLY-SCALAR-MONADIC #'/
                                                 OMEGA))
                                      (ENCLOSE OMEGA-COMP)))))
                              OMEGA ALPHA))
                           NEW-ARRAY)
                          (FUNCALL
                           #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                                        :IN
                                        "/Users/owner/Documents/src/april/april.lisp") {227DB71B}>
                           (LAMBDA (OMEGA ALPHA)
                             (FUNCALL
                              (LAMBDA (OMEGA-COMP &OPTIONAL ALPHA-COMP)
                                (IF ALPHA-COMP
                                    (FUNCALL
                                     (LAMBDA (OMEGA ALPHA)
                                       (DECLARE (IGNORABLE ALPHA))
                                       (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA
                                                ALPHA))
                                     (ENCLOSE ALPHA-COMP)
                                     (FUNCALL
                                      (LAMBDA (OMEGA)
                                        (FUNCALL #'APPLY-SCALAR-MONADIC #'/
                                                 OMEGA))
                                      (ENCLOSE OMEGA-COMP)))
                                    (FUNCALL
                                     (LAMBDA (OMEGA)
                                       (FUNCALL #'APPLY-SCALAR-MONADIC
                                                #'(LAMBDA (OMEGA)
                                                    (IF (COMPLEXP OMEGA)
                                                        (COMPLEX
                                                         (REALPART OMEGA)
                                                         (- (IMAGPART OMEGA)))
                                                        OMEGA))
                                                OMEGA))
                                     (FUNCALL
                                      (LAMBDA (OMEGA)
                                        (FUNCALL #'APPLY-SCALAR-MONADIC #'/
                                                 OMEGA))
                                      (ENCLOSE OMEGA-COMP)))))
                              OMEGA ALPHA))
                           NEW-ARRAY
                           (IF (LIST)
                               (1- (AREF (FIRST (LIST)) 0))
                               (1- (RANK NEW-ARRAY)))))))
                   (VECTOR 10000)))
 NIL) 
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m
(:NXT ""
 ((8 5 2 (:OP :LATERAL #\DIAERESIS) (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
   (:OP :PIVOTAL #\RING_OPERATOR) (:OP :LATERAL #\/) (:FN #\+)))) 
"" 
(:CLOS
 (((8 5 2 (:OP :LATERAL #\DIAERESIS) (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
    (:OP :PIVOTAL #\RING_OPERATOR) (:OP :LATERAL #\/) (:FN #\+))))) 
(:EXX
 (8 5 2 (:OP :LATERAL #\DIAERESIS) (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
  (:OP :PIVOTAL #\RING_OPERATOR) (:OP :LATERAL #\/) (:FN #\+))
 (VECTOR 2 5 8)
 ((:OP :LATERAL #\DIAERESIS) (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
  (:OP :PIVOTAL #\RING_OPERATOR) (:OP :LATERAL #\/) (:FN #\+))) 
(:EXX
 (((8 5 2 (:OP :LATERAL #\DIAERESIS) (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA)
    (:OP :PIVOTAL #\RING_OPERATOR) (:OP :LATERAL #\/) (:FN #\+))))
 (LET ((NEW-ARRAY (COPY-ARRAY (VECTOR 2 5 8))))
   (EACH
    (LAMBDA (ITEM)
      (DISCLOSE
       (FUNCALL
        (LAMBDA (OMEGA)
          (FUNCALL
           (LAMBDA (OMEGA-COMP &OPTIONAL ALPHA-COMP)
             (IF ALPHA-COMP
                 (FUNCALL
                  (LAMBDA (OMEGA ALPHA)
                    (DECLARE (IGNORABLE ALPHA))
                    (LET ((NEW-ARRAY (COPY-ARRAY OMEGA)))
                      (DISCLOSE
                       (IF (VECTORP NEW-ARRAY)
                           (FUNCALL
                            #<FUNCTION (LAMBDA (FUNCTION INPUT)
                                         :IN
                                         "/Users/owner/Documents/src/april/april.lisp") {227DB8BB}>
                            (LAMBDA (OMEGA ALPHA)
                              (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                            NEW-ARRAY)
                           (FUNCALL
                            #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                                         :IN
                                         "/Users/owner/Documents/src/april/april.lisp") {227DB71B}>
                            (LAMBDA (OMEGA ALPHA)
                              (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                            NEW-ARRAY
                            (IF (LIST)
                                (1- (AREF (FIRST (LIST)) 0))
                                (1- (RANK NEW-ARRAY))))))))
                  (ENCLOSE ALPHA-COMP)
                  (FUNCALL
                   (LAMBDA (OMEGA)
                     (IF (AND)
                         (FUNCALL
                          #'(LAMBDA (OMEGA)
                              (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                          (IOTA OMEGA :START
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                          (IF (ARRAYP OMEGA)
                              (DISCLOSE OMEGA)
                              OMEGA))))
                   (ENCLOSE OMEGA-COMP)))
                 (FUNCALL
                  (LAMBDA (OMEGA)
                    (LET ((NEW-ARRAY (COPY-ARRAY OMEGA)))
                      (DISCLOSE
                       (IF (VECTORP NEW-ARRAY)
                           (FUNCALL
                            #<FUNCTION (LAMBDA (FUNCTION INPUT)
                                         :IN
                                         "/Users/owner/Documents/src/april/april.lisp") {227DB8BB}>
                            (LAMBDA (OMEGA ALPHA)
                              (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                            NEW-ARRAY)
                           (FUNCALL
                            #<FUNCTION (LAMBDA (FUNCTION INPUT AXIS)
                                         :IN
                                         "/Users/owner/Documents/src/april/april.lisp") {227DB71B}>
                            (LAMBDA (OMEGA ALPHA)
                              (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                            NEW-ARRAY
                            (IF (LIST)
                                (1- (AREF (FIRST (LIST)) 0))
                                (1- (RANK NEW-ARRAY))))))))
                  (FUNCALL
                   (LAMBDA (OMEGA)
                     (IF (AND)
                         (FUNCALL
                          #'(LAMBDA (OMEGA)
                              (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                          (IOTA OMEGA :START
                                                (OF-STATE *APRIL-IDIOM*
                                                          :COUNT-FROM))))
                          (IF (ARRAYP OMEGA)
                              (DISCLOSE OMEGA)
                              OMEGA))))
                   (ENCLOSE OMEGA-COMP)))))
           OMEGA NIL))
        ITEM)))
    NEW-ARRAY))
 NIL) 
  [32m✓ [90m#(3 15 36) is expected to be #(3 15 36)[0m 
[0m

[⍣] Power
(:NXT "" ((⍵ (:FN #\+) 2))) 
"" 
(:CLOS (((⍵ (:FN #\+) 2)))) 
(:EXX (⍵ (:FN #\+) 2) ⍵ ((:FN #\+) 2)) 
(:EXX (((⍵ (:FN #\+) 2))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 2)) NIL) 
(:NXT " fn 5"
 ((3 (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1008753FEB}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5785))) 
(:NXT "" ((⍵ (:FN #\+) 2))) 
"" 
(:CLOS (((⍵ (:FN #\+) 2)))) 
(:EXX (⍵ (:FN #\+) 2) ⍵ ((:FN #\+) 2)) 
(:EXX (((⍵ (:FN #\+) 2))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 2)) NIL) 
" fn 5" 
(:CLOS
 (((3 (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {100877958B}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5785)))) 
(:EXX
 (3 (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100877958B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5785)
 (VECTOR 3)
 ((:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {100877958B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5785)) 
(:EXX
 (((3 (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {100877958B}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5785)))
 (SETQ #:G5785
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (DECLARE (IGNORABLE ALPHA))
           (LET ((#:G5786 (DISCLOSE OMEGA)))
             (LOOP FOR INDEX FROM 0 TO (1- (DISCLOSE 3))
                   DO (SETQ #:G5786
                              (ENCLOSE
                               (FUNCALL
                                (LAMBDA (⍵ &OPTIONAL ⍺)
                                  (DECLARE (IGNORABLE ⍺))
                                  (LET* ((#:G5785 NIL))
                                    (DISCLOSE
                                     (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵
                                              (VECTOR 2)))))
                                (ENCLOSE #:G5786)))))
             #:G5786)))
 NIL) 
(:NXT "" ((5 #:G5785))) 
"" 
(:CLOS (((5 #:G5785)))) 
(:EXX (5 #:G5785) (VECTOR 5) (#:G5785)) 
(:EXX (((5 #:G5785))) (FUNCALL #:G5785 (VECTOR 5)) NIL) ; in: LET* ((#:G5785 :UNDEFINED))
;     (LET* ((#:G5785 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 2))))
; 
; caught STYLE-WARNING:
;   The variable #:G5785 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
  [32m✓ [90m11 is expected to be 11[0m 
[0m
(:NXT "" ((⍵ (:FN #\+) 2))) 
"" 
(:CLOS (((⍵ (:FN #\+) 2)))) 
(:EXX (⍵ (:FN #\+) 2) ⍵ ((:FN #\+) 2)) 
(:EXX (((⍵ (:FN #\+) 2))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 2)) NIL) 
(:NXT ""
 ((9
   ((3 (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
     (:FN
      #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                  :IN
                  FORMAT-FUNCTION) {1008958D9B}>)))))) 
(:NXT "" ((⍵ (:FN #\+) 2))) 
"" 
(:CLOS (((⍵ (:FN #\+) 2)))) 
(:EXX (⍵ (:FN #\+) 2) ⍵ ((:FN #\+) 2)) 
(:EXX (((⍵ (:FN #\+) 2))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 2)) NIL) 
"" 
(:CLOS
 (((9
    ((3 (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
      (:FN
       #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                   :IN
                   FORMAT-FUNCTION) {1008974F9B}>))))))) 
(:CLOS
 (((3 (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008974F9B}>))))) 
(:EXX
 (3 (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008974F9B}>))
 (VECTOR 3)
 ((:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008974F9B}>))) 
(:EXX
 (9
  ((3 (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008974F9B}>))))
 (VECTOR
  (LAMBDA (OMEGA &OPTIONAL ALPHA)
    (DECLARE (IGNORABLE ALPHA))
    (LET ((#:G5792 (DISCLOSE OMEGA)))
      (LOOP FOR INDEX FROM 0 TO (1- (DISCLOSE 3))
            DO (SETQ #:G5792
                       (ENCLOSE
                        (FUNCALL
                         (LAMBDA (⍵ &OPTIONAL ⍺)
                           (DECLARE (IGNORABLE ⍺))
                           (PROGN
                            (DISCLOSE
                             (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵
                                      (VECTOR 2)))))
                         (ENCLOSE #:G5792)))))
      #:G5792))
  9)
 NIL) 
(:EXX
 (((9
    ((3 (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
      (:FN
       #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                   :IN
                   FORMAT-FUNCTION) {1008974F9B}>))))))
 (VECTOR
  (LAMBDA (OMEGA &OPTIONAL ALPHA)
    (DECLARE (IGNORABLE ALPHA))
    (LET ((#:G5792 (DISCLOSE OMEGA)))
      (LOOP FOR INDEX FROM 0 TO (1- (DISCLOSE 3))
            DO (SETQ #:G5792
                       (ENCLOSE
                        (FUNCALL
                         (LAMBDA (⍵ &OPTIONAL ⍺)
                           (DECLARE (IGNORABLE ⍺))
                           (PROGN
                            (DISCLOSE
                             (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵
                                      (VECTOR 2)))))
                         (ENCLOSE #:G5792)))))
      #:G5792))
  9)
 NIL) 
  [31m× #(#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {100801471B}> 9) is expected to be 15 
[0m
(:NXT "" ((⍵ (:FN #\+) 2))) 
"" 
(:CLOS (((⍵ (:FN #\+) 2)))) 
(:EXX (⍵ (:FN #\+) 2) ⍵ ((:FN #\+) 2)) 
(:EXX (((⍵ (:FN #\+) 2))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 2)) NIL) 
(:NXT "" ((⍵ (:FN #\>) 10))) 
"" 
(:CLOS (((⍵ (:FN #\>) 10)))) 
(:EXX (⍵ (:FN #\>) 10) ⍵ ((:FN #\>) 10)) 
(:EXX (((⍵ (:FN #\>) 10)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (OMEGA ALPHA)
              (IF (FUNCALL #'> ALPHA OMEGA)
                  1
                  0))
          ⍵ (VECTOR 10))
 NIL) 
(:NXT " fn 2"
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1008B131AB}>)
   (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1008AFD1DB}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5798))) 
(:NXT "" ((⍵ (:FN #\+) 2))) 
"" 
(:CLOS (((⍵ (:FN #\+) 2)))) 
(:EXX (⍵ (:FN #\+) 2) ⍵ ((:FN #\+) 2)) 
(:EXX (((⍵ (:FN #\+) 2))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵ (VECTOR 2)) NIL) 
(:NXT "" ((⍵ (:FN #\>) 10))) 
"" 
(:CLOS (((⍵ (:FN #\>) 10)))) 
(:EXX (⍵ (:FN #\>) 10) ⍵ ((:FN #\>) 10)) 
(:EXX (((⍵ (:FN #\>) 10)))
 (FUNCALL #'APPLY-SCALAR-DYADIC
          #'(LAMBDA (OMEGA ALPHA)
              (IF (FUNCALL #'> ALPHA OMEGA)
                  1
                  0))
          ⍵ (VECTOR 10))
 NIL) 
" fn 2" 
(:CLOS
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008B44D6B}>)
    (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008B2EDCB}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5798)))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008B44D6B}>)
  (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008B2EDCB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5798)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G5798 NIL))
        (DISCLOSE
         (FUNCALL #'APPLY-SCALAR-DYADIC
                  #'(LAMBDA (OMEGA ALPHA)
                      (IF (FUNCALL #'> ALPHA OMEGA)
                          1
                          0))
                  ⍵ (VECTOR 10)))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008B2EDCB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5798)) 
(:EXX
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008B44D6B}>)
    (:OP :PIVOTAL #\APL_FUNCTIONAL_SYMBOL_STAR_DIAERESIS)
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008B2EDCB}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5798)))
 (SETQ #:G5798
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (DECLARE (IGNORABLE ALPHA))
           (LET ((#:G5799 OMEGA))
             (LOOP WHILE (NOT
                          (= 0
                             (FUNCALL
                              (LAMBDA (OMEGA &OPTIONAL ALPHA)
                                (FUNCALL
                                 (LAMBDA (⍵ &OPTIONAL ⍺)
                                   (DECLARE (IGNORABLE ⍺))
                                   (LET* ((#:G5798 NIL))
                                     (DISCLOSE
                                      (FUNCALL #'APPLY-SCALAR-DYADIC
                                               #'(LAMBDA (OMEGA ALPHA)
                                                   (IF (FUNCALL #'> ALPHA
                                                                OMEGA)
                                                       1
                                                       0))
                                               ⍵ (VECTOR 10)))))
                                 (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
                              #:G5799)))
                   DO (SETQ #:G5799
                              (ENCLOSE
                               (FUNCALL
                                (LAMBDA (⍵ &OPTIONAL ⍺)
                                  (DECLARE (IGNORABLE ⍺))
                                  (LET* ((#:G5798 NIL))
                                    (DISCLOSE
                                     (FUNCALL #'APPLY-SCALAR-DYADIC #'+ ⍵
                                              (VECTOR 2)))))
                                (ENCLOSE #:G5799)))))
             #:G5799)))
 NIL) 
(:NXT "" ((2 #:G5798))) 
"" 
(:CLOS (((2 #:G5798)))) 
(:EXX (2 #:G5798) (VECTOR 2) (#:G5798)) 
(:EXX (((2 #:G5798))) (FUNCALL #:G5798 (VECTOR 2)) NIL) ; in: LET* ((#:G5798 :UNDEFINED))
;     (LET* ((#:G5798 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC
;                 #'(LAMBDA (APRIL::OMEGA APRIL::ALPHA)
;                     (IF #
;                         1
;                         0))
;                 APRIL::⍵ (VECTOR 10))))
; 
; caught STYLE-WARNING:
;   The variable #:G5798 is defined but never used.

;     (LET* ((#:G5798 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 2))))
; 
; caught STYLE-WARNING:
;   The variable #:G5798 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
  [32m✓ [90m10 is expected to be 10[0m 
[0m

Basic function definition and use, with comments.
(:NXT "" ((3 (:FN #\+) ⍵))) 
"" 
(:CLOS (((3 (:FN #\+) ⍵)))) 
(:EXX (3 (:FN #\+) ⍵) (VECTOR 3) ((:FN #\+) ⍵)) 
(:EXX (((3 (:FN #\+) ⍵))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) NIL) 
(:NXT " f2←{⍵×2}
                            f2 f1 1 2 3 4 5"
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1008CE9CBB}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5805))) 
(:NXT "" ((3 (:FN #\+) ⍵))) 
"" 
(:CLOS (((3 (:FN #\+) ⍵)))) 
(:EXX (3 (:FN #\+) ⍵) (VECTOR 3) ((:FN #\+) ⍵)) 
(:EXX (((3 (:FN #\+) ⍵))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) NIL) 
" f2←{⍵×2}
                            f2 f1 1 2 3 4 5" 
(:CLOS
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008CFCCAB}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5805)))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008CFCCAB}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5805)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G5805 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G5805)) 
(:EXX
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008CFCCAB}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5805)))
 (SETQ #:G5805
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (LET* ((#:G5805 NIL))
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
 NIL) 
(:NXT "" ((2 (:FN #\MULTIPLICATION_SIGN) ⍵))) 
"" 
(:CLOS (((2 (:FN #\MULTIPLICATION_SIGN) ⍵)))) 
(:EXX (2 (:FN #\MULTIPLICATION_SIGN) ⍵) (VECTOR 2)
 ((:FN #\MULTIPLICATION_SIGN) ⍵)) 
(:EXX (((2 (:FN #\MULTIPLICATION_SIGN) ⍵)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'* (VECTOR 2) ⍵) NIL) 
(:NXT "                            f2 f1 1 2 3 4 5"
 (((:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1008D2297B}>)
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5806))) 
(:NXT "" ((2 (:FN #\MULTIPLICATION_SIGN) ⍵))) 
"" 
(:CLOS (((2 (:FN #\MULTIPLICATION_SIGN) ⍵)))) 
(:EXX (2 (:FN #\MULTIPLICATION_SIGN) ⍵) (VECTOR 2)
 ((:FN #\MULTIPLICATION_SIGN) ⍵)) 
(:EXX (((2 (:FN #\MULTIPLICATION_SIGN) ⍵)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'* (VECTOR 2) ⍵) NIL) 
"                            f2 f1 1 2 3 4 5" 
(:CLOS
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008D3DF3B}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5806)))) 
(:EXX
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008D3DF3B}>)
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5806)
 (LAMBDA (OMEGA &OPTIONAL ALPHA)
   (FUNCALL
    (LAMBDA (⍵ &OPTIONAL ⍺)
      (DECLARE (IGNORABLE ⍺))
      (LET* ((#:G5805
              (LAMBDA (OMEGA &OPTIONAL ALPHA)
                (FUNCALL
                 (LAMBDA (⍵ &OPTIONAL ⍺)
                   (DECLARE (IGNORABLE ⍺))
                   (LET* ((#:G5805 NIL))
                     (DISCLOSE
                      (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵))))
                 (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
             (#:G5806 NIL))
        (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'* (VECTOR 2) ⍵))))
    (ENCLOSE OMEGA) (ENCLOSE ALPHA)))
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G5806)) 
(:EXX
 ((((:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008D3DF3B}>)
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5806)))
 (SETQ #:G5806
         (LAMBDA (OMEGA &OPTIONAL ALPHA)
           (FUNCALL
            (LAMBDA (⍵ &OPTIONAL ⍺)
              (DECLARE (IGNORABLE ⍺))
              (LET* ((#:G5805
                      (LAMBDA (OMEGA &OPTIONAL ALPHA)
                        (FUNCALL
                         (LAMBDA (⍵ &OPTIONAL ⍺)
                           (DECLARE (IGNORABLE ⍺))
                           (LET* ((#:G5805 NIL))
                             (DISCLOSE
                              (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3)
                                       ⍵))))
                         (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
                     (#:G5806 NIL))
                (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'* (VECTOR 2) ⍵))))
            (ENCLOSE OMEGA) (ENCLOSE ALPHA))))
 NIL) 
(:NXT "" ((5 4 3 2 1 #:G5805 #:G5806))) 
"" 
(:CLOS (((5 4 3 2 1 #:G5805 #:G5806)))) 
(:EXX (5 4 3 2 1 #:G5805 #:G5806) (VECTOR 1 2 3 4 5) (#:G5805 #:G5806)) 
(:EXX (((5 4 3 2 1 #:G5805 #:G5806)))
 (FUNCALL #:G5806 (FUNCALL #:G5805 (VECTOR 1 2 3 4 5))) NIL) ; in: LET* ((#:G5805 :UNDEFINED) (#:G5806 :UNDEFINED))
;     (LET* ((#:G5805 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ (VECTOR 3) APRIL::⍵)))
; 
; caught STYLE-WARNING:
;   The variable #:G5805 is defined but never used.

;     (LET* ((#:G5805
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G5806 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'* (VECTOR 2) APRIL::⍵)))
; 
; caught STYLE-WARNING:
;   The variable #:G5805 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G5806 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
  [32m✓ [90m#(8 10 12 14 16) is expected to be #(8 10 12 14 16)[0m 
[0mMonadic inline function.
(:NXT "" ((3 (:FN #\+) ⍵))) 
"" 
(:CLOS (((3 (:FN #\+) ⍵)))) 
(:EXX (3 (:FN #\+) ⍵) (VECTOR 3) ((:FN #\+) ⍵)) 
(:EXX (((3 (:FN #\+) ⍵))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) NIL) 
(:NXT ""
 ((5 4 3
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1008ED85CB}>)))) 
(:NXT "" ((3 (:FN #\+) ⍵))) 
"" 
(:CLOS (((3 (:FN #\+) ⍵)))) 
(:EXX (3 (:FN #\+) ⍵) (VECTOR 3) ((:FN #\+) ⍵)) 
(:EXX (((3 (:FN #\+) ⍵))) (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) NIL) 
"" 
(:CLOS
 (((5 4 3
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008EEB52B}>))))) 
(:EXX
 (5 4 3
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008EEB52B}>))
 (VECTOR 3 4 5)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008EEB52B}>))) 
(:EXX
 (((5 4 3
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008EEB52B}>))))
 (FUNCALL
  (LAMBDA (⍵ &OPTIONAL ⍺)
    (DECLARE (IGNORABLE ⍺))
    (PROGN (DISCLOSE (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵))))
  (ENCLOSE (VECTOR 3 4 5)))
 NIL) 
  [32m✓ [90m#(6 7 8) is expected to be #(6 7 8)[0m 
[0mDyadic inline function.
(:NXT "" ((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺))) 
"" 
(:CLOS (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))) 
(:EXX (3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺) (VECTOR 3)
 ((:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)) 
(:EXX (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'*
          (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) ⍺)
 NIL) 
(:NXT ""
 ((5 4 3
   (:FN
    #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                :IN
                FORMAT-FUNCTION) {1008FD636B}>)
   3 2 1))) 
(:NXT "" ((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺))) 
"" 
(:CLOS (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))) 
(:EXX (3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺) (VECTOR 3)
 ((:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)) 
(:EXX (((3 (:FN #\+) ⍵ (:FN #\MULTIPLICATION_SIGN) ⍺)))
 (FUNCALL #'APPLY-SCALAR-DYADIC #'*
          (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) ⍺)
 NIL) 
"" 
(:CLOS
 (((5 4 3
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008FFB21B}>)
    3 2 1)))) 
(:EXX
 (5 4 3
  (:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008FFB21B}>)
  3 2 1)
 (VECTOR 3 4 5)
 ((:FN
   #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
               :IN
               FORMAT-FUNCTION) {1008FFB21B}>)
  3 2 1)) 
(:EXX
 (((5 4 3
    (:FN
     #<CLOSURE (LAMBDA (META AXES OMEGA &OPTIONAL ALPHA)
                 :IN
                 FORMAT-FUNCTION) {1008FFB21B}>)
    3 2 1)))
 (FUNCALL
  (LAMBDA (⍵ &OPTIONAL ⍺)
    (DECLARE (IGNORABLE ⍺))
    (PROGN
     (DISCLOSE
      (FUNCALL #'APPLY-SCALAR-DYADIC #'*
               (FUNCALL #'APPLY-SCALAR-DYADIC #'+ (VECTOR 3) ⍵) ⍺))))
  (ENCLOSE (VECTOR 3 4 5)) (ENCLOSE (VECTOR 1 2 3)))
 NIL) 
  [32m✓ [90m#(6 14 24) is expected to be #(6 14 24)[0m 
[0mVariable-referenced values, including an element within an array, in a vector.
(:NXT " b←2 3 4⍴⍳9 ◊ 1 2 a 3 b[1;2;1]"
 ((9 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5822))) 
" b←2 3 4⍴⍳9 ◊ 1 2 a 3 b[1;2;1]" 
(:CLOS (((9 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5822)))) 
(:EXX (9 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5822) (VECTOR 9)
 ((:OP :LATERAL #\LEFTWARDS_ARROW) #:G5822)) 
(:EXX (((9 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5822)))
 (SETQ #:G5822 (VECTOR 9)) NIL) 
(:NXT " 1 2 a 3 b[1;2;1]"
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5823))) 
" 1 2 a 3 b[1;2;1]" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5823)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5823)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5823)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5823)))
 (SETQ #:G5823
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 9))
                       (DISCLOSE (VECTOR 9))
                       (VECTOR 9))))
              (VECTOR 2 3 4))))
 NIL) 
(:NXT "" (((:AXES (1) (2) (1)) #:G5823 3 #:G5822 2 1))) 
"" 
(:CLOS ((((:AXES (1) (2) (1)) #:G5823 3 #:G5822 2 1)))) 
(:CLOS (((1) (2) (1)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (((1) (2) (1))) (VECTOR 1) NIL) 
(:EXX ((:AXES (1) (2) (1)) #:G5823 3 #:G5822 2 1)
 (VECTOR 1 2 (DISCLOSE #:G5822) 3
         (DISCLOSE
          (AREF-ELIDING (DISCLOSE #:G5823)
                        (MAPCAR
                         (LAMBDA (VECTOR)
                           (IF VECTOR
                               (IF (= 1 (LENGTH VECTOR))
                                   (- (AREF VECTOR 0)
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                                   (MAPCAR
                                    (LAMBDA (ELEM)
                                      (- ELEM
                                         (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                                    (ARRAY-TO-LIST VECTOR)))))
                         (LIST 1)))))
 NIL) 
(:EXX ((((:AXES (1) (2) (1)) #:G5823 3 #:G5822 2 1)))
 (VECTOR 1 2 (DISCLOSE #:G5822) 3
         (DISCLOSE
          (AREF-ELIDING (DISCLOSE #:G5823)
                        (MAPCAR
                         (LAMBDA (VECTOR)
                           (IF VECTOR
                               (IF (= 1 (LENGTH VECTOR))
                                   (- (AREF VECTOR 0)
                                      (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                                   (MAPCAR
                                    (LAMBDA (ELEM)
                                      (- ELEM
                                         (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                                    (ARRAY-TO-LIST VECTOR)))))
                         (LIST 1)))))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #(1 2 9 3 5))[0m
Assignment of an element within an array.
(:NXT " a[1;2]←20 ◊ a"
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5829))) 
" a[1;2]←20 ◊ a" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5829)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5829)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5829)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 3 2
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5829)))
 (SETQ #:G5829
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 9))
                       (DISCLOSE (VECTOR 9))
                       (VECTOR 9))))
              (VECTOR 2 3))))
 NIL) 
(:NXT " a" ((20 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES (1) (2)) #:G5829))) 
" a" 
(:CLOS (((20 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES (1) (2)) #:G5829)))) 
(:EXX (20 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES (1) (2)) #:G5829) (VECTOR 20)
 ((:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES (1) (2)) #:G5829)) 
(:CLOS (((1) (2)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (((1) (2))) (VECTOR 1) NIL) 
(:EXX (((20 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES (1) (2)) #:G5829)))
 (AREF-ELIDING (DISCLOSE #:G5829)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 1))
               :SET (VECTOR 20))
 NIL) 
(:NXT "" ((#:G5829))) 
"" 
(:CLOS (((#:G5829)))) 
(:EXX (#:G5829) #:G5829 NIL) 
(:EXX (((#:G5829))) #:G5829 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #2A((1 20 3) (4 5 6)))[0m
Selection from an array with multiple elided dimensions.
(:NXT ""
 (((:AXES (2) NIL (3) NIL (2))
   ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4
     3 3 2))))) 
"" 
(:CLOS
 ((((:AXES (2) NIL (3) NIL (2))
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5
      4 3 3 2)))))) 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4
    3 3 2)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4 3
  3 2)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4 3 3
  2)) 
(:CLOS (((2) NIL (3) NIL (2)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (3) (VECTOR 3) NIL) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (((2) NIL (3) NIL (2))) (VECTOR 2) NIL) 
(:EXX
 ((:AXES (2) NIL (3) NIL (2))
  ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 4
    3 3 2)))
 (AREF-ELIDING
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 9))
                (DISCLOSE (VECTOR 9))
                (VECTOR 9))))
       (VECTOR 2 3 3 4 5)))
  (MAPCAR
   (LAMBDA (VECTOR)
     (IF VECTOR
         (IF (= 1 (LENGTH VECTOR))
             (- (AREF VECTOR 0) (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
             (MAPCAR
              (LAMBDA (ELEM) (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
              (ARRAY-TO-LIST VECTOR)))))
   (LIST 2)))
 NIL) 
(:EXX
 ((((:AXES (2) NIL (3) NIL (2))
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5
      4 3 3 2)))))
 (AREF-ELIDING
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 9))
                (DISCLOSE (VECTOR 9))
                (VECTOR 9))))
       (VECTOR 2 3 3 4 5)))
  (MAPCAR
   (LAMBDA (VECTOR)
     (IF VECTOR
         (IF (= 1 (LENGTH VECTOR))
             (- (AREF VECTOR 0) (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
             (MAPCAR
              (LAMBDA (ELEM) (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
              (ARRAY-TO-LIST VECTOR)))))
   (LIST 2)))
 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #2A((6 2 7 3) (3 8 4 9) (9 5 1 6)))[0m
Elided assignment.
(:NXT " a[2;;3]←0 ◊ a"
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5840))) 
" a[2;;3]←0 ◊ a" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5840)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5840)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5840)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5840)))
 (SETQ #:G5840
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 9))
                       (DISCLOSE (VECTOR 9))
                       (VECTOR 9))))
              (VECTOR 2 3 4))))
 NIL) 
(:NXT " a" ((0 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES (2) NIL (3)) #:G5840))) 
" a" 
(:CLOS (((0 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES (2) NIL (3)) #:G5840)))) 
(:EXX (0 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES (2) NIL (3)) #:G5840)
 (VECTOR 0) ((:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES (2) NIL (3)) #:G5840)) 
(:CLOS (((2) NIL (3)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (3) (VECTOR 3) NIL) 
(:EXX (((2) NIL (3))) (VECTOR 2) NIL) 
(:EXX (((0 (:OP :LATERAL #\LEFTWARDS_ARROW) (:AXES (2) NIL (3)) #:G5840)))
 (AREF-ELIDING (DISCLOSE #:G5840)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 2))
               :SET (VECTOR 0))
 NIL) 
(:NXT "" ((#:G5840))) 
"" 
(:CLOS (((#:G5840)))) 
(:EXX (#:G5840) #:G5840 NIL) 
(:EXX (((#:G5840))) #:G5840 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))
                                              ((4 5 0 7) (8 9 0 2) (3 4 0 6))))[0m
Elided assignment of applied function's results.
(:NXT " a[2;;3]+←10 ◊ a"
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5846))) 
" a[2;;3]+←10 ◊ a" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5846)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5846)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3 2
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5846)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 4 3
    2 (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5846)))
 (SETQ #:G5846
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 9))
                       (DISCLOSE (VECTOR 9))
                       (VECTOR 9))))
              (VECTOR 2 3 4))))
 NIL) 
(:NXT " a"
 ((10 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (2) NIL (3)) #:G5846))) 
" a" 
(:CLOS
 (((10 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (2) NIL (3))
    #:G5846)))) 
(:EXX
 (10 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (2) NIL (3)) #:G5846)
 (VECTOR 10)
 ((:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (2) NIL (3)) #:G5846)) 
(:CLOS (((2) NIL (3)))) 
(:EXX (2) (VECTOR 2) NIL) 
(:EXX (3) (VECTOR 3) NIL) 
(:EXX (((2) NIL (3))) (VECTOR 2) NIL) 
(:EXX
 (((10 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (2) NIL (3))
    #:G5846)))
 (AREF-ELIDING (DISCLOSE #:G5846)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 2))
               :SET
               (LAMBDA (ITEM)
                 (FUNCALL
                  (LAMBDA (OMEGA ALPHA)
                    (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                  (VECTOR 10) ITEM)))
 NIL) 
(:NXT "" ((#:G5846))) 
"" 
(:CLOS (((#:G5846)))) 
(:EXX (#:G5846) #:G5846 NIL) 
(:EXX (((#:G5846))) #:G5846 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))
                                              ((4 5 16 7) (8 9 11 2) (3 4 15 6))))[0m
Elision and indexed array elements.
(:NXT ""
 (((:AXES (4 1))
   ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8
     6))))) 
"" 
(:CLOS
 ((((:AXES (4 1))
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8
      6)))))) 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8
    6)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 6)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 6)) 
(:CLOS (((4 1)))) 
(:EXX (4 1) (VECTOR 1 4) NIL) 
(:EXX (((4 1))) (VECTOR 1 4) NIL) 
(:EXX
 ((:AXES (4 1))
  ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8
    6)))
 (AREF-ELIDING
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 9))
                (DISCLOSE (VECTOR 9))
                (VECTOR 9))))
       (VECTOR 6 8)))
  (MAPCAR
   (LAMBDA (VECTOR)
     (IF VECTOR
         (IF (= 1 (LENGTH VECTOR))
             (- (AREF VECTOR 0) (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
             (MAPCAR
              (LAMBDA (ELEM) (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
              (ARRAY-TO-LIST VECTOR)))))
   (LIST 1 4)))
 NIL) 
(:EXX
 ((((:AXES (4 1))
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8
      6)))))
 (AREF-ELIDING
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 9))
                (DISCLOSE (VECTOR 9))
                (VECTOR 9))))
       (VECTOR 6 8)))
  (MAPCAR
   (LAMBDA (VECTOR)
     (IF VECTOR
         (IF (= 1 (LENGTH VECTOR))
             (- (AREF VECTOR 0) (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
             (MAPCAR
              (LAMBDA (ELEM) (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
              (ARRAY-TO-LIST VECTOR)))))
   (LIST 1 4)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #2A((1 2 3 4 5 6 7 8) (7 8 9 1 2 3 4 5)))[0m
As above but more complex.
(:NXT ""
 (((:AXES (4 1) NIL (1 2))
   ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 8
     6))))) 
"" 
(:CLOS
 ((((:AXES (4 1) NIL (1 2))
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5
      8 6)))))) 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 8
    6)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 8 6)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 8 6)) 
(:CLOS (((4 1) NIL (1 2)))) 
(:EXX (4 1) (VECTOR 1 4) NIL) 
(:EXX (1 2) (VECTOR 2 1) NIL) 
(:EXX (((4 1) NIL (1 2))) (VECTOR 1 4) NIL) 
(:EXX
 ((:AXES (4 1) NIL (1 2))
  ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 8
    6)))
 (AREF-ELIDING
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 9))
                (DISCLOSE (VECTOR 9))
                (VECTOR 9))))
       (VECTOR 6 8 5)))
  (MAPCAR
   (LAMBDA (VECTOR)
     (IF VECTOR
         (IF (= 1 (LENGTH VECTOR))
             (- (AREF VECTOR 0) (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
             (MAPCAR
              (LAMBDA (ELEM) (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
              (ARRAY-TO-LIST VECTOR)))))
   (LIST 1 4)))
 NIL) 
(:EXX
 ((((:AXES (4 1) NIL (1 2))
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5
      8 6)))))
 (AREF-ELIDING
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA ALPHA)
           (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
       (IF (AND)
           (FUNCALL
            #'(LAMBDA (OMEGA)
                (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                            (IOTA OMEGA :START
                                  (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
            (IF (ARRAYP (VECTOR 9))
                (DISCLOSE (VECTOR 9))
                (VECTOR 9))))
       (VECTOR 6 8 5)))
  (MAPCAR
   (LAMBDA (VECTOR)
     (IF VECTOR
         (IF (= 1 (LENGTH VECTOR))
             (- (AREF VECTOR 0) (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
             (MAPCAR
              (LAMBDA (ELEM) (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
              (ARRAY-TO-LIST VECTOR)))))
   (LIST 1 4)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #3A(((2 1)
                                               (7 6)
                                               (3 2)
                                               (8 7)
                                               (4 3)
                                               (9 8)
                                               (5 4)
                                               (1 9))
                                              ((5 4)
                                               (1 9)
                                               (6 5)
                                               (2 1)
                                               (7 6)
                                               (3 2)
                                               (8 7)
                                               (4 3))))[0m
Indices of indices.
(:NXT ""
 (((:AXES (1) (5 4 2)) (:AXES (4 1) NIL (1 2))
   ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 8
     6))))) 
"" 
(:CLOS
 ((((:AXES (1) (5 4 2)) (:AXES (4 1) NIL (1 2))
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5
      8 6)))))) 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 8
    6)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 8 6)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 8 6)) 
(:CLOS (((4 1) NIL (1 2)))) 
(:EXX (4 1) (VECTOR 1 4) NIL) 
(:EXX (1 2) (VECTOR 2 1) NIL) 
(:EXX (((4 1) NIL (1 2))) (VECTOR 1 4) NIL) 
(:CLOS (((1) (5 4 2)))) 
(:EXX (1) (VECTOR 1) NIL) 
(:EXX (5 4 2) (VECTOR 2 4 5) NIL) 
(:EXX (((1) (5 4 2))) (VECTOR 1) NIL) 
(:EXX
 ((:AXES (1) (5 4 2)) (:AXES (4 1) NIL (1 2))
  ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5 8
    6)))
 (AREF-ELIDING
  (AREF-ELIDING
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA ALPHA)
            (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
        (IF (AND)
            (FUNCALL
             #'(LAMBDA (OMEGA)
                 (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                             (IOTA OMEGA :START
                                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
             (IF (ARRAYP (VECTOR 9))
                 (DISCLOSE (VECTOR 9))
                 (VECTOR 9))))
        (VECTOR 6 8 5)))
   (MAPCAR
    (LAMBDA (VECTOR)
      (IF VECTOR
          (IF (= 1 (LENGTH VECTOR))
              (- (AREF VECTOR 0) (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
              (MAPCAR
               (LAMBDA (ELEM) (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
               (ARRAY-TO-LIST VECTOR)))))
    (LIST 1 4)))
  (MAPCAR
   (LAMBDA (VECTOR)
     (IF VECTOR
         (IF (= 1 (LENGTH VECTOR))
             (- (AREF VECTOR 0) (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
             (MAPCAR
              (LAMBDA (ELEM) (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
              (ARRAY-TO-LIST VECTOR)))))
   (LIST 1)))
 NIL) 
(:EXX
 ((((:AXES (1) (5 4 2)) (:AXES (4 1) NIL (1 2))
    ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 5
      8 6)))))
 (AREF-ELIDING
  (AREF-ELIDING
   (IF (AND)
       (FUNCALL
        #'(LAMBDA (OMEGA ALPHA)
            (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
        (IF (AND)
            (FUNCALL
             #'(LAMBDA (OMEGA)
                 (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                             (IOTA OMEGA :START
                                   (OF-STATE *APRIL-IDIOM* :COUNT-FROM))))
             (IF (ARRAYP (VECTOR 9))
                 (DISCLOSE (VECTOR 9))
                 (VECTOR 9))))
        (VECTOR 6 8 5)))
   (MAPCAR
    (LAMBDA (VECTOR)
      (IF VECTOR
          (IF (= 1 (LENGTH VECTOR))
              (- (AREF VECTOR 0) (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
              (MAPCAR
               (LAMBDA (ELEM) (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
               (ARRAY-TO-LIST VECTOR)))))
    (LIST 1 4)))
  (MAPCAR
   (LAMBDA (VECTOR)
     (IF VECTOR
         (IF (= 1 (LENGTH VECTOR))
             (- (AREF VECTOR 0) (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
             (MAPCAR
              (LAMBDA (ELEM) (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
              (ARRAY-TO-LIST VECTOR)))))
   (LIST 1)))
 NIL) 
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #2A((7 6) (8 7) (4 3)))[0m
Operation over portions of an array.
(:NXT " a[2 4;1 6 7 8]+←10 ◊ a"
 ((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
   (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5867))) 
" a[2 4;1 6 7 8]+←10 ◊ a" 
(:CLOS
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5867)))) 
(:EXX
 (9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5867)
 (VECTOR 9)
 ((:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
  (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5867)) 
(:EXX
 (((9 (:FN #\APL_FUNCTIONAL_SYMBOL_IOTA) (:FN #\APL_FUNCTIONAL_SYMBOL_RHO) 8 4
    (:OP :LATERAL #\LEFTWARDS_ARROW) #:G5867)))
 (SETQ #:G5867
         (IF (AND)
             (FUNCALL
              #'(LAMBDA (OMEGA ALPHA)
                  (RESHAPE-ARRAY-FITTING OMEGA (ARRAY-TO-LIST ALPHA)))
              (IF (AND)
                  (FUNCALL
                   #'(LAMBDA (OMEGA)
                       (MAKE-ARRAY (LIST OMEGA) :INITIAL-CONTENTS
                                   (IOTA OMEGA :START
                                         (OF-STATE *APRIL-IDIOM*
                                                   :COUNT-FROM))))
                   (IF (ARRAYP (VECTOR 9))
                       (DISCLOSE (VECTOR 9))
                       (VECTOR 9))))
              (VECTOR 4 8))))
 NIL) 
(:NXT " a"
 ((10 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (4 2) (8 7 6 1))
   #:G5867))) 
" a" 
(:CLOS
 (((10 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (4 2) (8 7 6 1))
    #:G5867)))) 
(:EXX
 (10 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (4 2) (8 7 6 1))
  #:G5867)
 (VECTOR 10)
 ((:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (4 2) (8 7 6 1)) #:G5867)) 
(:CLOS (((4 2) (8 7 6 1)))) 
(:EXX (4 2) (VECTOR 2 4) NIL) 
(:EXX (8 7 6 1) (VECTOR 1 6 7 8) NIL) 
(:EXX (((4 2) (8 7 6 1))) (VECTOR 2 4) NIL) 
(:EXX
 (((10 (:OP :LATERAL #\LEFTWARDS_ARROW) (:FN #\+) (:AXES (4 2) (8 7 6 1))
    #:G5867)))
 (AREF-ELIDING (DISCLOSE #:G5867)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 2 4))
               :SET
               (LAMBDA (ITEM)
                 (FUNCALL
                  (LAMBDA (OMEGA ALPHA)
                    (FUNCALL #'APPLY-SCALAR-DYADIC #'+ OMEGA ALPHA))
                  (VECTOR 10) ITEM)))
 NIL) 
(:NXT "" ((#:G5867))) 
"" 
(:CLOS (((#:G5867)))) 
(:EXX (#:G5867) #:G5867 NIL) 
(:EXX (((#:G5867))) #:G5867 NIL) 
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #2A((1 2 3 4 5 6 7 8)
                                              (19 1 2 3 4 15 16 17)
                                              (8 9 1 2 3 4 5 6)
                                              (17 8 9 1 2 13 14 15)))[0m

[31m× 56 of 226 tests failed[0m [90m(1111ms)[0m
NIL
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:26:24 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.309
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 02:26:13 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.223
APRIL> (april (test))
1..226

[←] Assign
  [32m✓ [90m55 is expected to be 55[0m 
[0m
  [31m× #3A(((7 7 7 7) (7 7 7 7) (7 7 7 7)) ((7 7 7 7) (7 7 7 7) (7 7 7 7))) is expected to be #3A(((7 7 7 7) (5 6 7 8) (9 1 2 3)) ((7 7 7 7) (8 9 1 2) (3 4 5 6))) 
[0m

[⊣] Empty / Left
  [32m✓ [90m#() is expected to be #()[0m 
[0m
  [32m✓ [90m55 is expected to be 55[0m 
[0m

[⊢] Identity / Right
  [32m✓ [90m77 is expected to be 77[0m 
[0m
  [32m✓ [90m77 is expected to be 77[0m 
[0m

[+] Identity or Negate Imaginary / Add
  [32m✓ [90m5 is expected to be 5[0m 
[0m
  [32m✓ [90m#C(5 -2) is expected to be #C(5 -2)[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m#(2 3 4) is expected to be #(2 3 4)[0m 
[0m

[-] Negate / Subtract
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(5 4 3) is expected to be #(5 4 3)[0m 
[0m

[×] Direction / Multiply
  [32m✓ [90m#(1 1 0 -1 1 -1) is expected to be #(1 1 0 -1 1 -1)[0m 
[0m
  [32m✓ [90m6 is expected to be 6[0m 
[0m
  [32m✓ [90m#(32 45) is expected to be #(32 45)[0m 
[0m

[÷] Reciprocal / Divide
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m#(2 4 6) is expected to be #(2 4 6)[0m 
[0m
  [32m✓ [90m#(1/2 1/4 1/8) is expected to be #(1/2 1/4 1/8)[0m 
[0m

[⋆] Exponential / Power
  [32m✓ [90m7389 is expected to be 7389[0m 
[0m
  [32m✓ [90m16 is expected to be 16[0m 
[0m
  [32m✓ [90m4 is expected to be 4[0m 
[0m

[⍟] Natural Logarithm / Logarithm
  [32m✓ [90m1609 is expected to be 1609[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m

[|] Magnitude / Residue
  [32m✓ [90m55 is expected to be 55[0m 
[0m
  [32m✓ [90m33 is expected to be 33[0m 
[0m
  [32m✓ [90m7 is expected to be 7[0m 
[0m

[!] Factorial / Binomial
  [32m✓ [90m120 is expected to be 120[0m 
[0m
  [32m✓ [90m792 is expected to be 792[0m 
[0m

[⌈] Ceiling / Maximum
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m#(3 3 3 3 4 5) is expected to be #(3 3 3 3 4 5)[0m 
[0m

[⌊] Floor / Minimum
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(0 1 2 3 3 3) is expected to be #(0 1 2 3 3 3)[0m 
[0m

[○] Pi Times / Circular
  [32m✓ [90m314159 is expected to be 314159[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m

[~] Not / Without
  [32m✓ [90m#(0 1 0) is expected to be #(0 1 0)[0m 
[0m
  [32m✓ [90m#(1 2 4 6 7) is expected to be #(1 2 4 6 7)[0m 
[0m
  [32m✓ [90m"MCNI" is expected to be "MCNI"[0m 
[0m

[<] Less
  [32m✓ [90m#(0 0 0 1 1) is expected to be #(0 0 0 1 1)[0m 
[0m

[≤] Less or Equal
  [32m✓ [90m#(0 0 1 1 1) is expected to be #(0 0 1 1 1)[0m 
[0m

[=] Equal
  [32m✓ [90m#(0 0 1 0 0) is expected to be #(0 0 1 0 0)[0m 
[0m

[≥] Greater or Equal
  [32m✓ [90m#(1 1 1 0 0) is expected to be #(1 1 1 0 0)[0m 
[0m

[>] Greater
  [32m✓ [90m#(1 1 0 0 0) is expected to be #(1 1 0 0 0)[0m 
[0m

[≠] Not Equal
  [32m✓ [90m#(1 1 0 1 1) is expected to be #(1 1 0 1 1)[0m 
[0m

[≡] Depth / Match
  [32m✓ [90m3 is expected to be 3[0m 
[0m

[≢] First Dimension / Not Match
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[∧] And
  [32m✓ [90m#(0 0 0 1) is expected to be #(0 0 0 1)[0m 
[0m

[⍲] Nand
  [32m✓ [90m#(1 1 1 0) is expected to be #(1 1 1 0)[0m 
[0m

[∨] Or
  [32m✓ [90m#(0 1 1 1) is expected to be #(0 1 1 1)[0m 
[0m

[⍱] Nor
  [32m✓ [90m#(1 0 0 0) is expected to be #(1 0 0 0)[0m 
[0m

[⍳] Index / Index Of
  [32m✓ [90m#(1 2 3 4 5) is expected to be #(1 2 3 4 5)[0m 
[0m
  [32m✓ [90m#(2 2 1 2 2) is expected to be #(2 2 1 2 2)[0m 
[0m

[⍴] Shape / Reshape
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m#(3 5) is expected to be #(3 5)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2)) is expected to be #2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2))[0m 
[0m

[⌷] At Axes
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m7 is expected to be 7[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #(4 5 1 2))[0m


[∊] Enlist / Membership
  [32m✓ [90m#(1 2 3 4 5 6 7 8) is expected to be #(1 2 3 4 5 6 7 8)[0m 
[0m
  [32m✓ [90m#(1 1 0) is expected to be #(1 1 0)[0m 
[0m

[⍷] Find
  [32m✓ [90m#3A(((0 0 0 0) (0 1 0 0) (0 0 0 0)) ((0 0 1 0) (0 0 0 0) (0 0 0 0))) is expected to be #3A(((0 0 0 0) (0 1 0 0) (0 0 0 0)) ((0 0 1 0) (0 0 0 0) (0 0 0 0)))[0m 
[0m

[↑] Disclose / Take
  [32m✓ [90m#(1 2 3 4) is expected to be #(1 2 3 4)[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1))) is expected to be #3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1)))[0m 
[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))))[0m
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #3A(((1 2 3 4)) ((4 5 6 7))))[0m
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #3A(((1 2 3 4) (5 6 7 8))
                                            ((4 5 6 7) (8 9 1 2))))[0m
  [31m× Raised an error The value
                      3
                    is not of type
                      VECTOR (expected: #3A(((1 2) (5 6) (9 1)) ((4 5) (8 9) (3 4))))[0m


[↓] Split / Drop
  [32m✓ [90m#(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3)) is expected to be #(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3))[0m 
[0m
  [32m✓ [90m#3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3))) is expected to be #3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3)))[0m 
[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #3A(((4 5 6 7) (8 9 1 2) (3 4 5 6))))[0m
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #3A(((5 6 7 8) (9 1 2 3))
                                            ((8 9 1 2) (3 4 5 6))))[0m
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #3A(((9 1 2 3)) ((3 4 5 6))))[0m
  [31m× Raised an error The value
                      3
                    is not of type
                      VECTOR (expected: #3A(((3 4) (7 8) (2 3)) ((6 7) (1 2) (5 6))))[0m
  [32m✓ [90m#(1 2 3 4 5 6 7) is expected to be #(1 2 3 4 5 6 7)[0m 
[0m

[,] Ravel / Catenate or Laminate
  [32m✓ [90m#(1 2 3 4 5 6 7 8 9 1 2 3) is expected to be #(1 2 3 4 5 6 7 8 9 1 2 3)[0m 
[0m
  [31m× Raised an error The value
                      0.5
                    is not of type
                      SEQUENCE (expected: #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))))[0m
  [31m× Raised an error The value
                      1.5
                    is not of type
                      SEQUENCE (expected: #3A(((1 2 3 4)) ((5 6 7 8)) ((9 1 2 3))))[0m
  [31m× Raised an error The value
                      2.5
                    is not of type
                      SEQUENCE (expected: #3A(((1) (2) (3) (4))
                                              ((5) (6) (7) (8))
                                              ((9) (1) (2) (3))))[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #2A((1 2 3)
                                              (4 5 6)
                                              (7 8 9)
                                              (10 11 12)
                                              (1 2 3)
                                              (4 5 6)))[0m
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #2A((1 2 3 4 5 6 7 8 9)
                                              (10 11 12 1 2 3 4 5 6)))[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #(1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6))[0m
  [32m✓ [90m#2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3)) is expected to be #2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3))[0m 
[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3)))[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3)) is expected to be #2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3))[0m 
[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #2A((1 2 3 4)
                                            (5 6 1 2)
                                            (3 4 5 6)
                                            (1 2 3 4)
                                            (5 6 1 2)
                                            (1 2 3 4)
                                            (5 6 7 8)
                                            (9 1 2 3)))[0m
  [32m✓ [90m#(1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6)[0m 
[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #(1 2 3 4 5 6))[0m
  [31m× Raised an error The value
                      0.5
                    is not of type
                      VECTOR (expected: #2A((1 2 3 4) (1 2 3 4)))[0m
  [31m× Raised an error The value
                      1.5
                    is not of type
                      VECTOR (expected: #2A((1 1) (2 2) (3 3) (4 4)))[0m
  [31m× Raised an error The value
                      0.5
                    is not of type
                      VECTOR (expected: #3A(((1 2 3) (4 5 6)) ((1 2 3) (4 5 6))))[0m
  [31m× Raised an error The value
                      2.5
                    is not of type
                      VECTOR (expected: #3A(((1 1) (2 2) (3 3)) ((4 4) (5 5) (6 6))))[0m
  [31m× Raised an error The value
                      0.5
                    is not of type
                      VECTOR (expected: #2A((#\U #\N #\D #\E #\R)
                                            (#\- #\- #\- #\- #\-)))[0m
  [31m× Raised an error The value
                      1.5
                    is not of type
                      VECTOR (expected: #2A((#\H #\.)
                                            (#\E #\.)
                                            (#\L #\.)
                                            (#\L #\.)
                                            (#\O #\.)))[0m


[⍪] Table / Catenate First
  [32m✓ [90m#2A((#\M) (#\A) (#\K) (#\E)) is expected to be #2A((#\M) (#\A) (#\K) (#\E))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24)) is expected to be #2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24))[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3)))[0m
  [32m✓ [90m#2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3)) is expected to be #2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3))[0m 
[0m
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #2A((1 2 3 4 5 6 1 2 3 4)
                                            (1 2 3 4 5 6 5 6 7 8)
                                            (1 2 3 4 5 6 9 1 2 3)))[0m


[/] Replicate
  [32m✓ [90m#(3 3 3 3 3) is expected to be #(3 3 3 3 3)[0m 
[0m
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
  [32m✓ [90m#(1 1 1) is expected to be #(1 1 1)[0m 
[0m
  [32m✓ [90m#(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5)) is expected to be #(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5))[0m 
[0m
  [32m✓ [90m#2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)) is expected to be #2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5))[0m 
[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #2A((1 2 3 4 5)
                                            (0 0 0 0 0)
                                            (0 0 0 0 0)
                                            (2 3 4 5 6)
                                            (2 3 4 5 6)
                                            (2 3 4 5 6)))[0m


[⌿] Replicate First
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6)) is expected to be #2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6))[0m 
[0m
  [31m× Raised an error The value
                      2
                    is not of type
                      VECTOR (expected: #2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
                                            (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
                                            (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)))[0m


[\] Expand
  [32m✓ [90m".  ...    ....." is expected to be ".  ...    ....."[0m 
[0m
  [32m✓ [90m#2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9)) is expected to be #2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9))[0m 
[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #2A((4 5 6) (0 0 0) (7 8 9)))[0m


[⍀] Expand First
  [32m✓ [90m#(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3) is expected to be #(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3)[0m 
[0m
  [32m✓ [90m#2A((4 5 6) (0 0 0) (7 8 9)) is expected to be #2A((4 5 6) (0 0 0) (7 8 9))[0m 
[0m

[⊂] Enclose / Partition
  [32m✓ [90m#(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5))) is expected to be #(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5)))[0m 
[0m
  [31m× Raised an error The value
                      3
                    is not of type
                      ARRAY (expected: #2A(("GRAY" "GOLD" "BLUE")
                                           ("SILK" "WOOL" "YARN")))[0m
  [31m× Raised an error The value
                      2
                    is not of type
                      ARRAY (expected: #2A(("GGB" "ROL" "ALU" "YDE")
                                           ("SWY" "IOA" "LOR" "KLN")))[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      ARRAY (expected: #2A(("GS" "RI" "AL" "YK")
                                           ("GW" "OO" "LO" "DL")
                                           ("BY" "LA" "UR" "EN")))[0m
  [31m× Raised an error The value
                      2
                    is not of type
                      ARRAY (expected: #(#2A((#\G #\R #\A #\Y)
                                             (#\G #\O #\L #\D)
                                             (#\B #\L #\U #\E))
                                         #2A((#\S #\I #\L #\K)
                                             (#\W #\O #\O #\L)
                                             (#\Y #\A #\R #\N))))[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      ARRAY (expected: #(#2A((#\G #\R #\A #\Y) (#\S #\I #\L #\K))
                                         #2A((#\G #\O #\L #\D) (#\W #\O #\O #\L))
                                         #2A((#\B #\L #\U #\E) (#\Y #\A #\R #\N))))[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      ARRAY (expected: #(#2A((#\G #\G #\B) (#\S #\W #\Y))
                                         #2A((#\R #\O #\L) (#\I #\O #\A))
                                         #2A((#\A #\L #\U) (#\L #\O #\R))
                                         #2A((#\Y #\D #\E) (#\K #\L #\N))))[0m
  [32m✓ [90m#(#(1 2) #(3 4 5) #(6 7 8 9)) is expected to be #(#(1 2) #(3 4 5) #(6 7 8 9))[0m 
[0m

[⍧] Partitioned Enclose
  [32m✓ [90m#(#(2 3 4) #(5) #(6 7 8 9)) is expected to be #(#(2 3 4) #(5) #(6 7 8 9))[0m 
[0m
  [32m✓ [90m#(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5))) is expected to be #(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5)))[0m 
[0m
  [31m× Raised an error The value
                      1
                    is not of type
                      VECTOR (expected: #(#2A((9 1 2 3 4 5 6 7) (8 9 1 2 3 4 5 6))
                                          #2A((7 8 9 1 2 3 4 5))))[0m


[⊃] Mix / Pick
  [32m✓ [90m#2A((1 0 0) (1 2 0) (1 2 3)) is expected to be #2A((1 0 0) (1 2 0) (1 2 3))[0m 
[0m
  [31m× Raised an error The value
                      0.5
                    is not of type
                      VECTOR (expected: #2A((1 1 1) (0 2 2) (0 0 3)))[0m
  [32m✓ [90m#3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0))) is expected to be #3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0)))[0m 
[0m
  [31m× Raised an error The value
                      0.5
                    is not of type
                      VECTOR (expected: #3A(((1 4 0 0) (1 3 5 7))
                                            ((2 5 0 0) (2 4 6 8))
                                            ((3 1 0 0) (0 0 0 0))))[0m
  [31m× Raised an error The value
                      1.5
                    is not of type
                      VECTOR (expected: #3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0))
                                            ((1 2 0) (3 4 0) (5 6 0) (7 8 0))))[0m
  [32m✓ [90m#4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3)))) is expected to be #4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))))[0m 
[0m
  [32m✓ [90m#(4 5 6) is expected to be #(4 5 6)[0m 
[0m
  [32m✓ [90m5 is expected to be 5[0m 
[0m

[∪] Unique / Union
  [32m✓ [90m#(1 2 3 4 5 8 9 10 11 7 12) is expected to be #(1 2 3 4 5 8 9 10 11 7 12)[0m 
[0m
  [32m✓ [90m"MISP" is expected to be "MISP"[0m 
[0m
  [32m✓ [90m#(3 10 14 18 11 9 4 5 8) is expected to be #(3 10 14 18 11 9 4 5 8)[0m 
[0m
  [32m✓ [90m"STEELABR" is expected to be "STEELABR"[0m 
[0m
  [32m✓ [90m#("APRIL" "MAY" "JUNE") is expected to be #("APRIL" "MAY" "JUNE")[0m 
[0m

[∩] Intersection
  [32m✓ [90m"TRE" is expected to be "TRE"[0m 
[0m
  [32m✓ [90m"SEE" is expected to be "SEE"[0m 
[0m
  [32m✓ [90m#(1 4) is expected to be #(1 4)[0m 
[0m

[⌽] Reverse / Rotate
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
  [32m✓ [90m#2A((4 3 2 1) (8 7 6 5) (3 2 1 9)) is expected to be #2A((4 3 2 1) (8 7 6 5) (3 2 1 9))[0m 
[0m
  [32m✓ [90m#2A((3 4 1 2) (7 8 5 6) (2 3 9 1)) is expected to be #2A((3 4 1 2) (7 8 5 6) (2 3 9 1))[0m 
[0m

[⊖] Reverse First / Rotate First
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
  [32m✓ [90m#2A((9 1 2 3) (5 6 7 8) (1 2 3 4)) is expected to be #2A((9 1 2 3) (5 6 7 8) (1 2 3 4))[0m 
[0m
  [32m✓ [90m#2A((5 6 7 8) (9 1 2 3) (1 2 3 4)) is expected to be #2A((5 6 7 8) (9 1 2 3) (1 2 3 4))[0m 
[0m

[⍉] Transpose / Permute
  [32m✓ [90m#3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6))) is expected to be #3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6)))[0m 
[0m
  [32m✓ [90m#3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6))) is expected to be #3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6)))[0m 
[0m

[⌹] Matrix Inverse / Matrix Divide
  [32m✓ [90m#(1/30 1/15 1/10 2/15) is expected to be #(1/30 1/15 1/10 2/15)[0m 
[0m
  [32m✓ [90m#2A((-1/32 9/64) (1/8 -1/16)) is expected to be #2A((-1/32 9/64) (1/8 -1/16))[0m 
[0m
  [32m✓ [90m#2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42)) is expected to be #2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42))[0m 
[0m
  [32m✓ [90m#(193/90 739/90 229/45) is expected to be #(193/90 739/90 229/45)[0m 
[0m
  [32m✓ [90m#2A((1 2) (2 4) (6 4)) is expected to be #2A((1 2) (2 4) (6 4))[0m 
[0m

[⍋] Grade Up / Grade Up By
  [32m✓ [90m#(5 7 2 3 6 1 4) is expected to be #(5 7 2 3 6 1 4)[0m 
[0m
  [32m✓ [90m#(1 4 2 5 3) is expected to be #(1 4 2 5 3)[0m 
[0m
  [31m× Raised an error The value
                      T
                    is not of type
                      SEQUENCE (expected: "adeggijnouw")[0m
  [32m✓ [90m#(1 3 2 6 4 5) is expected to be #(1 3 2 6 4 5)[0m 
[0m

[⍒] Grade Down / Grade Down By
  [32m✓ [90m#(7 3 1 5 6 4 2) is expected to be #(7 3 1 5 6 4 2)[0m 
[0m
  [32m✓ [90m#(2 4 1 3 5) is expected to be #(2 4 1 3 5)[0m 
[0m
  [31m× Raised an error The value
                      T
                    is not of type
                      SEQUENCE (expected: "wuonjiggeda")[0m
  [32m✓ [90m#(5 4 6 2 3 1) is expected to be #(5 4 6 2 3 1)[0m 
[0m

[⊤] Encode
  [32m✓ [90m#(2 0 10) is expected to be #(2 0 10)[0m 
[0m
  [32m✓ [90m#(0 0 6 4) is expected to be #(0 0 6 4)[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1)) is expected to be #2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1))[0m 
[0m

[⊥] Decode
  [32m✓ [90m2671 is expected to be 2671[0m 
[0m
  [32m✓ [90m101 is expected to be 101[0m 
[0m
  [32m✓ [90m#(98 75 67) is expected to be #(98 75 67)[0m 
[0m

[⍎] Evaluate
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[←] Assign Result Of
  [32m✓ [90m#(8 7 6) is expected to be #(8 7 6)[0m 
[0m
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #(3 7 1))[0m


[/] Reduce
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m#(10 26 42) is expected to be #(10 26 42)[0m 
[0m
  [32m✓ [90m#(15 18 21 24) is expected to be #(15 18 21 24)[0m 
[0m; in: LET* ((#:G6764 :UNDEFINED))
;     (LET* ((#:G6764 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ APRIL::⍺)))
; 
; caught STYLE-WARNING:
;   The variable #:G6764 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m

[⌿] Reduce First
  [32m✓ [90m#(15 18 21 24) is expected to be #(15 18 21 24)[0m 
[0m
  [32m✓ [90m#(207 330 495 708) is expected to be #(207 330 495 708)[0m 
[0m
  [32m✓ [90m#(10 26 42) is expected to be #(10 26 42)[0m 
[0m

[\] Scan
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
  [32m✓ [90m#2A((1 3 6 10) (5 11 18 26) (9 19 30 42)) is expected to be #2A((1 3 6 10) (5 11 18 26) (9 19 30 42))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (6 8 10 12) (15 18 21 24)) is expected to be #2A((1 2 3 4) (6 8 10 12) (15 18 21 24))[0m 
[0m

[⍀] Scan First
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (6 8 10 12) (15 18 21 24)) is expected to be #2A((1 2 3 4) (6 8 10 12) (15 18 21 24))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (20 30 42 56) (288 450 660 924)) is expected to be #2A((1 2 3 4) (20 30 42 56) (288 450 660 924))[0m 
[0m
  [32m✓ [90m#2A((1 3 6 10) (5 11 18 26) (9 19 30 42)) is expected to be #2A((1 3 6 10) (5 11 18 26) (9 19 30 42))[0m 
[0m

[.] Inner/Outer Product
  [32m✓ [90m24 is expected to be 24[0m 
[0m
  [32m✓ [90m145 is expected to be 145[0m 
[0m
  [32m✓ [90m#(17 41 55) is expected to be #(17 41 55)[0m 
[0m
  [32m✓ [90m#(25 53 42) is expected to be #(25 53 42)[0m 
[0m
  [32m✓ [90m#2A((24 34 44 54) (25 35 45 55) (26 36 46 56)) is expected to be #2A((24 34 44 54) (25 35 45 55) (26 36 46 56))[0m 
[0m
  [32m✓ [90m#2A((0 -1 -2) (1 0 -1) (2 1 0)) is expected to be #2A((0 -1 -2) (1 0 -1) (2 1 0))[0m 
[0m
  [32m✓ [90m#2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3))) is expected to be #2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3)))[0m 
[0m
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
  [32m✓ [90m#(#(2 3 1) #(3 1 2) #(1 2 3)) is expected to be #(#(2 3 1) #(3 1 2) #(1 2 3))[0m 
[0m

[¨] Each
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
  [32m✓ [90m#(#(2 3 4 5 1) #(5 1 2 3 4)) is expected to be #(#(2 3 4 5 1) #(5 1 2 3 4))[0m 
[0m

[⍨] Commute
  [32m✓ [90m5 is expected to be 5[0m 
[0m
  [32m✓ [90m20 is expected to be 20[0m 
[0m

[∘] Compose
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [31m× #(#<FUNCTION (LAMBDA (OMEGA)) {1001E11D5B}> 30) is expected to be 6 
[0m
  [31m× Raised an error The value
                      #<FUNCTION (LAMBDA (OMEGA)) {1001E1275B}>
                    is not of type
                      NUMBER (expected: #(56487 176487 266487))[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [31m× Raised an error The value
                      #<FUNCTION (LAMBDA
                                     (OMEGA-COMP
                                      &OPTIONAL ALPHA-COMP)) {1001E13B9B}>
    
                    is not of type
                      REAL (expected: #(148 2981 162755))[0m
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m
  [32m✓ [90m#(3 15 36) is expected to be #(3 15 36)[0m 
[0m

[⍣] Power; in: LET* ((#:G6937 :UNDEFINED))
;     (LET* ((#:G6937 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 2))))
; 
; caught STYLE-WARNING:
;   The variable #:G6937 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
  [32m✓ [90m11 is expected to be 11[0m 
[0m
  [31m× #(#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {1001E1700B}> 9) is expected to be 15 
[0m; in: LET* ((#:G6950 :UNDEFINED))
;     (LET* ((#:G6950 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC
;                 #'(LAMBDA (APRIL::OMEGA APRIL::ALPHA)
;                     (IF #
;                         1
;                         0))
;                 APRIL::⍵ (VECTOR 10))))
; 
; caught STYLE-WARNING:
;   The variable #:G6950 is defined but never used.

;     (LET* ((#:G6950 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 2))))
; 
; caught STYLE-WARNING:
;   The variable #:G6950 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
  [32m✓ [90m10 is expected to be 10[0m 
[0m

Basic function definition and use, with comments.; in: LET* ((#:G6957 :UNDEFINED) (#:G6958 :UNDEFINED))
;     (LET* ((#:G6957 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ (VECTOR 3) APRIL::⍵)))
; 
; caught STYLE-WARNING:
;   The variable #:G6957 is defined but never used.

;     (LET* ((#:G6957
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G6958 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'* (VECTOR 2) APRIL::⍵)))
; 
; caught STYLE-WARNING:
;   The variable #:G6957 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G6958 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
  [32m✓ [90m#(8 10 12 14 16) is expected to be #(8 10 12 14 16)[0m 
[0mMonadic inline function.
  [32m✓ [90m#(6 7 8) is expected to be #(6 7 8)[0m 
[0mDyadic inline function.
  [32m✓ [90m#(6 14 24) is expected to be #(6 14 24)[0m 
[0mVariable-referenced values, including an element within an array, in a vector.
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #(1 2 9 3 5))[0m
Assignment of an element within an array.
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #2A((1 20 3) (4 5 6)))[0m
Selection from an array with multiple elided dimensions.
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #2A((6 2 7 3) (3 8 4 9) (9 5 1 6)))[0m
Elided assignment.
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))
                                              ((4 5 0 7) (8 9 0 2) (3 4 0 6))))[0m
Elided assignment of applied function's results.
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))
                                              ((4 5 16 7) (8 9 11 2) (3 4 15 6))))[0m
Elision and indexed array elements.
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #2A((1 2 3 4 5 6 7 8) (7 8 9 1 2 3 4 5)))[0m
As above but more complex.
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #3A(((2 1)
                                               (7 6)
                                               (3 2)
                                               (8 7)
                                               (4 3)
                                               (9 8)
                                               (5 4)
                                               (1 9))
                                              ((5 4)
                                               (1 9)
                                               (6 5)
                                               (2 1)
                                               (7 6)
                                               (3 2)
                                               (8 7)
                                               (4 3))))[0m
Indices of indices.
  [31m× Raised an error The value
                      1
                    is not of type
                      SEQUENCE (expected: #2A((7 6) (8 7) (4 3)))[0m
Operation over portions of an array.
  [31m× Raised an error The value
                      2
                    is not of type
                      SEQUENCE (expected: #2A((1 2 3 4 5 6 7 8)
                                              (19 1 2 3 4 15 16 17)
                                              (8 9 1 2 3 4 5 6)
                                              (17 8 9 1 2 13 14 15)))[0m

[31m× 56 of 226 tests failed[0m [90m(835ms)[0m
NIL
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (list (vector 0.5))))))
APRIL> (april "⊃2 2 2⍴(1)(1 2)(3 4)(1 2 3)")
#4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:34:02 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.522
APRIL> (april "⊃2 2 2⍴(1)(1 2)(3 4)(1 2 3)")

(:AX NIL) 
(:AX NIL) 
(:AX NIL) 
(:AX NIL) 
(:AX NIL) 
#4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))))
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AX NIL) 
(:AX NIL) 
(:AX NIL) 
(:AX NIL) 
(:AX NIL) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:34:25 PM):

; file: /Users/owner/Documents/src/april/april.lisp
; in: DEFUN ASSEMBLE-VALUE
;     (LIST :AX APRIL::CLOS APRIL::AXES)
; 
; caught WARNING:
;   undefined variable: CLOS
; 
; compilation unit finished
;   Undefined variable:
;     CLOS
;   caught 1 WARNING condition

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.343
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:34:34 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.369
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AX (((((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)))) NIL) 
(:AX (((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((0.5))) NIL) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
APRIL> (april (set (:compile-only)) "⊃[0.5;2](1)(1 2)(1 2 3)")

(:AX (((((3 2 1)) ((2 1)) ((1)) (:AXES (0.5) (2)) (:FN #\SUPERSET_OF)))) NIL) 
(:AX (((3 2 1)) ((2 1)) ((1)) (:AXES (0.5) (2)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((2 1)) ((1)) (:AXES (0.5) (2)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((1)) (:AXES (0.5) (2)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((0.5))) NIL) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
APRIL> (april (set (:compile-only)) "⊃(1)(1 2)(1 2 3)")

(:AX (((((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)))) NIL) 
(:AX (((3 2 1)) ((2 1)) ((1)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((2 1)) ((1)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((1)) (:FN #\SUPERSET_OF)) NIL) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:40:07 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.375
APRIL> (april (set (:compile-only)) "⊃[0.5;2](1)(1 2)(1 2 3)")

(:AX (((((3 2 1)) ((2 1)) ((1)) (:AXES (0.5) (2)) (:FN #\SUPERSET_OF)))) NIL) 
(:AX (((3 2 1)) ((2 1)) ((1)) (:AXES (0.5) (2)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((2 1)) ((1)) (:AXES (0.5) (2)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((1)) (:AXES (0.5) (2)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((0.5))) NIL) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST (VECTOR 0.5))))))
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AX (((((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)))) NIL) 
(:AX (((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((0.5))) NIL) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST (VECTOR 0.5))))))
APRIL> (april (set (:compile-onl)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AX (((((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)))) NIL) 
(:AX (((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((0.5))) NIL) 
#2A((1 1 1) (0 2 2) (0 0 3))
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AX (((((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)))) NIL) 
(:AX (((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((0.5))) NIL) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST (VECTOR 0.5))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:41:34 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.341
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AX (((((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)))) NIL) 
(:AX (((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((0.5))) NIL) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:41:43 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.321
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AX (((((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)))) NIL) 
(:AX (((3 2 1)) ((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((2 1)) ((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((1)) (:AXES (0.5)) (:FN #\SUPERSET_OF)) NIL) 
(:AX (((0.5))) NIL) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 02:41:48 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.423
APRIL> (april (set (:compile-onl)) "(1 2 3)")

(:AX (((((3 2 1))))) NIL) 
(:AX (((3 2 1))) NIL) 
#(1 2 3)
APRIL> (april (set (:compile-only)) "(1 2 3)")

(:AX (((((3 2 1))))) NIL) 
(:AX (((3 2 1))) NIL) 
(PROGN (DISCLOSE (VECTOR 1 2 3)))
APRIL> (april (set (:compile-only)) "(1 2 3)[1]")

(:AX ((((:AXES (1)) ((3 2 1))))) NIL) 
(:AX (((3 2 1))) (((1)))) 
(:AX (((1))) NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (vector 2))))))
APRIL> (april (set (:compile-onl)) "(1 2 3)[1]")

(:AX ((((:AXES (1)) ((3 2 1))))) NIL) 
(:AX (((3 2 1))) (((1)))) 
(:AX (((1))) NIL) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 03:03:27 PM):

; file: /Users/owner/Documents/src/april/april.lisp
; in: DEFUN ASSEMBLE-VALUE
;     (APRIL::CL :AXS APRIL::AXIS-SPECS)
; 
; caught STYLE-WARNING:
;   undefined function: CL
; 
; compilation unit finished
;   Undefined function:
;     CL
;   caught 1 STYLE-WARNING condition

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.593
; Evaluation aborted on #<TYPE-ERROR expected-type: SEQUENCE datum: 1>.
APRIL> (april (set (:compile-onl)) "(1 2 3)[1]")

(:AX ((((:AXES (1)) ((3 2 1))))) NIL) 
(:AX (((3 2 1))) (((1)))) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 03:03:42 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.328
; Evaluation aborted on #<UNDEFINED-FUNCTION CL {1004434953}>.
APRIL> (april (set (:compile-onl)) "(1 2 3)[1]")

(:AX ((((:AXES (1)) ((3 2 1))))) NIL) 
(:AX (((3 2 1))) (((1)))) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS (((1)))) 
(:AX (((1))) NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) ; Evaluation aborted on #<TYPE-ERROR expected-type: SEQUENCE datum: 1>.
APRIL> (april (set (:compile-only)) "(1 2 3)[1]")

(:AX ((((:AXES (1)) ((3 2 1))))) NIL) 
(:AX (((3 2 1))) (((1)))) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS (((1)))) 
(:AX (((1))) NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST 1)))))
APRIL> (april (set (:compile-only)) "(1 2 3)[1 2]")

(:AX ((((:AXES (2 1)) ((3 2 1))))) NIL) 
(:AX (((3 2 1))) (((2 1)))) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS (((2 1)))) 
(:AX (((2 1))) NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST 1 2)))))
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST 1)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 03:57:45 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.568
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST 1)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 03:58:23 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.344
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXP ((:AXES (1) (2)) ((3 2 1)))) 
(:AX (((3 2 1))) (:EXP ((:AXES (1) (2)) ((3 2 1))))) 
(:AXS NIL) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 03:58:35 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.467
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 3>.
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXP ((:AXES (1) (2)) ((3 2 1)))) 
(:AX (((3 2 1))) (((1) (2)))) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST 1)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 03:58:47 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.403
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(:AXS NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST 1)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 04:01:56 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.356
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:AXS (VECTOR 1 2 3) (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:AXS 1 NIL) 
(:AXS 2 NIL) 
(:AXS (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 1)))
 NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 1)))
 NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST 1)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 04:02:30 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.442
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:AXS (VECTOR 1 2 3) (((1) (2)))) 
(:AX ((((1) (2)))) NIL) 
(:AX ((1) (2)) NIL) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 04:04:11 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.280
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 1>.
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:EXPR ((((:AXES (1) (2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((1) (2)))) 
(:EXPR ((((1) (2))))) 
(:AX ((((1) (2)))) NIL) 
(:EXPR ((1) (2))) 
(:AX ((1) (2)) NIL) 
(:EXPR 1) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 04:04:24 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.379
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 1>.
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:EXPR ((((:AXES (1) (2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((1) (2)))) 
(:EXPR (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 1)))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 1)))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST 1)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 04:05:24 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.342
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:EXPR ((((:AXES (1) (2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((1) (2)))) 
(:EXPR (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 1)))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 1)))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST 1)))))
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:EXPR ((((:AXES (1) (2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((1) (2)))) 
(:EXPR (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 1)))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 1)))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST 1)))))
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:EXPR ((((:AXES (1) (2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((1) (2)))) 
(:EXPR (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 1)))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST 1)))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST 1)))))
APRIL> (vex::vex-expression *april-idiom* (make-hash-table) '(((1) (2))))

(:EXPR (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(VECTOR 1)
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 04:06:48 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.365
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:EXPR ((((:AXES (1) (2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((1) (2)))) 
(:EXPR (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST VECTOR 1)))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST VECTOR 1)))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST VECTOR 1)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 04:07:08 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.308
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:EXPR ((((:AXES (1) (2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((1) (2)))) 
(:EXPR (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
APRIL> (april (set (:compile-onl)) "(1 2 3)[1;2]")

(:EXPR ((((:AXES (1) (2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((1) (2)))) 
(:EXPR (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
1
APRIL> (april (set (:compile-onl)) "(1 2 3)[1 2]")

(:EXPR ((((:AXES (2 1)) ((3 2 1)))))) 
(:AX ((((:AXES (2 1)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (2 1)) ((3 2 1)))) 
(:EXP ((:AXES (2 1)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((2 1)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((2 1)))) 
(:EXPR (((2 1)))) 
(:AX (((2 1))) NIL) 
(:EXPR (2 1)) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
#(1 2)
APRIL> (vex::vex-expression *april-idiom* (make-hash-table) '(((1 2))))
			    

(:EXPR (((1 2)))) 
(:AX (((1 2))) NIL) 
(:EXPR (1 2)) 
(:AXS 1 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 2 1) NIL) 
(:EXPR NIL) 
(VECTOR 2 1)
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2]")

(:EXPR ((((:AXES (1) (2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((1) (2)))) 
(:EXPR (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
APRIL> (april (set (:compile-only)) "(1 2 3)[1 2]")

(:EXPR ((((:AXES (2 1)) ((3 2 1)))))) 
(:AX ((((:AXES (2 1)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (2 1)) ((3 2 1)))) 
(:EXP ((:AXES (2 1)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((2 1)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((2 1)))) 
(:EXPR (((2 1)))) 
(:AX (((2 1))) NIL) 
(:EXPR (2 1)) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1 2))))))
APRIL> (vex::vex-expression *april-idiom* (make-hash-table) '(((1 2))))
			    

(:EXPR (((1 2)))) 
(:AX (((1 2))) NIL) 
(:EXPR (1 2)) 
(:AXS 1 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 2 1) NIL) 
(:EXPR NIL) 
(VECTOR 2 1)
APRIL> (vex::vex-expression *april-idiom* (make-hash-table) '(((1) (2))))

(:EXPR (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(VECTOR 1)
APRIL> (vex::vex-expression *april-idiom* (make-hash-table) '(((1) (2) ())))

(:EXPR (((1) (2) NIL))) 
(:AX (((1) (2) NIL)) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(VECTOR 1)
APRIL> (vex::vex-expression *april-idiom* (make-hash-table) '(((1) (2))))

(:EXPR (((1) (2)))) 
(:AX (((1) (2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (2)) 
(:AXS 2 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(VECTOR 1)
APRIL> #'expression
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 06:02:06 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:01.198
; Evaluation aborted on #<UNDEFINED-FUNCTION EXPRESSION {1008F4EF23}>.
APRIL> (april (set (:compile-only)) "(1 2 3)[1 2]")

(:EXPR ((((:AXES (2 1)) ((3 2 1)))) "")) 
(:AX ((((:AXES (2 1)) ((3 2 1)))) "") NIL) 
(:EXPR ((:AXES (2 1)) ((3 2 1)))) 
(:EXP ((:AXES (2 1)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((2 1)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((2 1)))) 
(:EXPR (((2 1)))) 
(:AX (((2 1))) NIL) 
(:EXPR (2 1)) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:AXS "" NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (VECTOR ""
          (DISCLOSE
           (AREF-ELIDING (VECTOR 1 2 3)
                         (MAPCAR
                          (LAMBDA (VECTOR)
                            (IF VECTOR
                                (IF (= 1 (LENGTH VECTOR))
                                    (- (AREF VECTOR 0)
                                       (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                                    (MAPCAR
                                     (LAMBDA (ELEM)
                                       (- ELEM
                                          (OF-STATE *APRIL-IDIOM*
                                                    :COUNT-FROM)))
                                     (ARRAY-TO-LIST VECTOR)))))
                          (LIST (VECTOR 1 2))))))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 06:02:36 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.246
APRIL> (april (set (:compile-only)) "(1 2 3)[1 2]")

(:EXPR ((((:AXES (2 1)) ((3 2 1)))))) 
(:AX ((((:AXES (2 1)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (2 1)) ((3 2 1)))) 
(:EXP ((:AXES (2 1)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((2 1)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((2 1)))) 
(:EXPR (((2 1)))) 
(:AX (((2 1))) NIL) 
(:EXPR (2 1)) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1 2))))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 06:03:33 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.164
APRIL> (april (set (:compile-only)) "(1 2 3)[1 2]")

(:LL (((:AXES (2 1)) ((3 2 1))))) 
(:EXPR ((((:AXES (2 1)) ((3 2 1)))))) 
(:AX ((((:AXES (2 1)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (2 1)) ((3 2 1)))) 
(:EXP ((:AXES (2 1)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((2 1)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((2 1)))) 
(:EXPR (((2 1)))) 
(:AX (((2 1))) NIL) 
(:EXPR (2 1)) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1 2))))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 06:04:06 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.178
APRIL> (april (set (:compile-only)) "(1 2 3)[1 2]")

(:LL (((:AXES (2 1)) ((3 2 1))))) 
(:EXPR (((:AXES (2 1)) ((3 2 1))))) 
(:AX (((:AXES (2 1)) ((3 2 1)))) NIL) 
(:EXPR (:AXES (2 1))) 
(:AXS :AXES NIL) 
(:AX ((2 1)) NIL) 
(:EXPR 2) ; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 2>.
APRIL> (destructuring-bind (a b) (list 1 2) a)
; in: DESTRUCTURING-BIND (A B)
;     (LET* ((#:G7020 (SB-C::CHECK-DS-LIST (LIST 1 2) 2 2 '(APRIL::A APRIL::B)))
;            (APRIL::A (POP #:G7020))
;            (APRIL::B (POP #:G7020)))
;       APRIL::A)
; 
; caught STYLE-WARNING:
;   The variable B is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
1
APRIL> (destructuring-bind (a b) (list 1 2) b)
; in: DESTRUCTURING-BIND (A B)
;     (LET* ((#:G7021 (SB-C::CHECK-DS-LIST (LIST 1 2) 2 2 '(APRIL::A APRIL::B)))
;            (APRIL::A (POP #:G7021))
;            (APRIL::B (POP #:G7021)))
;       APRIL::B)
; 
; caught STYLE-WARNING:
;   The variable A is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
2
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 06:05:53 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.202
APRIL> (april (set (:compile-only)) "(1 2 3)[1 2]")

(:LL (((:AXES (2 1)) ((3 2 1)))) "") 
(:EXPR (((:AXES (2 1)) ((3 2 1))))) 
(:AX (((:AXES (2 1)) ((3 2 1)))) NIL) 
(:EXPR (:AXES (2 1))) 
(:AXS :AXES NIL) 
(:AX ((2 1)) NIL) 
(:EXPR 2) 
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 06:06:08 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.207
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 2>.
APRIL> (april (set (:compile-only)) "(1 2 3)[1 2]")

(:LL (((:AXES (2 1)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (2 1)) ((3 2 1)))))) 
(:AX ((((:AXES (2 1)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (2 1)) ((3 2 1)))) 
(:EXP ((:AXES (2 1)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((2 1)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((2 1)))) 
(:EXPR (((2 1)))) 
(:AX (((2 1))) NIL) 
(:EXPR (2 1)) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1 2))))))
APRIL> (april (set (:compile-onl)) "(1 2 3)[1 2]")

(:LL (((:AXES (2 1)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (2 1)) ((3 2 1)))))) 
(:AX ((((:AXES (2 1)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (2 1)) ((3 2 1)))) 
(:EXP ((:AXES (2 1)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((2 1)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2 3) (((2 1)))) 
(:EXPR (((2 1)))) 
(:AX (((2 1))) NIL) 
(:EXPR (2 1)) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
#(1 2)
APRIL> (april (set (:compile-onl)) "(4 5 6)[1 2]")

(:LL (((:AXES (2 1)) ((6 5 4)))) "") 
(:EXPR ((((:AXES (2 1)) ((6 5 4)))))) 
(:AX ((((:AXES (2 1)) ((6 5 4))))) NIL) 
(:EXPR ((:AXES (2 1)) ((6 5 4)))) 
(:EXP ((:AXES (2 1)) ((6 5 4))) NIL) 
(:AX (((6 5 4))) (((2 1)))) 
(:EXPR (6 5 4)) 
(:AXS 6 NIL) 
(:AXS 5 NIL) 
(:AXS 4 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 4 5 6) (((2 1)))) 
(:EXPR (((2 1)))) 
(:AX (((2 1))) NIL) 
(:EXPR (2 1)) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:AXS (VECTOR 1 2) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 4 5 6)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
(:AXS
o (AREF-ELIDING (VECTOR 4 5 6)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
#(4 5)
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:11:58 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.351
APRIL> (april (set (:compile-onl)) "(4 5 6)[1 2]")

(:LL (((:AXES (2 1)) ((6 5 4)))) "") 
(:EXPR ((((:AXES (2 1)) ((6 5 4)))))) 
(:AX ((((:AXES (2 1)) ((6 5 4))))) NIL) 
(:EXPR ((:AXES (2 1)) ((6 5 4)))) 
(:EXP ((:AXES (2 1)) ((6 5 4))) NIL) 
(:AX (((6 5 4))) (((2 1)))) 
(:EXPR (6 5 4)) 
(:AXS 6 NIL) 
(:AXS 5 NIL) 
(:AXS 4 NIL) 
(:EXPR NIL) 
((VECTOR 4 5 6)) 
(:AXS (VECTOR 4 5 6) (((2 1)))) 
(:EXPR (((2 1)))) 
(:AX (((2 1))) NIL) 
(:EXPR (2 1)) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2)) 
(:AXS (VECTOR 1 2) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 4 5 6)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING (VECTOR 4 5 6)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))) 
(:AXS
 (AREF-ELIDING (VECTOR 4 5 6)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1 2))))
 NIL) 
(:EXPR NIL) 
#(4 5)
APRIL> (april (set (:compile-onl)) "(4 5 6)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((6 5 4)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((6 5 4)))))) 
(:AX ((((:AXES (1) (3 2)) ((6 5 4))))) NIL) 
(:EXPR ((:AXES (1) (3 2)) ((6 5 4)))) 
(:EXP ((:AXES (1) (3 2)) ((6 5 4))) NIL) 
(:AX (((6 5 4))) (((1) (3 2)))) 
(:EXPR (6 5 4)) 
(:AXS 6 NIL) 
(:AXS 5 NIL) 
(:AXS 4 NIL) 
(:EXPR NIL) 
((VECTOR 4 5 6)) 
(:AXS (VECTOR 4 5 6) (((1) (3 2)))) 
(:EXPR (((1) (3 2)))) 
(:AX (((1) (3 2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 4 5 6)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING (VECTOR 4 5 6)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 4 5 6)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
4
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:12:27 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.737
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (3 2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (3 2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (3 2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (3 2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:AXS (((VECTOR 1 2 3))) (((1) (3 2)))) 
(:EXPR (((1) (3 2)))) 
(:AX (((1) (3 2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (((VECTOR 1) (VECTOR 2 3))) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (((VECTOR 1 2 3)))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (((VECTOR 1) (VECTOR 2 3))))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING (((VECTOR 1 2 3)))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (((VECTOR 1) (VECTOR 2 3))))))) 
(:AXS
 (((AREF-ELIDING (((VECTOR 1 2 3)))
                 (MAPCAR
                  (LAMBDA (VECTOR)
                    (IF VECTOR
                        (IF (= 1 (LENGTH VECTOR))
                            (- (AREF VECTOR 0)
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                            (MAPCAR
                             (LAMBDA (ELEM)
                               (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                             (ARRAY-TO-LIST VECTOR)))))
                  (LIST (((VECTOR 1) (VECTOR 2 3))))))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (((AREF-ELIDING (((VECTOR 1 2 3)))
                  (MAPCAR
                   (LAMBDA (VECTOR)
                     (IF VECTOR
                         (IF (= 1 (LENGTH VECTOR))
                             (- (AREF VECTOR 0)
                                (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                             (MAPCAR
                              (LAMBDA (ELEM)
                                (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                              (ARRAY-TO-LIST VECTOR)))))
                   (LIST (((VECTOR 1) (VECTOR 2 3))))))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:12:50 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.357
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (3 2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (3 2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (3 2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (3 2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:AXS ((VECTOR 1 2 3)) (((1) (3 2)))) 
(:EXPR (((1) (3 2)))) 
(:AX (((1) (3 2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS ((VECTOR 1) (VECTOR 2 3)) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST ((VECTOR 1) (VECTOR 2 3)))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST ((VECTOR 1) (VECTOR 2 3)))))) 
(:AXS
 ((AREF-ELIDING ((VECTOR 1 2 3))
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST ((VECTOR 1) (VECTOR 2 3))))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  ((AREF-ELIDING ((VECTOR 1 2 3))
                 (MAPCAR
                  (LAMBDA (VECTOR)
                    (IF VECTOR
                        (IF (= 1 (LENGTH VECTOR))
                            (- (AREF VECTOR 0)
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                            (MAPCAR
                             (LAMBDA (ELEM)
                               (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                             (ARRAY-TO-LIST VECTOR)))))
                  (LIST ((VECTOR 1) (VECTOR 2 3))))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:13:37 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.268
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (3 2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (3 2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (3 2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (3 2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:AXS ((VECTOR 1 2 3)) (((1) (3 2)))) 
(:EXPR (((1) (3 2)))) 
(:AX (((1) (3 2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS ((VECTOR 1) (VECTOR 2 3)) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))) 
(:AXS
 ((AREF-ELIDING ((VECTOR 1 2 3))
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1) (VECTOR 2 3)))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  ((AREF-ELIDING ((VECTOR 1 2 3))
                 (MAPCAR
                  (LAMBDA (VECTOR)
                    (IF VECTOR
                        (IF (= 1 (LENGTH VECTOR))
                            (- (AREF VECTOR 0)
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                            (MAPCAR
                             (LAMBDA (ELEM)
                               (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                             (ARRAY-TO-LIST VECTOR)))))
                  (LIST (VECTOR 1) (VECTOR 2 3)))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:14:10 PM):

; file: /Users/owner/Documents/src/april/april.lisp
; in: DEFUN ASSEMBLE-VALUE
;     (APRIL::AXIS-ENCLOSE
;      (MAPCAR
;       (LAMBDA (APRIL::SUB-EXP)
;         (FUNCALL APRIL::SUBPROCESSOR APRIL::IDIOM APRIL::META APRIL::SUB-EXP))
;       (FIRST EXP)))
; 
; caught WARNING:
;   function called with one argument, but wants exactly two
;   See also:
;     The ANSI Standard, Section 3.2.2.3

;     (COND ((AND (LISTP (FIRST EXP)) (EQ :AXES (CAAR EXP))) :AXES-PLACEHOLDER)
;           ((AND (LISTP (FIRST EXP)) (NOT (KEYWORDP #)))
;            (PRINT (LIST :AX EXP APRIL::AXES))
;            (APRIL::AXIS-ENCLOSE (MAPCAR (LAMBDA # #) (FIRST EXP))) APRIL::AXES)
;           ((AND (LISTP (FIRST EXP)) (EQ :FN (CAAR EXP)))
;            `(LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA)
;               ,(FUNCALL (CADAR EXP) APRIL::META NIL 'APRIL::OMEGA
;                         'APRIL::ALPHA)))
;           ((SYMBOLP (FIRST EXP))
;            (APRIL::AXIS-ENCLOSE
;             (IF (OR # # #)
;                 (FIRST EXP)
;                 `(APRIL::DISCLOSE ,#))
;             APRIL::AXES))
;           (T (APRIL::AXIS-ENCLOSE (FIRST EXP) APRIL::AXES)))
; --> IF IF PROGN 
; ==>
;   APRIL::AXES
; 
; note: deleting unreachable code
; 
; compilation unit finished
;   caught 1 WARNING condition
;   printed 1 note


; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.409
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:14:10 PM):

; file: /Users/owner/Documents/src/april/april.lisp
; in: DEFUN ASSEMBLE-VALUE
;     (APRIL::AXIS-ENCLOSE
;      (MAPCAR
;       (LAMBDA (APRIL::SUB-EXP)
;         (FUNCALL APRIL::SUBPROCESSOR APRIL::IDIOM APRIL::META APRIL::SUB-EXP))
;       (FIRST EXP)))
; 
; caught WARNING:
;   function called with one argument, but wants exactly two
;   See also:
;     The ANSI Standard, Section 3.2.2.3

;     (COND ((AND (LISTP (FIRST EXP)) (EQ :AXES (CAAR EXP))) :AXES-PLACEHOLDER)
;           ((AND (LISTP (FIRST EXP)) (NOT (KEYWORDP #)))
;            (PRINT (LIST :AX EXP APRIL::AXES))
;            (APRIL::AXIS-ENCLOSE (MAPCAR (LAMBDA # #) (FIRST EXP))) APRIL::AXES)
;           ((AND (LISTP (FIRST EXP)) (EQ :FN (CAAR EXP)))
;            `(LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA)
;               ,(FUNCALL (CADAR EXP) APRIL::META NIL 'APRIL::OMEGA
;                         'APRIL::ALPHA)))
;           ((SYMBOLP (FIRST EXP))
;            (APRIL::AXIS-ENCLOSE
;             (IF (OR # # #)
;                 (FIRST EXP)
;                 `(APRIL::DISCLOSE ,#))
;             APRIL::AXES))
;           (T (APRIL::AXIS-ENCLOSE (FIRST EXP) APRIL::AXES)))
; --> IF IF PROGN 
; ==>
;   APRIL::AXES
; 
; note: deleting unreachable code
; 
; compilation unit finished
;   caught 1 WARNING condition
;   printed 1 note


; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.343
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:14:59 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.360
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (3 2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (3 2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (3 2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (3 2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:AXS ((VECTOR 1 2 3)) (((1) (3 2)))) 
(:EXPR (((1) (3 2)))) 
(:AX (((1) (3 2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS ((VECTOR 1) (VECTOR 2 3)) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))) 
(:AXS
 ((AREF-ELIDING ((VECTOR 1 2 3))
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1) (VECTOR 2 3)))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  ((AREF-ELIDING ((VECTOR 1 2 3))
                 (MAPCAR
                  (LAMBDA (VECTOR)
                    (IF VECTOR
                        (IF (= 1 (LENGTH VECTOR))
                            (- (AREF VECTOR 0)
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                            (MAPCAR
                             (LAMBDA (ELEM)
                               (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                             (ARRAY-TO-LIST VECTOR)))))
                  (LIST (VECTOR 1) (VECTOR 2 3)))))))
APRIL> (april (set (:compile-onl)) "(1 2 3)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (3 2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (3 2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (3 2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (3 2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:AXS ((VECTOR 1 2 3)) (((1) (3 2)))) 
(:EXPR (((1) (3 2)))) 
(:AX (((1) (3 2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS ((VECTOR 1) (VECTOR 2 3)) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))) 
(:AXS
 ((AREF-ELIDING ((VECTOR 1 2 3))
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1) (VECTOR 2 3)))))
 NIL) 
(:EXPR NIL) ; in:
            ;      PROGN (DISCLOSE
            ;         ((AREF-ELIDING ((VECTOR 1 2 3)) (MAPCAR (LAMBDA # #) (LIST # #)))))
;     ((APLESQUE:AREF-ELIDING ((VECTOR 1 2 3))
;                             (MAPCAR
;                              (LAMBDA (VECTOR)
;                                (IF VECTOR
;                                    #))
;                              (LIST (VECTOR 1) (VECTOR 2 3)))))
; 
; caught ERROR:
;   illegal function call
; 
; compilation unit finished
;   caught 1 ERROR condition
; Evaluation aborted on #<SB-INT:COMPILED-PROGRAM-ERROR {1005E96643}>.
APRIL> (april (set (:compile-onl)) "(1 2 3)[1]")

(:LL (((:AXES (1)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1)) ((3 2 1)))))) 
(:AX ((((:AXES (1)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1)) ((3 2 1)))) 
(:EXP ((:AXES (1)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:AXS ((VECTOR 1 2 3)) (((1)))) 
(:EXPR (((1)))) 
(:AX (((1))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1)) 
(:AXS ((VECTOR 1)) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 ((AREF-ELIDING ((VECTOR 1 2 3))
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1)))))
 NIL) 
(:EXPR NIL) ; in:
            ;      PROGN (DISCLOSE
            ;         ((AREF-ELIDING ((VECTOR 1 2 3)) (MAPCAR (LAMBDA # #) (LIST #)))))
;     ((APLESQUE:AREF-ELIDING ((VECTOR 1 2 3))
;                             (MAPCAR
;                              (LAMBDA (VECTOR)
;                                (IF VECTOR
;                                    #))
;                              (LIST (VECTOR 1)))))
; 
; caught ERROR:
;   illegal function call
; 
; compilation unit finished
;   caught 1 ERROR condition
; Evaluation aborted on #<SB-INT:COMPILED-PROGRAM-ERROR {1006085F43}>.
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (3 2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (3 2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (3 2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (3 2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:AXS ((VECTOR 1 2 3)) (((1) (3 2)))) 
(:EXPR (((1) (3 2)))) 
(:AX (((1) (3 2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS ((VECTOR 1) (VECTOR 2 3)) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING ((VECTOR 1 2 3))
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))) 
(:AXS
 ((AREF-ELIDING ((VECTOR 1 2 3))
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1) (VECTOR 2 3)))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  ((AREF-ELIDING ((VECTOR 1 2 3))
                 (MAPCAR
                  (LAMBDA (VECTOR)
                    (IF VECTOR
                        (IF (= 1 (LENGTH VECTOR))
                            (- (AREF VECTOR 0)
                               (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                            (MAPCAR
                             (LAMBDA (ELEM)
                               (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                             (ARRAY-TO-LIST VECTOR)))))
                  (LIST (VECTOR 1) (VECTOR 2 3)))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:16:32 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.351
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((3 2 1)))))) 
(:AX ((((:AXES (1) (3 2)) ((3 2 1))))) NIL) 
(:EXPR ((:AXES (1) (3 2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (3 2)) ((3 2 1))) NIL) 
(:AX (((3 2 1))) (((1) (3 2)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1) (3 2)))) 
(:EXPR (((1) (3 2)))) 
(:AX (((1) (3 2))) NIL) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:16:56 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.303
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((3 2 1)))))) 
(:EXPR ((:AXES (1) (3 2)) ((3 2 1)))) 
(:EXP ((:AXES (1) (3 2)) ((3 2 1))) NIL) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1) (3 2)))) 
(:EXPR (((1) (3 2)))) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:17:16 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.330
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((3 2 1)))))) 
(:EXPR ((:AXES (1) (3 2)) ((3 2 1)))) 
(:EXPR (3 2 1)) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:EXPR (((1) (3 2)))) 
(:EXPR (1)) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:EXPR NIL) 
(:EXPR NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:18:48 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.385
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((3 2 1)))))) 
(:EXPR ((:AXES (1) (3 2)) ((3 2 1)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1) (3 2)))) 
(:EXPR (((1) (3 2)))) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:LL (((:AXES (1) (3 2)) ((3 2 1)))) "") 
(:EXPR ((((:AXES (1) (3 2)) ((3 2 1)))))) 
(:EXPR ((:AXES (1) (3 2)) ((3 2 1)))) 
(:EXPR (3 2 1)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:EXPR NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1) (3 2)))) 
(:EXPR (((1) (3 2)))) 
(:EXPR (1)) 
(:AXS 1 NIL) 
(:EXPR NIL) 
(:EXPR (3 2)) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:EXPR NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:EXPR NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:EXPR NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 06:21:18 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.169
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1) (3 2)))) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:RR (VECTOR 2 3) NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:44:36 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.511
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:RR (VECTOR 2 3) NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:RR (VECTOR 2 3) NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:44:36 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.388
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:48:09 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.320
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:RR (VECTOR 2 3) NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:48:45 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.426
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:RR (VECTOR 2 3) NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (PRINT (LIST :VV(april (set (:compile-only)) "(1 2 3)[1;2 3]") VECTOR))
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (PRINT (LIST :VV VECTOR))
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (PRINT (LIST :VV VECTOR))
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (PRINT (LIST :VV VECTOR))
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (PRINT (LIST :VV VECTOR))
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (PRINT (LIST :VV VECTOR))
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:49:04 PM):

; file: /Users/owner/Documents/src/april/april.lisp
; in: DEFUN ASSEMBLE-VALUE
;     (LIST :VV VECTOR)
; 
; caught WARNING:
;   undefined variable: VECTOR
; 
; compilation unit finished
;   Undefined variable:
;     VECTOR
;   caught 1 WARNING condition

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.367
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:49:12 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.322
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) NIL) 
(:VV) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:RR (VECTOR 2 3) NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (:VV)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:49:30 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.317
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1) (3 2)))) 
(:VV) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:RR (VECTOR 2 3) NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (:VV)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:50:29 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.406
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1) (3 2)))) 
(:VV) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:50:42 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.435
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 1>.
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1) (3 2)))) 
(:VV) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:RR (VECTOR 2 3) NIL) 
((VECTOR 1) (VECTOR 2 3)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (:VV)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:50:55 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.355
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1) (3 2)))) 
(:VV) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:51:09 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.389
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 1>.
APRIL> (april (set (:compile-only)) "(1 2 3)[1;2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1) (3 2)))) 
(:VV) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
((VECTOR 1)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:RR (VECTOR 2 3) NIL) 
((VECTOR 2 3)) 
(:AXS (VECTOR 2 3) NIL) 
(:RR (VECTOR 2 3) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1) (VECTOR 2 3))))
 NIL) 
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (:VV)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 1) (VECTOR 2 3))))))
APRIL> (april (set (:compile-onl)) "(1 2 3)[1]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1)))) 
(:VV) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
((VECTOR 1)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) ; in:
      ;      PROGN (DISCLOSE
      ;         (AREF-ELIDING (VECTOR 1 2 3)
      ;                       (MAPCAR
      ;                        (LAMBDA (VECTOR)
      ;                          (:VV)
      ;                          (IF VECTOR
      ;                              #))
      ;                        (LIST (VECTOR 1)))))
;     (:VV)
; 
; caught STYLE-WARNING:
;   undefined function: :VV
; 
; compilation unit finished
;   Undefined function:
;     :VV
;   caught 1 STYLE-WARNING condition

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1)))) 
(:VV) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
((VECTOR 1)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (:VV)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) ; in:
      ;      PROGN (DISCLOSE
      ;         (AREF-ELIDING (VECTOR 1 2 3)
      ;                       (MAPCAR
      ;                        (LAMBDA (VECTOR)
      ;                          (:VV)
      ;                          (IF VECTOR
      ;                              #))
      ;                        (LIST (VECTOR 1)))))
;     (:VV)
; 
; caught STYLE-WARNING:
;   undefined function: :VV
; 
; compilation unit finished
;   Undefined function:
;     :VV
;   caught 1 STYLE-WARNING condition
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:51:41 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.332
; Evaluation aborted on #<UNDEFINED-FUNCTION VV {1007C84EA3}>.
APRIL> (april (set (:compile-onl)) "(1 2 3)[1]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((1)))) 
(:AXS 1 NIL) 
(:RR (VECTOR 1) NIL) 
((VECTOR 1)) 
(:AXS (VECTOR 1) NIL) 
(:RR (VECTOR 1) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 1))))
 NIL) 
1
APRIL> (april (set (:compile-onl)) "(1 2 3)[2]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((2)))) 
(:AXS 2 NIL) 
(:RR (VECTOR 2) NIL) 
((VECTOR 2)) 
(:AXS (VECTOR 2) NIL) 
(:RR (VECTOR 2) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2))))
 NIL) 
2
APRIL> (april (set (:compile-onl)) "(1 2 3)[2 3]")

(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:AXS 1 NIL) 
(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:AXS (VECTOR 1 2 3) (((3 2)))) 
(:AXS 3 NIL) 
(:AXS 2 NIL) 
(:RR (VECTOR 2 3) NIL) 
((VECTOR 2 3)) 
(:AXS (VECTOR 2 3) NIL) 
(:RR (VECTOR 2 3) NIL) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2 3))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2 3))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2 3))))) 
(:AXS
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2 3))))
 NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2 3))))
 NIL) 
#(2 3)
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:52:12 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.424
APRIL> (april (set (:compile-onl)) "(1 2 3)[2 3]")

(:RR (VECTOR 1 2 3) NIL) 
((VECTOR 1 2 3)) 
(:RR (VECTOR 2 3) NIL) 
((VECTOR 2 3)) 
(:RR (VECTOR 2 3) NIL) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2 3))))
 NIL) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2 3))))) 
(:RR
 (AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2 3))))
 NIL) 
#(2 3)
; compiling file "/Users/owner/Documents/src/april/vex/vex.lisp" (written 06 AUG 2018 06:52:07 PM):

; /Users/owner/Documents/src/april/vex/vex.fasl written
; compilation finished in 0:00:00.239
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:52:28 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.332
APRIL> (april (set (:compile-onl)) "(1 2 3)[2 3]")

((VECTOR 1 2 3)) 
((VECTOR 2 3)) 
((AREF-ELIDING (VECTOR 1 2 3)
               (MAPCAR
                (LAMBDA (VECTOR)
                  (IF VECTOR
                      (IF (= 1 (LENGTH VECTOR))
                          (- (AREF VECTOR 0)
                             (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                          (MAPCAR
                           (LAMBDA (ELEM)
                             (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                           (ARRAY-TO-LIST VECTOR)))))
                (LIST (VECTOR 2 3))))) 
#(2 3)
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:53:00 PM):

; file: /Users/owner/Documents/src/april/april.lisp
; in: DEFUN ASSEMBLE-VALUE
;     (APRIL::AXIS-ENCLOSE
;      (FIRST
;       (MAPCAR
;        (LAMBDA (APRIL::SUB-EXP)
;          (FUNCALL APRIL::SUBPROCESSOR APRIL::IDIOM APRIL::META APRIL::SUB-EXP))
;        (FIRST EXP))))
; 
; caught WARNING:
;   function called with one argument, but wants exactly two
;   See also:
;     The ANSI Standard, Section 3.2.2.3

;     (COND ((AND (LISTP (FIRST EXP)) (EQ :AXES (CAAR EXP))) :AXES-PLACEHOLDER)
;           ((AND (LISTP (FIRST EXP)) (NOT (KEYWORDP #)))
;            (APRIL::AXIS-ENCLOSE (FIRST (MAPCAR # #))) APRIL::AXES)
;           ((AND (LISTP (FIRST EXP)) (EQ :FN (CAAR EXP)))
;            `(LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA)
;               ,(FUNCALL (CADAR EXP) APRIL::META NIL 'APRIL::OMEGA
;                         'APRIL::ALPHA)))
;           ((SYMBOLP (FIRST EXP))
;            (APRIL::AXIS-ENCLOSE
;             (IF (OR # # #)
;                 (FIRST EXP)
;                 `(APRIL::DISCLOSE ,#))
;             APRIL::AXES))
;           (T (APRIL::AXIS-ENCLOSE (FIRST EXP) APRIL::AXES)))
; --> IF IF PROGN 
; ==>
;   APRIL::AXES
; 
; note: deleting unreachable code
; 
; compilation unit finished
;   caught 1 WARNING condition
;   printed 1 note


; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.338
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:53:24 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.509
APRIL> (april (set (:compile-onl)) "(1 2 3)[2 3]")
#(2 3)
APRIL> (april (set (:compile-only)) "(1 2 3)[2 3]")
(PROGN
 (DISCLOSE
  (AREF-ELIDING (VECTOR 1 2 3)
                (MAPCAR
                 (LAMBDA (VECTOR)
                   (IF VECTOR
                       (IF (= 1 (LENGTH VECTOR))
                           (- (AREF VECTOR 0)
                              (OF-STATE *APRIL-IDIOM* :COUNT-FROM))
                           (MAPCAR
                            (LAMBDA (ELEM)
                              (- ELEM (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                            (ARRAY-TO-LIST VECTOR)))))
                 (LIST (VECTOR 2 3))))))
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 06:59:47 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.624
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 3 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:00:22 PM):

(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX :AXES) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX :AXES) 
(:AAX NIL) 
(:AAX :AXES) 
(:AAX :AXES) 
(:AAX :AXES) 
(:AAX :AXES) 
(:AAX :AXES) 
(:AAX NIL) 
(:AAX :AXES) 
(:AAX :AXES) 
(:AAX :AXES) 
(:AAX :AXES) 
(:AAX NIL) 
(:AAX :AXES) 
(:AAX :AXES) 
(:AAX NIL) 
(:AAX :AXES) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX :AXES) 
(:AAX :AXES) 
(:AAX :AXES) 
(:AAX :AXES) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 
(:AAX NIL) 

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.319

APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
APRIL> (char= #\a #\a)
T
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:06:26 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.491
APRIL> (char= #\a #\a)
T
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES :AXES) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:06:42 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.313
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:13:47 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.632
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5 VECTOR)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:14:08 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.389
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:14:30 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.330
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
((VECTOR 0.5)) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5 VECTOR)))))
APRIL> (reverse '(1 2 3))
(3 2 1)
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:19:36 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.468
APRIL> (reverse '(1 2 3))
(3 2 1)
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
((VECTOR 0.5)) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:19:46 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.338
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:20:33 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.504
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: VECTOR>.
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:20:49 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.317
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST (VECTOR 0.5) 4)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:21:00 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.389
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:21:06 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.444
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:21:12 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.411
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 0.5>.
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:21:22 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.344
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
(((0.5))) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:21:30 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.367
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
(((0.5))) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST VECTOR 0.5)))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:21:44 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.828
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
(((0.5))) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST (VECTOR 0.5))))))
APRIL> (april (set (:compile-only)) "⊃[0.5;1](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5) (1))) 
(((0.5) (1))) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST (VECTOR 0.5))))))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:22:30 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.438
APRIL> (april (set (:compile-only)) "⊃[0.5;1](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5) (1))) 
(((0.5) (1))) ; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 0.5>.
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
(((0.5))) 
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:22:43 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.364
; Evaluation aborted on #<TYPE-ERROR expected-type: LIST datum: 0.5>.
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
((0.5)) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST (VECTOR 0.5))))))
APRIL> (april (set (:compile-only)) "⊃[0.5;1](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5) (1))) 
((0.5) (1)) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3))
       (LIST (VECTOR 0.5) (VECTOR 1))))))
APRIL> (april (set (:compile-only)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
((0.5)) 
(PROGN
 (DISCLOSE
  (IF (AND)
      (FUNCALL
       #'(LAMBDA (OMEGA &OPTIONAL AXES)
           (MIX-ARRAYS
            (IF AXES
                (CEILING
                 (- (1+ (RANK OMEGA)) (AREF (FIRST AXES) 0)
                    (OF-STATE *APRIL-IDIOM* :COUNT-FROM)))
                0)
            OMEGA))
       (VECTOR (VECTOR 1) (VECTOR 1 2) (VECTOR 1 2 3)) (LIST (VECTOR 0.5))))))
APRIL> (april (set (:compile-onl)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
((0.5)) 
#2A((1 1 1) (0 2 2) (0 0 3))
APRIL> (april (set (:compile-onl)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
((0.5)) 
#2A((1 1 1) (0 2 2) (0 0 3))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:23:30 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.410
APRIL> (april (set (:compile-onl)) "⊃[0.5](1)(1 2)(1 2 3)")

(:AXES (:AXES (0.5))) 
#2A((1 1 1) (0 2 2) (0 0 3))
; compiling file "/Users/owner/Documents/src/april/april.lisp" (written 06 AUG 2018 07:24:07 PM):

; /Users/owner/Documents/src/april/april.fasl written
; compilation finished in 0:00:00.350
APRIL> (april (set (:compile-onl)) "⊃[0.5](1)(1 2)(1 2 3)")
#2A((1 1 1) (0 2 2) (0 0 3))
APRIL> (april (test))
1..226

[←] Assign
  [32m✓ [90m55 is expected to be 55[0m 
[0m
  [32m✓ [90m#3A(((7 7 7 7) (5 6 7 8) (9 1 2 3)) ((7 7 7 7) (8 9 1 2) (3 4 5 6))) is expected to be #3A(((7 7 7 7) (5 6 7 8) (9 1 2 3)) ((7 7 7 7) (8 9 1 2) (3 4 5 6)))[0m 
[0m

[⊣] Empty / Left
  [32m✓ [90m#() is expected to be #()[0m 
[0m
  [32m✓ [90m55 is expected to be 55[0m 
[0m

[⊢] Identity / Right
  [32m✓ [90m77 is expected to be 77[0m 
[0m
  [32m✓ [90m77 is expected to be 77[0m 
[0m

[+] Identity or Negate Imaginary / Add
  [32m✓ [90m5 is expected to be 5[0m 
[0m
  [32m✓ [90m#C(5 -2) is expected to be #C(5 -2)[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m#(2 3 4) is expected to be #(2 3 4)[0m 
[0m

[-] Negate / Subtract
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(5 4 3) is expected to be #(5 4 3)[0m 
[0m

[×] Direction / Multiply
  [32m✓ [90m#(1 1 0 -1 1 -1) is expected to be #(1 1 0 -1 1 -1)[0m 
[0m
  [32m✓ [90m6 is expected to be 6[0m 
[0m
  [32m✓ [90m#(32 45) is expected to be #(32 45)[0m 
[0m

[÷] Reciprocal / Divide
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m#(2 4 6) is expected to be #(2 4 6)[0m 
[0m
  [32m✓ [90m#(1/2 1/4 1/8) is expected to be #(1/2 1/4 1/8)[0m 
[0m

[⋆] Exponential / Power
  [32m✓ [90m7389 is expected to be 7389[0m 
[0m
  [32m✓ [90m16 is expected to be 16[0m 
[0m
  [32m✓ [90m4 is expected to be 4[0m 
[0m

[⍟] Natural Logarithm / Logarithm
  [32m✓ [90m1609 is expected to be 1609[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m

[|] Magnitude / Residue
  [32m✓ [90m55 is expected to be 55[0m 
[0m
  [32m✓ [90m33 is expected to be 33[0m 
[0m
  [32m✓ [90m7 is expected to be 7[0m 
[0m

[!] Factorial / Binomial
  [32m✓ [90m120 is expected to be 120[0m 
[0m
  [32m✓ [90m792 is expected to be 792[0m 
[0m

[⌈] Ceiling / Maximum
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m
  [32m✓ [90m#(3 3 3 3 4 5) is expected to be #(3 3 3 3 4 5)[0m 
[0m

[⌊] Floor / Minimum
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(0 1 2 3 3 3) is expected to be #(0 1 2 3 3 3)[0m 
[0m

[○] Pi Times / Circular
  [32m✓ [90m314159 is expected to be 314159[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m

[~] Not / Without
  [32m✓ [90m#(0 1 0) is expected to be #(0 1 0)[0m 
[0m
  [32m✓ [90m#(1 2 4 6 7) is expected to be #(1 2 4 6 7)[0m 
[0m
  [32m✓ [90m"MCNI" is expected to be "MCNI"[0m 
[0m

[<] Less
  [32m✓ [90m#(0 0 0 1 1) is expected to be #(0 0 0 1 1)[0m 
[0m

[≤] Less or Equal
  [32m✓ [90m#(0 0 1 1 1) is expected to be #(0 0 1 1 1)[0m 
[0m

[=] Equal
  [32m✓ [90m#(0 0 1 0 0) is expected to be #(0 0 1 0 0)[0m 
[0m

[≥] Greater or Equal
  [32m✓ [90m#(1 1 1 0 0) is expected to be #(1 1 1 0 0)[0m 
[0m

[>] Greater
  [32m✓ [90m#(1 1 0 0 0) is expected to be #(1 1 0 0 0)[0m 
[0m

[≠] Not Equal
  [32m✓ [90m#(1 1 0 1 1) is expected to be #(1 1 0 1 1)[0m 
[0m

[≡] Depth / Match
  [32m✓ [90m3 is expected to be 3[0m 
[0m

[≢] First Dimension / Not Match
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[∧] And
  [32m✓ [90m#(0 0 0 1) is expected to be #(0 0 0 1)[0m 
[0m

[⍲] Nand
  [32m✓ [90m#(1 1 1 0) is expected to be #(1 1 1 0)[0m 
[0m

[∨] Or
  [32m✓ [90m#(0 1 1 1) is expected to be #(0 1 1 1)[0m 
[0m

[⍱] Nor
  [32m✓ [90m#(1 0 0 0) is expected to be #(1 0 0 0)[0m 
[0m

[⍳] Index / Index Of
  [32m✓ [90m#(1 2 3 4 5) is expected to be #(1 2 3 4 5)[0m 
[0m
  [32m✓ [90m#(2 2 1 2 2) is expected to be #(2 2 1 2 2)[0m 
[0m

[⍴] Shape / Reshape
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m#(3 5) is expected to be #(3 5)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2)) is expected to be #2A((1 2 3 1 2) (3 1 2 3 1) (2 3 1 2 3) (1 2 3 1 2))[0m 
[0m

[⌷] At Axes
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m7 is expected to be 7[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [32m✓ [90m#(4 5 1 2) is expected to be #(4 5 1 2)[0m 
[0m

[∊] Enlist / Membership
  [32m✓ [90m#(1 2 3 4 5 6 7 8) is expected to be #(1 2 3 4 5 6 7 8)[0m 
[0m
  [32m✓ [90m#(1 1 0) is expected to be #(1 1 0)[0m 
[0m

[⍷] Find
  [32m✓ [90m#3A(((0 0 0 0) (0 1 0 0) (0 0 0 0)) ((0 0 1 0) (0 0 0 0) (0 0 0 0))) is expected to be #3A(((0 0 0 0) (0 1 0 0) (0 0 0 0)) ((0 0 1 0) (0 0 0 0) (0 0 0 0)))[0m 
[0m

[↑] Disclose / Take
  [32m✓ [90m#(1 2 3 4) is expected to be #(1 2 3 4)[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1))) is expected to be #3A(((1 2 3 4) (7 8 9 1) (4 5 6 7)) ((4 5 6 7) (1 2 3 4) (7 8 9 1)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4)) ((4 5 6 7))) is expected to be #3A(((1 2 3 4)) ((4 5 6 7)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8)) ((4 5 6 7) (8 9 1 2))) is expected to be #3A(((1 2 3 4) (5 6 7 8)) ((4 5 6 7) (8 9 1 2)))[0m 
[0m
  [32m✓ [90m#3A(((1 2) (5 6) (9 1)) ((4 5) (8 9) (3 4))) is expected to be #3A(((1 2) (5 6) (9 1)) ((4 5) (8 9) (3 4)))[0m 
[0m

[↓] Split / Drop
  [32m✓ [90m#(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3)) is expected to be #(#(1 2 3 4) #(5 6 7 8) #(9 1 2 3))[0m 
[0m
  [32m✓ [90m#3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3))) is expected to be #3A(((3 4 5 6) (9 1 2 3) (6 7 8 9)) ((6 7 8 9) (3 4 5 6) (9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((4 5 6 7) (8 9 1 2) (3 4 5 6))) is expected to be #3A(((4 5 6 7) (8 9 1 2) (3 4 5 6)))[0m 
[0m
  [32m✓ [90m#3A(((5 6 7 8) (9 1 2 3)) ((8 9 1 2) (3 4 5 6))) is expected to be #3A(((5 6 7 8) (9 1 2 3)) ((8 9 1 2) (3 4 5 6)))[0m 
[0m
  [32m✓ [90m#3A(((9 1 2 3)) ((3 4 5 6))) is expected to be #3A(((9 1 2 3)) ((3 4 5 6)))[0m 
[0m
  [32m✓ [90m#3A(((3 4) (7 8) (2 3)) ((6 7) (1 2) (5 6))) is expected to be #3A(((3 4) (7 8) (2 3)) ((6 7) (1 2) (5 6)))[0m 
[0m
  [32m✓ [90m#(1 2 3 4 5 6 7) is expected to be #(1 2 3 4 5 6 7)[0m 
[0m

[,] Ravel / Catenate or Laminate
  [32m✓ [90m#(1 2 3 4 5 6 7 8 9 1 2 3) is expected to be #(1 2 3 4 5 6 7 8 9 1 2 3)[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3 4)) ((5 6 7 8)) ((9 1 2 3))) is expected to be #3A(((1 2 3 4)) ((5 6 7 8)) ((9 1 2 3)))[0m 
[0m
  [32m✓ [90m#3A(((1) (2) (3) (4)) ((5) (6) (7) (8)) ((9) (1) (2) (3))) is expected to be #3A(((1) (2) (3) (4)) ((5) (6) (7) (8)) ((9) (1) (2) (3)))[0m 
[0m
  [32m✓ [90m#2A((1 2 3) (4 5 6) (7 8 9) (10 11 12) (1 2 3) (4 5 6)) is expected to be #2A((1 2 3) (4 5 6) (7 8 9) (10 11 12) (1 2 3) (4 5 6))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8 9) (10 11 12 1 2 3 4 5 6)) is expected to be #2A((1 2 3 4 5 6 7 8 9) (10 11 12 1 2 3 4 5 6))[0m 
[0m
  [32m✓ [90m#(1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6)[0m 
[0m
  [32m✓ [90m#2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3)) is expected to be #2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3)) is expected to be #2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3)) is expected to be #2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3))[0m 
[0m
  [32m✓ [90m#(1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6)[0m 
[0m
  [32m✓ [90m#(1 2 3 4 5 6) is expected to be #(1 2 3 4 5 6)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (1 2 3 4)) is expected to be #2A((1 2 3 4) (1 2 3 4))[0m 
[0m
  [32m✓ [90m#2A((1 1) (2 2) (3 3) (4 4)) is expected to be #2A((1 1) (2 2) (3 3) (4 4))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3) (4 5 6)) ((1 2 3) (4 5 6))) is expected to be #3A(((1 2 3) (4 5 6)) ((1 2 3) (4 5 6)))[0m 
[0m
  [32m✓ [90m#3A(((1 1) (2 2) (3 3)) ((4 4) (5 5) (6 6))) is expected to be #3A(((1 1) (2 2) (3 3)) ((4 4) (5 5) (6 6)))[0m 
[0m
  [32m✓ [90m#2A((#\U #\N #\D #\E #\R) (#\- #\- #\- #\- #\-)) is expected to be #2A((#\U #\N #\D #\E #\R) (#\- #\- #\- #\- #\-))[0m 
[0m
  [32m✓ [90m#2A((#\H #\.) (#\E #\.) (#\L #\.) (#\L #\.) (#\O #\.)) is expected to be #2A((#\H #\.) (#\E #\.) (#\L #\.) (#\L #\.) (#\O #\.))[0m 
[0m

[⍪] Table / Catenate First
  [32m✓ [90m#2A((#\M) (#\A) (#\K) (#\E)) is expected to be #2A((#\M) (#\A) (#\K) (#\E))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24)) is expected to be #2A((1 2 3 4 5 6 7 8 9 10 11 12) (13 14 15 16 17 18 19 20 21 22 23 24))[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3)) is expected to be #2A((0 0 0 0) (1 2 3 4) (5 6 7 8) (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3)) is expected to be #2A((0 1 2 3 4) (0 5 6 7 8) (0 9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3)) is expected to be #2A((1 2 3 4)
        (5 6 1 2)
        (3 4 5 6)
        (1 2 3 4)
        (5 6 1 2)
        (1 2 3 4)
        (5 6 7 8)
        (9 1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3)) is expected to be #2A((1 2 3 4 5 6 1 2 3 4) (1 2 3 4 5 6 5 6 7 8) (1 2 3 4 5 6 9 1 2 3))[0m 
[0m

[/] Replicate
  [32m✓ [90m#(3 3 3 3 3) is expected to be #(3 3 3 3 3)[0m 
[0m
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
  [32m✓ [90m#(1 1 1) is expected to be #(1 1 1)[0m 
[0m
  [32m✓ [90m#(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5)) is expected to be #(#(1 2 3 4 5) #(1 2 3 4 5) #(1 2 3 4 5))[0m 
[0m
  [32m✓ [90m#2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)) is expected to be #2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6)) is expected to be #2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6))[0m 
[0m

[⌿] Replicate First
  [32m✓ [90m#(1 3 5) is expected to be #(1 3 5)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6)) is expected to be #2A((1 2 3 4 5) (0 0 0 0 0) (0 0 0 0 0) (2 3 4 5 6) (2 3 4 5 6) (2 3 4 5 6))[0m 
[0m
  [32m✓ [90m#2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)) is expected to be #2A((1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5)
        (1 0 0 3 3 3 0 0 0 0 5 5 5 5 5))[0m 
[0m

[\] Expand
  [32m✓ [90m".  ...    ....." is expected to be ".  ...    ....."[0m 
[0m
  [32m✓ [90m#2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9)) is expected to be #2A((4 0 0 5 5 0 6) (7 0 0 8 8 0 9))[0m 
[0m
  [32m✓ [90m#2A((4 5 6) (0 0 0) (7 8 9)) is expected to be #2A((4 5 6) (0 0 0) (7 8 9))[0m 
[0m

[⍀] Expand First
  [32m✓ [90m#(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3) is expected to be #(3 0 0 3 3 3 0 0 0 0 3 3 3 3 3)[0m 
[0m
  [32m✓ [90m#2A((4 5 6) (0 0 0) (7 8 9)) is expected to be #2A((4 5 6) (0 0 0) (7 8 9))[0m 
[0m

[⊂] Enclose / Partition
  [32m✓ [90m#(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5))) is expected to be #(1 #2A((1 2 3 4) (5 6 7 1) (2 3 4 5)))[0m 
[0m
  [32m✓ [90m#2A(("GRAY" "GOLD" "BLUE") ("SILK" "WOOL" "YARN")) is expected to be #2A(("GRAY" "GOLD" "BLUE") ("SILK" "WOOL" "YARN"))[0m 
[0m
  [32m✓ [90m#2A(("GGB" "ROL" "ALU" "YDE") ("SWY" "IOA" "LOR" "KLN")) is expected to be #2A(("GGB" "ROL" "ALU" "YDE") ("SWY" "IOA" "LOR" "KLN"))[0m 
[0m
  [32m✓ [90m#2A(("GS" "RI" "AL" "YK") ("GW" "OO" "LO" "DL") ("BY" "LA" "UR" "EN")) is expected to be #2A(("GS" "RI" "AL" "YK") ("GW" "OO" "LO" "DL") ("BY" "LA" "UR" "EN"))[0m 
[0m
  [32m✓ [90m#(#2A((#\G #\R #\A #\Y) (#\G #\O #\L #\D) (#\B #\L #\U #\E))
      #2A((#\S #\I #\L #\K) (#\W #\O #\O #\L) (#\Y #\A #\R #\N))) is expected to be #(#2A((#\G #\R #\A #\Y) (#\G #\O #\L #\D) (#\B #\L #\U #\E))
      #2A((#\S #\I #\L #\K) (#\W #\O #\O #\L) (#\Y #\A #\R #\N)))[0m 
[0m
  [32m✓ [90m#(#2A((#\G #\R #\A #\Y) (#\S #\I #\L #\K))
      #2A((#\G #\O #\L #\D) (#\W #\O #\O #\L))
      #2A((#\B #\L #\U #\E) (#\Y #\A #\R #\N))) is expected to be #(#2A((#\G #\R #\A #\Y) (#\S #\I #\L #\K))
      #2A((#\G #\O #\L #\D) (#\W #\O #\O #\L))
      #2A((#\B #\L #\U #\E) (#\Y #\A #\R #\N)))[0m 
[0m
  [32m✓ [90m#(#2A((#\G #\G #\B) (#\S #\W #\Y)) #2A((#\R #\O #\L) (#\I #\O #\A))
      #2A((#\A #\L #\U) (#\L #\O #\R)) #2A((#\Y #\D #\E) (#\K #\L #\N))) is expected to be #(#2A((#\G #\G #\B) (#\S #\W #\Y)) #2A((#\R #\O #\L) (#\I #\O #\A))
      #2A((#\A #\L #\U) (#\L #\O #\R)) #2A((#\Y #\D #\E) (#\K #\L #\N)))[0m 
[0m
  [32m✓ [90m#(#(1 2) #(3 4 5) #(6 7 8 9)) is expected to be #(#(1 2) #(3 4 5) #(6 7 8 9))[0m 
[0m

[⍧] Partitioned Enclose
  [32m✓ [90m#(#(2 3 4) #(5) #(6 7 8 9)) is expected to be #(#(2 3 4) #(5) #(6 7 8 9))[0m 
[0m
  [32m✓ [90m#(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5))) is expected to be #(#2A((2 3 4) (1 2 3) (9 1 2) (8 9 1)) #2A((5) (4) (3) (2))
      #2A((6 7 8) (5 6 7) (4 5 6) (3 4 5)))[0m 
[0m
  [32m✓ [90m#(#2A((9 1 2 3 4 5 6 7) (8 9 1 2 3 4 5 6)) #2A((7 8 9 1 2 3 4 5))) is expected to be #(#2A((9 1 2 3 4 5 6 7) (8 9 1 2 3 4 5 6)) #2A((7 8 9 1 2 3 4 5)))[0m 
[0m

[⊃] Mix / Pick
  [32m✓ [90m#2A((1 0 0) (1 2 0) (1 2 3)) is expected to be #2A((1 0 0) (1 2 0) (1 2 3))[0m 
[0m
  [32m✓ [90m#2A((1 1 1) (0 2 2) (0 0 3)) is expected to be #2A((1 1 1) (0 2 2) (0 0 3))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0))) is expected to be #3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0)))[0m 
[0m
  [32m✓ [90m#3A(((1 4 0 0) (1 3 5 7)) ((2 5 0 0) (2 4 6 8)) ((3 1 0 0) (0 0 0 0))) is expected to be #3A(((1 4 0 0) (1 3 5 7)) ((2 5 0 0) (2 4 6 8)) ((3 1 0 0) (0 0 0 0)))[0m 
[0m
  [32m✓ [90m#3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0))) is expected to be #3A(((1 2 3) (4 5 1) (0 0 0) (0 0 0)) ((1 2 0) (3 4 0) (5 6 0) (7 8 0)))[0m 
[0m
  [32m✓ [90m#4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3)))) is expected to be #4A((((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))) (((1 0 0) (1 2 0)) ((3 4 0) (1 2 3))))[0m 
[0m
  [32m✓ [90m#(4 5 6) is expected to be #(4 5 6)[0m 
[0m
  [32m✓ [90m5 is expected to be 5[0m 
[0m

[∪] Unique / Union
  [32m✓ [90m#(1 2 3 4 5 8 9 10 11 7 12) is expected to be #(1 2 3 4 5 8 9 10 11 7 12)[0m 
[0m
  [32m✓ [90m"MISP" is expected to be "MISP"[0m 
[0m
  [32m✓ [90m#(3 10 14 18 11 9 4 5 8) is expected to be #(3 10 14 18 11 9 4 5 8)[0m 
[0m
  [32m✓ [90m"STEELABR" is expected to be "STEELABR"[0m 
[0m
  [32m✓ [90m#("APRIL" "MAY" "JUNE") is expected to be #("APRIL" "MAY" "JUNE")[0m 
[0m

[∩] Intersection
  [32m✓ [90m"TRE" is expected to be "TRE"[0m 
[0m
  [32m✓ [90m"SEE" is expected to be "SEE"[0m 
[0m
  [32m✓ [90m#(1 4) is expected to be #(1 4)[0m 
[0m

[⌽] Reverse / Rotate
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
  [32m✓ [90m#2A((4 3 2 1) (8 7 6 5) (3 2 1 9)) is expected to be #2A((4 3 2 1) (8 7 6 5) (3 2 1 9))[0m 
[0m
  [32m✓ [90m#2A((3 4 1 2) (7 8 5 6) (2 3 9 1)) is expected to be #2A((3 4 1 2) (7 8 5 6) (2 3 9 1))[0m 
[0m

[⊖] Reverse First / Rotate First
  [32m✓ [90m#(5 4 3 2 1) is expected to be #(5 4 3 2 1)[0m 
[0m
  [32m✓ [90m#2A((9 1 2 3) (5 6 7 8) (1 2 3 4)) is expected to be #2A((9 1 2 3) (5 6 7 8) (1 2 3 4))[0m 
[0m
  [32m✓ [90m#2A((5 6 7 8) (9 1 2 3) (1 2 3 4)) is expected to be #2A((5 6 7 8) (9 1 2 3) (1 2 3 4))[0m 
[0m

[⍉] Transpose / Permute
  [32m✓ [90m#3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6))) is expected to be #3A(((1 4) (5 8) (9 3))
        ((2 5) (6 9) (1 4))
        ((3 6) (7 1) (2 5))
        ((4 7) (8 2) (3 6)))[0m 
[0m
  [32m✓ [90m#3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6))) is expected to be #3A(((1 5 9) (2 6 1) (3 7 2) (4 8 3)) ((4 8 3) (5 9 4) (6 1 5) (7 2 6)))[0m 
[0m

[⌹] Matrix Inverse / Matrix Divide
  [32m✓ [90m#(1/30 1/15 1/10 2/15) is expected to be #(1/30 1/15 1/10 2/15)[0m 
[0m
  [32m✓ [90m#2A((-1/32 9/64) (1/8 -1/16)) is expected to be #2A((-1/32 9/64) (1/8 -1/16))[0m 
[0m
  [32m✓ [90m#2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42)) is expected to be #2A((3/14 -1/14 3/14 -1/14) (2/21 1/42 2/21 1/42))[0m 
[0m
  [32m✓ [90m#(193/90 739/90 229/45) is expected to be #(193/90 739/90 229/45)[0m 
[0m
  [32m✓ [90m#2A((1 2) (2 4) (6 4)) is expected to be #2A((1 2) (2 4) (6 4))[0m 
[0m

[⍋] Grade Up / Grade Up By
  [32m✓ [90m#(5 7 2 3 6 1 4) is expected to be #(5 7 2 3 6 1 4)[0m 
[0m
  [32m✓ [90m#(1 4 2 5 3) is expected to be #(1 4 2 5 3)[0m 
[0m
  [32m✓ [90m"adeggijnouw" is expected to be "adeggijnouw"[0m 
[0m
  [32m✓ [90m#(1 3 2 6 4 5) is expected to be #(1 3 2 6 4 5)[0m 
[0m

[⍒] Grade Down / Grade Down By
  [32m✓ [90m#(7 3 1 5 6 4 2) is expected to be #(7 3 1 5 6 4 2)[0m 
[0m
  [32m✓ [90m#(2 4 1 3 5) is expected to be #(2 4 1 3 5)[0m 
[0m
  [32m✓ [90m"wuonjiggeda" is expected to be "wuonjiggeda"[0m 
[0m
  [32m✓ [90m#(5 4 6 2 3 1) is expected to be #(5 4 6 2 3 1)[0m 
[0m

[⊤] Encode
  [32m✓ [90m#(2 0 10) is expected to be #(2 0 10)[0m 
[0m
  [32m✓ [90m#(0 0 6 4) is expected to be #(0 0 6 4)[0m 
[0m
  [32m✓ [90m#2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1)) is expected to be #2A((0 0 0 0 0) (0 0 0 0 0) (0 0 0 1 1) (0 1 1 0 0) (1 0 1 0 1))[0m 
[0m

[⊥] Decode
  [32m✓ [90m2671 is expected to be 2671[0m 
[0m
  [32m✓ [90m101 is expected to be 101[0m 
[0m
  [32m✓ [90m#(98 75 67) is expected to be #(98 75 67)[0m 
[0m

[⍎] Evaluate
  [32m✓ [90m2 is expected to be 2[0m 
[0m

[←] Assign Result Of
  [32m✓ [90m#(8 7 6) is expected to be #(8 7 6)[0m 
[0m
  [32m✓ [90m#(3 7 1) is expected to be #(3 7 1)[0m 
[0m

[/] Reduce
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m#(10 26 42) is expected to be #(10 26 42)[0m 
[0m
  [32m✓ [90m#(15 18 21 24) is expected to be #(15 18 21 24)[0m 
[0m; in: LET* ((#:G7918 :UNDEFINED))
;     (LET* ((#:G7918 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ APRIL::⍺)))
; 
; caught STYLE-WARNING:
;   The variable #:G7918 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
  [32m✓ [90m15 is expected to be 15[0m 
[0m
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m

[⌿] Reduce First
  [32m✓ [90m#(15 18 21 24) is expected to be #(15 18 21 24)[0m 
[0m
  [32m✓ [90m#(207 330 495 708) is expected to be #(207 330 495 708)[0m 
[0m
  [32m✓ [90m#(10 26 42) is expected to be #(10 26 42)[0m 
[0m

[\] Scan
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
  [32m✓ [90m#2A((1 3 6 10) (5 11 18 26) (9 19 30 42)) is expected to be #2A((1 3 6 10) (5 11 18 26) (9 19 30 42))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (6 8 10 12) (15 18 21 24)) is expected to be #2A((1 2 3 4) (6 8 10 12) (15 18 21 24))[0m 
[0m

[⍀] Scan First
  [32m✓ [90m#(1 3 6 10 15) is expected to be #(1 3 6 10 15)[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (6 8 10 12) (15 18 21 24)) is expected to be #2A((1 2 3 4) (6 8 10 12) (15 18 21 24))[0m 
[0m
  [32m✓ [90m#2A((1 2 3 4) (20 30 42 56) (288 450 660 924)) is expected to be #2A((1 2 3 4) (20 30 42 56) (288 450 660 924))[0m 
[0m
  [32m✓ [90m#2A((1 3 6 10) (5 11 18 26) (9 19 30 42)) is expected to be #2A((1 3 6 10) (5 11 18 26) (9 19 30 42))[0m 
[0m

[.] Inner/Outer Product
  [32m✓ [90m24 is expected to be 24[0m 
[0m
  [32m✓ [90m145 is expected to be 145[0m 
[0m
  [32m✓ [90m#(17 41 55) is expected to be #(17 41 55)[0m 
[0m
  [32m✓ [90m#(25 53 42) is expected to be #(25 53 42)[0m 
[0m
  [32m✓ [90m#2A((24 34 44 54) (25 35 45 55) (26 36 46 56)) is expected to be #2A((24 34 44 54) (25 35 45 55) (26 36 46 56))[0m 
[0m
  [32m✓ [90m#2A((0 -1 -2) (1 0 -1) (2 1 0)) is expected to be #2A((0 -1 -2) (1 0 -1) (2 1 0))[0m 
[0m
  [32m✓ [90m#2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3))) is expected to be #2A((1 2 3) (#(1 1) #(2 2) #(3 3)) (#(1 1 1) #(2 2 2) #(3 3 3)))[0m 
[0m
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
  [32m✓ [90m#(#(2 3 1) #(3 1 2) #(1 2 3)) is expected to be #(#(2 3 1) #(3 1 2) #(1 2 3))[0m 
[0m

[¨] Each
  [32m✓ [90m#(1 #(1 2) #(1 2 3)) is expected to be #(1 #(1 2) #(1 2 3))[0m 
[0m
  [32m✓ [90m#(#(2 3 4 5 1) #(5 1 2 3 4)) is expected to be #(#(2 3 4 5 1) #(5 1 2 3 4))[0m 
[0m

[⍨] Commute
  [32m✓ [90m5 is expected to be 5[0m 
[0m
  [32m✓ [90m20 is expected to be 20[0m 
[0m

[∘] Compose
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [32m✓ [90m1 is expected to be 1[0m 
[0m
  [31m× #(#<FUNCTION (LAMBDA (OMEGA)) {1003863A4B}> 30) is expected to be 6 
[0m
  [31m× Raised an error The value
                      #<FUNCTION (LAMBDA (OMEGA)) {100386444B}>
                    is not of type
                      NUMBER (expected: #(56487 176487 266487))[0m
  [32m✓ [90m3 is expected to be 3[0m 
[0m
  [31m× Raised an error The value
                      #<FUNCTION (LAMBDA
                                     (OMEGA-COMP
                                      &OPTIONAL ALPHA-COMP)) {100386588B}>
    
                    is not of type
                      REAL (expected: #(148 2981 162755))[0m
  [32m✓ [90m16180 is expected to be 16180[0m 
[0m
  [32m✓ [90m#(3 15 36) is expected to be #(3 15 36)[0m 
[0m

[⍣] Power; in: LET* ((#:G8091 :UNDEFINED))
;     (LET* ((#:G8091 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 2))))
; 
; caught STYLE-WARNING:
;   The variable #:G8091 is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
  [32m✓ [90m11 is expected to be 11[0m 
[0m
  [31m× #(#<FUNCTION (LAMBDA (OMEGA &OPTIONAL ALPHA)) {100686134B}> 9) is expected to be 15 
[0m; in: LET* ((#:G8104 :UNDEFINED))
;     (LET* ((#:G8104 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC
;                 #'(LAMBDA (APRIL::OMEGA APRIL::ALPHA)
;                     (IF #
;                         1
;                         0))
;                 APRIL::⍵ (VECTOR 10))))
; 
; caught STYLE-WARNING:
;   The variable #:G8104 is defined but never used.

;     (LET* ((#:G8104 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ APRIL::⍵ (VECTOR 2))))
; 
; caught STYLE-WARNING:
;   The variable #:G8104 is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
  [32m✓ [90m10 is expected to be 10[0m 
[0m

Basic function definition and use, with comments.; in: LET* ((#:G8111 :UNDEFINED) (#:G8112 :UNDEFINED))
;     (LET* ((#:G8111 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'+ (VECTOR 3) APRIL::⍵)))
; 
; caught STYLE-WARNING:
;   The variable #:G8111 is defined but never used.

;     (LET* ((#:G8111
;             (LAMBDA (APRIL::OMEGA &OPTIONAL APRIL::ALPHA) (FUNCALL # # #)))
;            (#:G8112 NIL))
;       (APRIL::DISCLOSE
;        (FUNCALL #'APRIL::APPLY-SCALAR-DYADIC #'* (VECTOR 2) APRIL::⍵)))
; 
; caught STYLE-WARNING:
;   The variable #:G8111 is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable #:G8112 is defined but never used.
; 
; compilation unit finished
;   caught 3 STYLE-WARNING conditions
  [32m✓ [90m#(8 10 12 14 16) is expected to be #(8 10 12 14 16)[0m 
[0mMonadic inline function.
  [32m✓ [90m#(6 7 8) is expected to be #(6 7 8)[0m 
[0mDyadic inline function.
  [32m✓ [90m#(6 14 24) is expected to be #(6 14 24)[0m 
[0mVariable-referenced values, including an element within an array, in a vector.
  [32m✓ [90m#(1 2 9 3 5) is expected to be #(1 2 9 3 5)[0m 
[0mAssignment of an element within an array.
  [32m✓ [90m#2A((1 20 3) (4 5 6)) is expected to be #2A((1 20 3) (4 5 6))[0m 
[0mSelection from an array with multiple elided dimensions.
  [32m✓ [90m#2A((6 2 7 3) (3 8 4 9) (9 5 1 6)) is expected to be #2A((6 2 7 3) (3 8 4 9) (9 5 1 6))[0m 
[0mElided assignment.
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 0 7) (8 9 0 2) (3 4 0 6))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 0 7) (8 9 0 2) (3 4 0 6)))[0m 
[0mElided assignment of applied function's results.
  [32m✓ [90m#3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 16 7) (8 9 11 2) (3 4 15 6))) is expected to be #3A(((1 2 3 4) (5 6 7 8) (9 1 2 3)) ((4 5 16 7) (8 9 11 2) (3 4 15 6)))[0m 
[0mElision and indexed array elements.
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8) (7 8 9 1 2 3 4 5)) is expected to be #2A((1 2 3 4 5 6 7 8) (7 8 9 1 2 3 4 5))[0m 
[0mAs above but more complex.
  [32m✓ [90m#3A(((2 1) (7 6) (3 2) (8 7) (4 3) (9 8) (5 4) (1 9))
        ((5 4) (1 9) (6 5) (2 1) (7 6) (3 2) (8 7) (4 3))) is expected to be #3A(((2 1) (7 6) (3 2) (8 7) (4 3) (9 8) (5 4) (1 9))
        ((5 4) (1 9) (6 5) (2 1) (7 6) (3 2) (8 7) (4 3)))[0m 
[0mIndices of indices.
  [32m✓ [90m#2A((7 6) (8 7) (4 3)) is expected to be #2A((7 6) (8 7) (4 3))[0m 
[0mOperation over portions of an array.
  [32m✓ [90m#2A((1 2 3 4 5 6 7 8)
        (19 1 2 3 4 15 16 17)
        (8 9 1 2 3 4 5 6)
        (17 8 9 1 2 13 14 15)) is expected to be #2A((1 2 3 4 5 6 7 8)
        (19 1 2 3 4 15 16 17)
        (8 9 1 2 3 4 5 6)
        (17 8 9 1 2 13 14 15))[0m 
[0m
[31m× 4 of 226 tests failed[0m [90m(1464ms)[0m
NIL
APRIL> (/ 4)
1/4
APRIL> (april (set (:compile-only)) "(÷∘5) 30")
(PROGN
 (DISCLOSE
  (VECTOR
   (LAMBDA (OMEGA)
     (FUNCALL
      (LAMBDA (OMEGA ALPHA)
        (FUNCALL #'APPLY-SCALAR-DYADIC
                 #'(LAMBDA (VEX::OMEGA VEX::ALPHA)
                     (FUNCALL #'/ VEX::ALPHA VEX::OMEGA))
                 OMEGA ALPHA))
      (VECTOR 5) OMEGA))
   30)))
APRIL> (april (set (:compile-onl)) "(÷∘5) 30")
#(#<FUNCTION (LAMBDA (OMEGA)) {100273AD7B}> 30)
APRIL> (april (set (:compile-onl)) "g←÷∘5 ◊ g 30")
6
APRIL> 